"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@portabletext";
exports.ids = ["vendor-chunks/@portabletext"];
exports.modules = {

/***/ "(ssr)/../node_modules/@portabletext/block-tools/lib/_chunks-es/helpers.js":
/*!***************************************************************************!*\
  !*** ../node_modules/@portabletext/block-tools/lib/_chunks-es/helpers.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BLOCK_DEFAULT_STYLE: () => (/* binding */ BLOCK_DEFAULT_STYLE),\n/* harmony export */   DEFAULT_BLOCK: () => (/* binding */ DEFAULT_BLOCK),\n/* harmony export */   DEFAULT_SPAN: () => (/* binding */ DEFAULT_SPAN),\n/* harmony export */   HTML_BLOCK_TAGS: () => (/* binding */ HTML_BLOCK_TAGS),\n/* harmony export */   HTML_DECORATOR_TAGS: () => (/* binding */ HTML_DECORATOR_TAGS),\n/* harmony export */   HTML_HEADER_TAGS: () => (/* binding */ HTML_HEADER_TAGS),\n/* harmony export */   HTML_LIST_CONTAINER_TAGS: () => (/* binding */ HTML_LIST_CONTAINER_TAGS),\n/* harmony export */   HTML_LIST_ITEM_TAGS: () => (/* binding */ HTML_LIST_ITEM_TAGS),\n/* harmony export */   HTML_SPAN_TAGS: () => (/* binding */ HTML_SPAN_TAGS),\n/* harmony export */   defaultParseHtml: () => (/* binding */ defaultParseHtml),\n/* harmony export */   ensureRootIsBlocks: () => (/* binding */ ensureRootIsBlocks),\n/* harmony export */   flattenNestedBlocks: () => (/* binding */ flattenNestedBlocks),\n/* harmony export */   isElement: () => (/* binding */ isElement),\n/* harmony export */   isMinimalBlock: () => (/* binding */ isMinimalBlock),\n/* harmony export */   isMinimalSpan: () => (/* binding */ isMinimalSpan),\n/* harmony export */   isNodeList: () => (/* binding */ isNodeList),\n/* harmony export */   isPlaceholderAnnotation: () => (/* binding */ isPlaceholderAnnotation),\n/* harmony export */   isPlaceholderDecorator: () => (/* binding */ isPlaceholderDecorator),\n/* harmony export */   preprocess: () => (/* binding */ preprocess),\n/* harmony export */   resolveJsType: () => (/* binding */ resolveJsType),\n/* harmony export */   tagName: () => (/* binding */ tagName),\n/* harmony export */   trimWhitespace: () => (/* binding */ trimWhitespace)\n/* harmony export */ });\n/* harmony import */ var _portabletext_schema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @portabletext/schema */ \"(ssr)/../node_modules/@portabletext/schema/dist/index.js\");\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/../node_modules/lodash/isEqual.js\");\n/* harmony import */ var lodash_uniq_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/uniq.js */ \"(ssr)/../node_modules/lodash/uniq.js\");\n\n\n\nconst objectToString = Object.prototype.toString;\nfunction resolveJsType(val) {\n  switch (objectToString.call(val)) {\n    case \"[object Function]\":\n      return \"function\";\n    case \"[object Date]\":\n      return \"date\";\n    case \"[object RegExp]\":\n      return \"regexp\";\n    case \"[object Arguments]\":\n      return \"arguments\";\n    case \"[object Array]\":\n      return \"array\";\n    case \"[object String]\":\n      return \"string\";\n  }\n  return val === null ? \"null\" : val === void 0 ? \"undefined\" : val && typeof val == \"object\" && \"nodeType\" in val && val.nodeType === 1 ? \"element\" : val === Object(val) ? \"object\" : typeof val;\n}\nfunction isArbitraryTypedObject(object) {\n  return isRecord(object) && typeof object._type == \"string\";\n}\nfunction isRecord(value) {\n  return !!value && (typeof value == \"object\" || typeof value == \"function\");\n}\nfunction flattenNestedBlocks(context, blocks) {\n  return blocks.flatMap((block) => {\n    if (isBlockContainer(block))\n      return flattenNestedBlocks(context, [block.block]);\n    if ((0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_2__.isTextBlock)(context, block)) {\n      const hasBlockObjects = block.children.some((child) => context.schema.blockObjects.some(\n        (blockObject) => blockObject.name === child._type\n      )), hasBlocks = block.children.some(\n        (child) => child._type === \"__block\" || child._type === \"block\"\n      );\n      if (hasBlockObjects || hasBlocks) {\n        const splitChildren = getSplitChildren(context, block);\n        return splitChildren.length === 1 && splitChildren[0].type === \"children\" && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_0__(splitChildren[0].children, block.children) ? [block] : splitChildren.flatMap((slice) => slice.type === \"block object\" ? [slice.block] : slice.type === \"block\" ? flattenNestedBlocks(context, [\n          slice.block\n        ]) : slice.children.length > 0 ? slice.children.every(\n          (child) => (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_2__.isSpan)(context, child) && child.text.trim() === \"\"\n        ) ? [] : flattenNestedBlocks(context, [\n          {\n            ...block,\n            children: slice.children\n          }\n        ]) : []);\n      }\n      return [block];\n    }\n    return [block];\n  });\n}\nfunction isBlockContainer(block) {\n  return block._type === \"__block\" && isArbitraryTypedObject(block.block);\n}\nfunction getSplitChildren(context, block) {\n  return block.children.reduce(\n    (slices, child) => {\n      const knownInlineObject = context.schema.inlineObjects.some(\n        (inlineObject) => inlineObject.name === child._type\n      ), knownBlockObject = context.schema.blockObjects.some(\n        (blockObject) => blockObject.name === child._type\n      ), lastSlice = slices.pop();\n      return !(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_2__.isSpan)(context, child) && !knownInlineObject && knownBlockObject ? [\n        ...slices,\n        ...lastSlice ? [lastSlice] : [],\n        { type: \"block object\", block: child }\n      ] : child._type === \"__block\" ? [\n        ...slices,\n        ...lastSlice ? [lastSlice] : [],\n        {\n          type: \"block object\",\n          block: child.block\n        }\n      ] : child._type === \"block\" ? [\n        ...slices,\n        ...lastSlice ? [lastSlice] : [],\n        { type: \"block\", block: child }\n      ] : lastSlice && lastSlice.type === \"children\" ? [\n        ...slices,\n        {\n          type: \"children\",\n          children: [...lastSlice.children, child]\n        }\n      ] : [\n        ...slices,\n        ...lastSlice ? [lastSlice] : [],\n        { type: \"children\", children: [child] }\n      ];\n    },\n    []\n  );\n}\nvar s = { 0: 8203, 1: 8204, 2: 8205, 3: 8290, 4: 8291, 5: 8288, 6: 65279, 7: 8289, 8: 119155, 9: 119156, a: 119157, b: 119158, c: 119159, d: 119160, e: 119161, f: 119162 }, c = { 0: 8203, 1: 8204, 2: 8205, 3: 65279 };\nnew Array(4).fill(String.fromCodePoint(c[0])).join(\"\");\nObject.fromEntries(Object.entries(c).map((t) => t.reverse()));\nObject.fromEntries(Object.entries(s).map((t) => t.reverse()));\nvar S = `${Object.values(s).map((t) => `\\\\u{${t.toString(16)}}`).join(\"\")}`, f = new RegExp(`[${S}]{4,}`, \"gu\");\nfunction _(t) {\n  var e;\n  return { cleaned: t.replace(f, \"\"), encoded: ((e = t.match(f)) == null ? void 0 : e[0]) || \"\" };\n}\nfunction O(t) {\n  return t && JSON.parse(_(JSON.stringify(t)).cleaned);\n}\nconst PRESERVE_WHITESPACE_TAGS = [\"pre\", \"textarea\", \"code\"], BLOCK_DEFAULT_STYLE = \"normal\", DEFAULT_BLOCK = Object.freeze({\n  _type: \"block\",\n  markDefs: [],\n  style: BLOCK_DEFAULT_STYLE\n}), DEFAULT_SPAN = Object.freeze({\n  _type: \"span\",\n  marks: []\n}), HTML_BLOCK_TAGS = {\n  p: DEFAULT_BLOCK,\n  blockquote: { ...DEFAULT_BLOCK, style: \"blockquote\" }\n}, HTML_SPAN_TAGS = {\n  span: { object: \"text\" }\n}, HTML_LIST_CONTAINER_TAGS = {\n  ol: { object: null },\n  ul: { object: null }\n}, HTML_HEADER_TAGS = {\n  h1: { ...DEFAULT_BLOCK, style: \"h1\" },\n  h2: { ...DEFAULT_BLOCK, style: \"h2\" },\n  h3: { ...DEFAULT_BLOCK, style: \"h3\" },\n  h4: { ...DEFAULT_BLOCK, style: \"h4\" },\n  h5: { ...DEFAULT_BLOCK, style: \"h5\" },\n  h6: { ...DEFAULT_BLOCK, style: \"h6\" }\n}, HTML_MISC_TAGS = {\n  br: { ...DEFAULT_BLOCK, style: BLOCK_DEFAULT_STYLE }\n}, HTML_DECORATOR_TAGS = {\n  b: \"strong\",\n  strong: \"strong\",\n  i: \"em\",\n  em: \"em\",\n  u: \"underline\",\n  s: \"strike-through\",\n  strike: \"strike-through\",\n  del: \"strike-through\",\n  code: \"code\",\n  sup: \"sup\",\n  sub: \"sub\",\n  ins: \"ins\",\n  mark: \"mark\",\n  small: \"small\"\n}, HTML_LIST_ITEM_TAGS = {\n  li: {\n    ...DEFAULT_BLOCK,\n    style: BLOCK_DEFAULT_STYLE,\n    level: 1,\n    listItem: \"bullet\"\n  }\n}, ELEMENT_MAP = {\n  ...HTML_BLOCK_TAGS,\n  ...HTML_SPAN_TAGS,\n  ...HTML_LIST_CONTAINER_TAGS,\n  ...HTML_LIST_ITEM_TAGS,\n  ...HTML_HEADER_TAGS,\n  ...HTML_MISC_TAGS\n};\nlodash_uniq_js__WEBPACK_IMPORTED_MODULE_1__(\n  Object.values(ELEMENT_MAP).filter((tag) => \"style\" in tag).map((tag) => tag.style)\n);\nlodash_uniq_js__WEBPACK_IMPORTED_MODULE_1__(\n  Object.values(HTML_DECORATOR_TAGS)\n);\nconst _XPathResult = {\n  BOOLEAN_TYPE: 3,\n  ORDERED_NODE_ITERATOR_TYPE: 5,\n  UNORDERED_NODE_SNAPSHOT_TYPE: 6\n};\nvar preprocessGDocs = (_html, doc, options) => {\n  const whitespaceOnPasteMode = options?.unstable_whitespaceOnPasteMode || \"preserve\";\n  let gDocsRootOrSiblingNode = doc.evaluate(\n    '//*[@id and contains(@id, \"docs-internal-guid\")]',\n    doc,\n    null,\n    _XPathResult.ORDERED_NODE_ITERATOR_TYPE,\n    null\n  ).iterateNext();\n  if (gDocsRootOrSiblingNode) {\n    const isWrappedRootTag = tagName(gDocsRootOrSiblingNode) === \"b\";\n    switch (isWrappedRootTag || (gDocsRootOrSiblingNode = doc.body), whitespaceOnPasteMode) {\n      case \"normalize\":\n        normalizeWhitespace(gDocsRootOrSiblingNode);\n        break;\n      case \"remove\":\n        removeAllWhitespace(gDocsRootOrSiblingNode);\n        break;\n    }\n    const childNodes = doc.evaluate(\n      \"//*\",\n      doc,\n      null,\n      _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n      null\n    );\n    for (let i = childNodes.snapshotLength - 1; i >= 0; i--) {\n      const elm = childNodes.snapshotItem(i);\n      elm?.setAttribute(\"data-is-google-docs\", \"true\"), (elm?.parentElement === gDocsRootOrSiblingNode || !isWrappedRootTag && elm.parentElement === doc.body) && (elm?.setAttribute(\"data-is-root-node\", \"true\"), tagName(elm)), tagName(elm) === \"li\" && elm.firstChild && tagName(elm?.firstChild) === \"img\" && elm.removeChild(elm.firstChild);\n    }\n    return isWrappedRootTag && doc.body.firstElementChild?.replaceWith(\n      ...Array.from(gDocsRootOrSiblingNode.childNodes)\n    ), doc;\n  }\n  return doc;\n};\nconst unwantedWordDocumentPaths = [\n  \"/html/text()\",\n  \"/html/head/text()\",\n  \"/html/body/text()\",\n  \"/html/body/ul/text()\",\n  \"/html/body/ol/text()\",\n  \"//comment()\",\n  \"//style\",\n  \"//xml\",\n  \"//script\",\n  \"//meta\",\n  \"//link\"\n];\nvar preprocessHTML = (_html, doc) => {\n  const bodyTextNodes = doc.evaluate(\n    \"/html/body/text()\",\n    doc,\n    null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  );\n  for (let i = bodyTextNodes.snapshotLength - 1; i >= 0; i--) {\n    const node = bodyTextNodes.snapshotItem(i), text = node.textContent || \"\";\n    if (text.replace(/[^\\S\\n]+$/g, \"\")) {\n      const newNode = doc.createElement(\"span\");\n      newNode.appendChild(doc.createTextNode(text)), node.parentNode?.replaceChild(newNode, node);\n    } else\n      node.parentNode?.removeChild(node);\n  }\n  const unwantedNodes = doc.evaluate(\n    unwantedWordDocumentPaths.join(\"|\"),\n    doc,\n    null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  );\n  for (let i = unwantedNodes.snapshotLength - 1; i >= 0; i--) {\n    const unwanted = unwantedNodes.snapshotItem(i);\n    unwanted && unwanted.parentNode?.removeChild(unwanted);\n  }\n  return doc;\n}, preprocessNotion = (html, doc) => {\n  const NOTION_REGEX = /<!-- notionvc:.*?-->/g;\n  if (html.match(NOTION_REGEX)) {\n    const childNodes = doc.evaluate(\n      \"//*\",\n      doc,\n      null,\n      _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n      null\n    );\n    for (let i = childNodes.snapshotLength - 1; i >= 0; i--)\n      childNodes.snapshotItem(i)?.setAttribute(\"data-is-notion\", \"true\");\n    return doc;\n  }\n  return doc;\n}, preprocessWhitespace = (_2, doc) => {\n  function processNode(node) {\n    if (node.nodeType === _XPathResult.BOOLEAN_TYPE && !PRESERVE_WHITESPACE_TAGS.includes(\n      node.parentElement?.tagName.toLowerCase() || \"\"\n    ))\n      node.textContent = node.textContent?.replace(/\\s\\s+/g, \" \").replace(/[\\r\\n]+/g, \" \") || \"\";\n    else\n      for (let i = 0; i < node.childNodes.length; i++)\n        processNode(node.childNodes[i]);\n  }\n  return processNode(doc.body), doc;\n};\nconst WORD_HTML_REGEX = /(class=\"?Mso|style=(?:\"|')[^\"]*?\\bmso-|w:WordDocument|<o:\\w+>|<\\/font>)/, unwantedPaths = [\n  \"//o:p\",\n  \"//span[@style='mso-list:Ignore']\",\n  \"//span[@style='mso-list: Ignore']\"\n], mappedPaths = [\n  \"//p[@class='MsoTocHeading']\",\n  \"//p[@class='MsoTitle']\",\n  \"//p[@class='MsoToaHeading']\",\n  \"//p[@class='MsoSubtitle']\",\n  \"//span[@class='MsoSubtleEmphasis']\",\n  \"//span[@class='MsoIntenseEmphasis']\"\n], elementMap = {\n  MsoTocHeading: [\"h3\"],\n  MsoTitle: [\"h1\"],\n  MsoToaHeading: [\"h2\"],\n  MsoSubtitle: [\"h5\"],\n  MsoSubtleEmphasis: [\"span\", \"em\"],\n  MsoIntenseEmphasis: [\"span\", \"em\", \"strong\"]\n  // Remove cruft\n};\nfunction isWordHtml(html) {\n  return WORD_HTML_REGEX.test(html);\n}\nvar preprocessWord = (html, doc) => {\n  if (!isWordHtml(html))\n    return doc;\n  const unwantedNodes = doc.evaluate(\n    unwantedPaths.join(\"|\"),\n    doc,\n    (prefix) => prefix === \"o\" ? \"urn:schemas-microsoft-com:office:office\" : null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  );\n  for (let i = unwantedNodes.snapshotLength - 1; i >= 0; i--) {\n    const unwanted = unwantedNodes.snapshotItem(i);\n    unwanted?.parentNode && unwanted.parentNode.removeChild(unwanted);\n  }\n  const mappedElements = doc.evaluate(\n    mappedPaths.join(\"|\"),\n    doc,\n    null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  );\n  for (let i = mappedElements.snapshotLength - 1; i >= 0; i--) {\n    const mappedElm = mappedElements.snapshotItem(i), tags = elementMap[mappedElm.className], text = doc.createTextNode(mappedElm.textContent || \"\");\n    if (!tags)\n      continue;\n    const parentElement = doc.createElement(tags[0]);\n    let parent = parentElement, child = parentElement;\n    tags.slice(1).forEach((tag) => {\n      child = doc.createElement(tag), parent.appendChild(child), parent = child;\n    }), child.appendChild(text), mappedElm?.parentNode?.replaceChild(parentElement, mappedElm);\n  }\n  return doc;\n}, preprocessors = [\n  preprocessWhitespace,\n  preprocessNotion,\n  preprocessWord,\n  preprocessGDocs,\n  preprocessHTML\n];\nfunction tagName(el) {\n  if (el && \"tagName\" in el)\n    return el.tagName.toLowerCase();\n}\nfunction preprocess(html, parseHtml, options) {\n  const cleanHTML = O(html), doc = parseHtml(normalizeHtmlBeforePreprocess(cleanHTML));\n  return preprocessors.forEach((processor) => {\n    processor(cleanHTML, doc, options);\n  }), doc;\n}\nfunction normalizeHtmlBeforePreprocess(html) {\n  return html.trim();\n}\nfunction defaultParseHtml() {\n  if (resolveJsType(DOMParser) === \"undefined\")\n    throw new Error(\n      \"The native `DOMParser` global which the `Html` deserializer uses by default is not present in this environment. You must supply the `options.parseHtml` function instead.\"\n    );\n  return (html) => new DOMParser().parseFromString(html, \"text/html\");\n}\nfunction nextSpan(block, index) {\n  const next = block.children[index + 1];\n  return next && next._type === \"span\" ? next : null;\n}\nfunction prevSpan(block, index) {\n  const prev = block.children[index - 1];\n  return prev && prev._type === \"span\" ? prev : null;\n}\nfunction isWhiteSpaceChar(text) {\n  return [\"\\xA0\", \" \"].includes(text);\n}\nfunction trimWhitespace(schema, blocks) {\n  return blocks.forEach((block) => {\n    (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_2__.isTextBlock)({ schema }, block) && block.children.forEach((child, index) => {\n      if (!isMinimalSpan(child))\n        return;\n      const nextChild = nextSpan(block, index), prevChild = prevSpan(block, index);\n      index === 0 && (child.text = child.text.replace(/^[^\\S\\n]+/g, \"\")), index === block.children.length - 1 && (child.text = child.text.replace(/[^\\S\\n]+$/g, \"\")), /\\s/.test(child.text.slice(Math.max(0, child.text.length - 1))) && nextChild && isMinimalSpan(nextChild) && /\\s/.test(nextChild.text.slice(0, 1)) && (child.text = child.text.replace(/[^\\S\\n]+$/g, \"\")), /\\s/.test(child.text.slice(0, 1)) && prevChild && isMinimalSpan(prevChild) && /\\s/.test(prevChild.text.slice(Math.max(0, prevChild.text.length - 1))) && (child.text = child.text.replace(/^[^\\S\\n]+/g, \"\")), child.text || block.children.splice(index, 1), prevChild && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_0__(prevChild.marks, child.marks) && isWhiteSpaceChar(child.text) ? (prevChild.text += \" \", block.children.splice(index, 1)) : nextChild && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_0__(nextChild.marks, child.marks) && isWhiteSpaceChar(child.text) && (nextChild.text = ` ${nextChild.text}`, block.children.splice(index, 1));\n    });\n  }), blocks;\n}\nfunction ensureRootIsBlocks(schema, objects) {\n  return objects.reduce((blocks, node, i, original) => {\n    if (node._type === \"block\")\n      return blocks.push(node), blocks;\n    if (node._type === \"__block\")\n      return blocks.push(node.block), blocks;\n    const lastBlock = blocks[blocks.length - 1];\n    if (i > 0 && !(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_2__.isTextBlock)({ schema }, original[i - 1]) && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_2__.isTextBlock)({ schema }, lastBlock))\n      return lastBlock.children.push(node), blocks;\n    const block = {\n      ...DEFAULT_BLOCK,\n      children: [node]\n    };\n    return blocks.push(block), blocks;\n  }, []);\n}\nfunction isNodeList(node) {\n  return Object.prototype.toString.call(node) === \"[object NodeList]\";\n}\nfunction isMinimalSpan(node) {\n  return node._type === \"span\";\n}\nfunction isMinimalBlock(node) {\n  return node._type === \"block\";\n}\nfunction isPlaceholderDecorator(node) {\n  return node._type === \"__decorator\";\n}\nfunction isPlaceholderAnnotation(node) {\n  return node._type === \"__annotation\";\n}\nfunction isElement(node) {\n  return node.nodeType === 1;\n}\nfunction normalizeWhitespace(rootNode) {\n  let emptyBlockCount = 0, lastParent = null;\n  const nodesToRemove = [];\n  for (let child = rootNode.firstChild; child; child = child.nextSibling) {\n    if (!isElement(child)) {\n      normalizeWhitespace(child), emptyBlockCount = 0;\n      continue;\n    }\n    const elm = child;\n    isWhitespaceBlock(elm) ? (lastParent && elm.parentElement === lastParent ? (emptyBlockCount++, emptyBlockCount > 1 && nodesToRemove.push(elm)) : emptyBlockCount = 1, lastParent = elm.parentElement) : (normalizeWhitespace(child), emptyBlockCount = 0);\n  }\n  nodesToRemove.forEach((node) => {\n    node.parentElement?.removeChild(node);\n  });\n}\nfunction removeAllWhitespace(rootNode) {\n  const nodesToRemove = [];\n  function collectNodesToRemove(currentNode) {\n    if (isElement(currentNode)) {\n      const elm = currentNode;\n      if (tagName(elm) === \"br\" && (tagName(elm.nextElementSibling) === \"p\" || tagName(elm.previousElementSibling) === \"p\")) {\n        nodesToRemove.push(elm);\n        return;\n      }\n      if ((tagName(elm) === \"p\" || tagName(elm) === \"br\") && elm?.firstChild?.textContent?.trim() === \"\") {\n        nodesToRemove.push(elm);\n        return;\n      }\n      for (let child = elm.firstChild; child; child = child.nextSibling)\n        collectNodesToRemove(child);\n    }\n  }\n  collectNodesToRemove(rootNode), nodesToRemove.forEach((node) => {\n    node.parentElement?.removeChild(node);\n  });\n}\nfunction isWhitespaceBlock(elm) {\n  return [\"p\", \"br\"].includes(tagName(elm) || \"\") && !elm.textContent?.trim();\n}\n\n//# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@portabletext/block-tools/lib/_chunks-es/helpers.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@portabletext/block-tools/lib/index.js":
/*!**************************************************************!*\
  !*** ../node_modules/@portabletext/block-tools/lib/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   htmlToBlocks: () => (/* binding */ htmlToBlocks),\n/* harmony export */   normalizeBlock: () => (/* binding */ normalizeBlock),\n/* harmony export */   randomKey: () => (/* binding */ randomKey)\n/* harmony export */ });\n/* harmony import */ var _portabletext_sanity_bridge__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @portabletext/sanity-bridge */ \"(ssr)/../node_modules/@portabletext/sanity-bridge/dist/index.js\");\n/* harmony import */ var _portabletext_schema__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @portabletext/schema */ \"(ssr)/../node_modules/@portabletext/schema/dist/index.js\");\n/* harmony import */ var lodash_flatten_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/flatten.js */ \"(ssr)/../node_modules/lodash/flatten.js\");\n/* harmony import */ var get_random_values_esm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! get-random-values-esm */ \"(ssr)/../node_modules/get-random-values-esm/index.mjs\");\n/* harmony import */ var _chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_chunks-es/helpers.js */ \"(ssr)/../node_modules/@portabletext/block-tools/lib/_chunks-es/helpers.js\");\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/../node_modules/lodash/isEqual.js\");\n\n\n\n\n\n\nfunction keyGenerator() {\n  return randomKey(12);\n}\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length);\n  return (0,get_random_values_esm__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(rnds8), rnds8;\n}\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i)\n  byteToHex[i] = (i + 256).toString(16).slice(1);\nfunction randomKey(length) {\n  return whatwgRNG(length).reduce((str, n) => str + byteToHex[n], \"\").slice(0, length);\n}\nconst LIST_CONTAINER_TAGS = Object.keys(_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.HTML_LIST_CONTAINER_TAGS);\nfunction isEmphasis$1(el) {\n  const style = (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(el) && el.getAttribute(\"style\");\n  return /font-style\\s*:\\s*italic/.test(style || \"\");\n}\nfunction isStrong$1(el) {\n  const style = (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(el) && el.getAttribute(\"style\");\n  return /font-weight\\s*:\\s*700/.test(style || \"\");\n}\nfunction isUnderline$1(el) {\n  if (!(0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(el) || (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el.parentNode) === \"a\")\n    return !1;\n  const style = (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(el) && el.getAttribute(\"style\");\n  return /text-decoration\\s*:\\s*underline/.test(style || \"\");\n}\nfunction isStrikethrough(el) {\n  const style = (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(el) && el.getAttribute(\"style\");\n  return /text-decoration\\s*:\\s*(?:.*line-through.*;)/.test(style || \"\");\n}\nfunction isGoogleDocs(el) {\n  return (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(el) && !!el.getAttribute(\"data-is-google-docs\");\n}\nfunction isRootNode(el) {\n  return (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(el) && !!el.getAttribute(\"data-is-root-node\");\n}\nfunction getListItemStyle$1(el) {\n  const parentTag = (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el.parentNode);\n  if (!(parentTag && !LIST_CONTAINER_TAGS.includes(parentTag)))\n    return (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el.parentNode) === \"ul\" ? \"bullet\" : \"number\";\n}\nfunction getListItemLevel$1(el) {\n  let level = 0;\n  if ((0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el) === \"li\") {\n    let parentNode = el.parentNode;\n    for (; parentNode; ) {\n      const parentTag = (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(parentNode);\n      parentTag && LIST_CONTAINER_TAGS.includes(parentTag) && level++, parentNode = parentNode.parentNode;\n    }\n  } else\n    level = 1;\n  return level;\n}\nconst blocks = {\n  ..._chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.HTML_BLOCK_TAGS,\n  ..._chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.HTML_HEADER_TAGS\n};\nfunction getBlockStyle(schema, el) {\n  const childTag = (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el.firstChild), block = childTag && blocks[childTag];\n  return block ? schema.styles.some((style) => style.name === block.style) ? block.style : _chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.BLOCK_DEFAULT_STYLE : _chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.BLOCK_DEFAULT_STYLE;\n}\nfunction createGDocsRules(schema) {\n  return [\n    {\n      deserialize(el, next) {\n        if ((0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(el) && (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el) === \"span\" && isGoogleDocs(el)) {\n          if (!el.textContent)\n            return !el.previousSibling && !el.nextSibling && el.setAttribute(\"data-lonely-child\", \"true\"), next(el.childNodes);\n          const span = {\n            ..._chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_SPAN,\n            marks: [],\n            text: el.textContent\n          };\n          return isStrong$1(el) && span.marks.push(\"strong\"), isUnderline$1(el) && span.marks.push(\"underline\"), isStrikethrough(el) && span.marks.push(\"strike-through\"), isEmphasis$1(el) && span.marks.push(\"em\"), span;\n        }\n      }\n    },\n    {\n      deserialize(el, next) {\n        if ((0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el) === \"li\" && isGoogleDocs(el))\n          return {\n            ..._chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_BLOCK,\n            listItem: getListItemStyle$1(el),\n            level: getListItemLevel$1(el),\n            style: getBlockStyle(schema, el),\n            children: next(el.firstChild?.childNodes || [])\n          };\n      }\n    },\n    {\n      deserialize(el) {\n        if ((0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el) === \"br\" && isGoogleDocs(el) && (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(el) && el.classList.contains(\"apple-interchange-newline\"))\n          return {\n            ..._chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_SPAN,\n            text: \"\"\n          };\n        if ((0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el) === \"br\" && isGoogleDocs(el) && (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(el) && el?.parentNode?.textContent === \"\")\n          return {\n            ..._chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_SPAN,\n            text: \"\"\n          };\n        if ((0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el) === \"br\" && isGoogleDocs(el) && (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(el) && isRootNode(el))\n          return {\n            ..._chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_SPAN,\n            text: \"\"\n          };\n      }\n    }\n  ];\n}\nconst whitespaceTextNodeRule = {\n  deserialize(node) {\n    return node.nodeName === \"#text\" && isWhitespaceTextNode(node) ? {\n      ..._chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_SPAN,\n      marks: [],\n      text: (node.textContent ?? \"\").replace(/\\s\\s+/g, \" \")\n    } : void 0;\n  }\n};\nfunction isWhitespaceTextNode(node) {\n  return (node.nodeType === 3 && (node.textContent || \"\").replace(/[\\r\\n]/g, \" \").replace(/\\s\\s+/g, \" \") === \" \" && node.nextSibling && node.nextSibling.nodeType !== 3 && node.previousSibling && node.previousSibling.nodeType !== 3 || node.textContent !== \" \") && (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(node.parentNode) !== \"body\";\n}\nfunction resolveListItem(schema, listNodeTagName) {\n  if (listNodeTagName === \"ul\" && schema.lists.some((list) => list.name === \"bullet\"))\n    return \"bullet\";\n  if (listNodeTagName === \"ol\" && schema.lists.some((list) => list.name === \"number\"))\n    return \"number\";\n}\nfunction createHTMLRules(schema, options) {\n  return [\n    whitespaceTextNodeRule,\n    {\n      // Pre element\n      deserialize(el) {\n        if ((0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el) !== \"pre\")\n          return;\n        const isCodeEnabled = schema.styles.some(\n          (style) => style.name === \"code\"\n        );\n        return {\n          _type: \"block\",\n          style: \"normal\",\n          markDefs: [],\n          children: [\n            {\n              ..._chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_SPAN,\n              marks: isCodeEnabled ? [\"code\"] : [],\n              text: el.textContent || \"\"\n            }\n          ]\n        };\n      }\n    },\n    // Blockquote element\n    {\n      deserialize(el, next) {\n        if ((0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el) !== \"blockquote\")\n          return;\n        const blocks2 = {\n          ..._chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.HTML_BLOCK_TAGS,\n          ..._chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.HTML_HEADER_TAGS\n        };\n        delete blocks2.blockquote;\n        const nonBlockquoteBlocks = Object.keys(blocks2), children = [];\n        return el.childNodes.forEach((node, index) => {\n          if (el.ownerDocument)\n            if (node.nodeType === 1 && nonBlockquoteBlocks.includes(\n              node.localName.toLowerCase()\n            )) {\n              const span = el.ownerDocument.createElement(\"span\"), previousChild = children[children.length - 1];\n              previousChild && previousChild.nodeType === 3 && previousChild.textContent?.trim() && span.appendChild(el.ownerDocument.createTextNode(\"\\r\")), node.childNodes.forEach((cn) => {\n                span.appendChild(cn.cloneNode(!0));\n              }), index !== el.childNodes.length && span.appendChild(el.ownerDocument.createTextNode(\"\\r\")), children.push(span);\n            } else\n              children.push(node);\n        }), {\n          _type: \"block\",\n          style: \"blockquote\",\n          markDefs: [],\n          children: next(children)\n        };\n      }\n    },\n    // Block elements\n    {\n      deserialize(el, next) {\n        const blocks2 = {\n          ..._chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.HTML_BLOCK_TAGS,\n          ..._chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.HTML_HEADER_TAGS\n        }, tag = (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el);\n        let block = tag ? blocks2[tag] : void 0;\n        if (!block)\n          return;\n        if (el.parentNode && (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el.parentNode) === \"li\")\n          return next(el.childNodes);\n        const blockStyle = block.style;\n        return schema.styles.some((style) => style.name === blockStyle) || (block = _chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_BLOCK), {\n          ...block,\n          children: next(el.childNodes)\n        };\n      }\n    },\n    // Ignore span tags\n    {\n      deserialize(el, next) {\n        const tag = (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el);\n        if (!(!tag || !(tag in _chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.HTML_SPAN_TAGS)))\n          return next(el.childNodes);\n      }\n    },\n    // Ignore div tags\n    {\n      deserialize(el, next) {\n        if ((0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el) === \"div\")\n          return next(el.childNodes);\n      }\n    },\n    // Ignore list containers\n    {\n      deserialize(el, next) {\n        const tag = (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el);\n        if (!(!tag || !(tag in _chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.HTML_LIST_CONTAINER_TAGS)))\n          return next(el.childNodes);\n      }\n    },\n    // Deal with br's\n    {\n      deserialize(el) {\n        if ((0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el) === \"br\")\n          return {\n            ..._chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_SPAN,\n            text: `\n`\n          };\n      }\n    },\n    // Deal with list items\n    {\n      deserialize(el, next, block) {\n        const tag = (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el), listItem = tag ? _chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.HTML_LIST_ITEM_TAGS[tag] : void 0, parentTag = (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el.parentNode) || \"\";\n        if (!listItem || !el.parentNode || !_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.HTML_LIST_CONTAINER_TAGS[parentTag])\n          return;\n        const enabledListItem = resolveListItem(schema, parentTag);\n        return enabledListItem ? (listItem.listItem = enabledListItem, {\n          ...listItem,\n          children: next(el.childNodes)\n        }) : block({ _type: \"block\", children: next(el.childNodes) });\n      }\n    },\n    // Deal with decorators - this is a limited set of known html elements that we know how to deserialize\n    {\n      deserialize(el, next) {\n        const decorator = _chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.HTML_DECORATOR_TAGS[(0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el) || \"\"];\n        if (!(!decorator || !schema.decorators.some(\n          (decoratorType) => decoratorType.name === decorator\n        )))\n          return {\n            _type: \"__decorator\",\n            name: decorator,\n            children: next(el.childNodes)\n          };\n      }\n    },\n    // Special case for hyperlinks, add annotation (if allowed by schema),\n    // If not supported just write out the link text and href in plain text.\n    {\n      deserialize(el, next) {\n        if ((0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el) !== \"a\")\n          return;\n        const linkEnabled = schema.annotations.some(\n          (annotation) => annotation.name === \"link\"\n        ), href = (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(el) && el.getAttribute(\"href\");\n        return href ? linkEnabled ? {\n          _type: \"__annotation\",\n          markDef: {\n            _key: options.keyGenerator ? options.keyGenerator() : keyGenerator(),\n            _type: \"link\",\n            href\n          },\n          children: next(el.childNodes)\n        } : el.appendChild(el.ownerDocument.createTextNode(` (${href})`)) && next(el.childNodes) : next(el.childNodes);\n      }\n    },\n    {\n      deserialize(el, next) {\n        if ((0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(el) && ((0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el) === \"td\" || (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el) === \"th\"))\n          return {\n            ..._chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_BLOCK,\n            children: next(el.childNodes)\n          };\n      }\n    },\n    {\n      deserialize(el) {\n        if ((0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(el) && (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el) === \"img\") {\n          const src = el.getAttribute(\"src\") ?? void 0, alt = el.getAttribute(\"alt\") ?? void 0, props = Object.fromEntries(\n            Array.from(el.attributes).map((attr) => [attr.name, attr.value])\n          ), ancestorOfLonelyChild = el?.parentElement?.parentElement?.getAttribute(\"data-lonely-child\"), ancestorOfListItem = el.closest(\"li\") !== null;\n          if (ancestorOfLonelyChild && !ancestorOfListItem) {\n            const image2 = options.matchers?.image?.({\n              context: {\n                schema,\n                keyGenerator: options.keyGenerator ?? keyGenerator\n              },\n              props: {\n                ...props,\n                ...src ? { src } : {},\n                ...alt ? { alt } : {}\n              }\n            });\n            if (image2)\n              return {\n                _type: \"__block\",\n                block: image2\n              };\n          }\n          const inlineImage = options.matchers?.inlineImage?.({\n            context: {\n              schema,\n              keyGenerator: options.keyGenerator ?? keyGenerator\n            },\n            props: {\n              ...props,\n              ...src ? { src } : {},\n              ...alt ? { alt } : {}\n            }\n          });\n          if (inlineImage)\n            return inlineImage;\n          const image = options.matchers?.image?.({\n            context: {\n              schema,\n              keyGenerator: options.keyGenerator ?? keyGenerator\n            },\n            props: {\n              ...props,\n              ...src ? { src } : {},\n              ...alt ? { alt } : {}\n            }\n          });\n          if (image)\n            return {\n              _type: \"__block\",\n              block: image\n            };\n        }\n      }\n    }\n  ];\n}\nfunction isEmphasis(el) {\n  const style = (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(el) && el.getAttribute(\"style\");\n  return /font-style:italic/.test(style || \"\");\n}\nfunction isStrong(el) {\n  const style = (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(el) && el.getAttribute(\"style\");\n  return /font-weight:700/.test(style || \"\") || /font-weight:600/.test(style || \"\");\n}\nfunction isUnderline(el) {\n  const style = (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(el) && el.getAttribute(\"style\");\n  return /text-decoration:underline/.test(style || \"\");\n}\nfunction isNotion(el) {\n  return (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(el) && !!el.getAttribute(\"data-is-notion\");\n}\nfunction createNotionRules() {\n  return [\n    {\n      deserialize(el) {\n        if ((0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(el) && (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el) === \"span\" && isNotion(el)) {\n          const span = {\n            ..._chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_SPAN,\n            marks: [],\n            text: el.textContent\n          };\n          return isStrong(el) && span.marks.push(\"strong\"), isUnderline(el) && span.marks.push(\"underline\"), isEmphasis(el) && span.marks.push(\"em\"), span;\n        }\n      }\n    }\n  ];\n}\nfunction getListItemStyle(el) {\n  const style = (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(el) && el.getAttribute(\"style\");\n  if (style && style.match(/lfo\\d+/))\n    return style.match(\"lfo1\") ? \"bullet\" : \"number\";\n}\nfunction getListItemLevel(el) {\n  const style = (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(el) && el.getAttribute(\"style\");\n  if (!style)\n    return;\n  const levelMatch = style.match(/level\\d+/);\n  if (!levelMatch)\n    return;\n  const [level] = levelMatch[0].match(/\\d/) || [];\n  return (level ? Number.parseInt(level, 10) : 1) || 1;\n}\nfunction isWordListElement(el) {\n  return (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isElement)(el) && el.className ? el.className === \"MsoListParagraphCxSpFirst\" || el.className === \"MsoListParagraphCxSpMiddle\" || el.className === \"MsoListParagraphCxSpLast\" : !1;\n}\nfunction createWordRules() {\n  return [\n    {\n      deserialize(el, next) {\n        if ((0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(el) === \"p\" && isWordListElement(el))\n          return {\n            ..._chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_BLOCK,\n            listItem: getListItemStyle(el),\n            level: getListItemLevel(el),\n            style: _chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.BLOCK_DEFAULT_STYLE,\n            children: next(el.childNodes)\n          };\n      }\n    }\n  ];\n}\nfunction createRules(schema, options) {\n  return [\n    ...createWordRules(),\n    ...createNotionRules(),\n    ...createGDocsRules(schema),\n    ...createHTMLRules(schema, options)\n  ];\n}\nclass HtmlDeserializer {\n  keyGenerator;\n  schema;\n  rules;\n  parseHtml;\n  _markDefs = [];\n  /**\n   * Create a new serializer respecting a Sanity block content type's schema\n   *\n   * @param blockContentType - Schema type for array containing _at least_ a block child type\n   * @param options - Options for the deserialization process\n   */\n  constructor(schema, options = {}) {\n    const { rules = [], unstable_whitespaceOnPasteMode = \"preserve\" } = options, standardRules = createRules(schema, {\n      keyGenerator: options.keyGenerator,\n      matchers: options.matchers\n    });\n    this.schema = schema, this.keyGenerator = options.keyGenerator ?? keyGenerator, this.rules = [...rules, ...standardRules];\n    const parseHtml = options.parseHtml || (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.defaultParseHtml)();\n    this.parseHtml = (html) => (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.preprocess)(html, parseHtml, { unstable_whitespaceOnPasteMode }).body;\n  }\n  /**\n   * Deserialize HTML.\n   *\n   * @param html - The HTML to deserialize, as a string\n   * @returns Array of blocks - either portable text blocks or other allowed blocks\n   */\n  deserialize = (html) => {\n    this._markDefs = [];\n    const { parseHtml } = this, fragment = parseHtml(html), children = Array.from(fragment.childNodes), blocks2 = (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.trimWhitespace)(\n      this.schema,\n      (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.flattenNestedBlocks)(\n        { schema: this.schema },\n        (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.ensureRootIsBlocks)(\n          this.schema,\n          this.deserializeElements(children)\n        )\n      )\n    );\n    return this._markDefs.length > 0 && blocks2.filter((block) => (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_4__.isTextBlock)({ schema: this.schema }, block)).forEach((block) => {\n      block.markDefs = block.markDefs || [], block.markDefs = block.markDefs.concat(\n        this._markDefs.filter((def) => lodash_flatten_js__WEBPACK_IMPORTED_MODULE_0__(\n          block.children.map((child) => child.marks || [])\n        ).includes(def._key))\n      );\n    }), blocks2.map((block) => (block._type === \"block\" && (block._type = this.schema.block.name), block));\n  };\n  /**\n   * Deserialize an array of DOM elements.\n   *\n   * @param elements - Array of DOM elements to deserialize\n   * @returns\n   */\n  deserializeElements = (elements = []) => {\n    let nodes = [];\n    return elements.forEach((element) => {\n      nodes = nodes.concat(this.deserializeElement(element));\n    }), nodes;\n  };\n  /**\n   * Deserialize a DOM element\n   *\n   * @param element - Deserialize a DOM element\n   * @returns\n   */\n  deserializeElement = (element) => {\n    const next = (elements) => {\n      if ((0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isNodeList)(elements))\n        return this.deserializeElements(Array.from(elements));\n      if (Array.isArray(elements))\n        return this.deserializeElements(elements);\n      if (elements)\n        return this.deserializeElement(elements);\n    }, block = (props) => ({\n      _type: \"__block\",\n      block: props\n    });\n    let node;\n    for (let i = 0; i < this.rules.length; i++) {\n      const rule = this.rules[i];\n      if (!rule.deserialize)\n        continue;\n      const ret = rule.deserialize(element, next, block), type = (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.resolveJsType)(ret);\n      if (type !== \"array\" && type !== \"object\" && type !== \"null\" && type !== \"undefined\")\n        throw new Error(\n          `A rule returned an invalid deserialized representation: \"${node}\".`\n        );\n      if (ret !== void 0) {\n        {\n          if (ret === null)\n            throw new Error(\"Deserializer rule returned `null`\");\n          Array.isArray(ret) ? node = ret : (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isPlaceholderDecorator)(ret) ? node = this.deserializeDecorator(ret) : (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isPlaceholderAnnotation)(ret) ? node = this.deserializeAnnotation(ret) : node = ret;\n        }\n        if (ret && !Array.isArray(ret) && (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isMinimalBlock)(ret) && \"listItem\" in ret) {\n          let parent = element.parentNode?.parentNode;\n          for (; parent && (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.tagName)(parent) === \"li\"; )\n            parent = parent.parentNode?.parentNode, ret.level = ret.level ? ret.level + 1 : 1;\n        }\n        ret && !Array.isArray(ret) && (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isMinimalBlock)(ret) && ret.style === \"blockquote\" && ret.children.forEach((child, index) => {\n          (0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isMinimalSpan)(child) && child.text === \"\\r\" && (child.text = `\n`, (index === 0 || index === ret.children.length - 1) && ret.children.splice(index, 1));\n        });\n        break;\n      }\n    }\n    return node || next(element.childNodes) || [];\n  };\n  /**\n   * Deserialize a `__decorator` type\n   * (an internal made up type to process decorators exclusively)\n   *\n   * @param decorator -\n   * @returns array of ...\n   */\n  deserializeDecorator = (decorator) => {\n    const { name } = decorator, applyDecorator = (node) => {\n      if ((0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isPlaceholderDecorator)(node))\n        return this.deserializeDecorator(node);\n      if ((0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isMinimalSpan)(node))\n        node.marks = node.marks || [], node.text.trim() && node.marks.unshift(name);\n      else if (\"children\" in node && Array.isArray(node.children)) {\n        const block = node;\n        block.children = block.children.map(applyDecorator);\n      }\n      return node;\n    };\n    return decorator.children.reduce((children, node) => {\n      const ret = applyDecorator(node);\n      return Array.isArray(ret) ? children.concat(ret) : (children.push(ret), children);\n    }, []);\n  };\n  /**\n   * Deserialize a `__annotation` object.\n   * (an internal made up type to process annotations exclusively)\n   *\n   * @param annotation -\n   * @returns Array of...\n   */\n  deserializeAnnotation = (annotation) => {\n    const { markDef } = annotation;\n    this._markDefs.push(markDef);\n    const applyAnnotation = (node) => {\n      if ((0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isPlaceholderAnnotation)(node))\n        return this.deserializeAnnotation(node);\n      if ((0,_chunks_es_helpers_js__WEBPACK_IMPORTED_MODULE_3__.isMinimalSpan)(node))\n        node.marks = node.marks || [], node.text.trim() && node.marks.unshift(markDef._key);\n      else if (\"children\" in node && Array.isArray(node.children)) {\n        const block = node;\n        block.children = block.children.map(applyAnnotation);\n      }\n      return node;\n    };\n    return annotation.children.reduce((children, node) => {\n      const ret = applyAnnotation(node);\n      return Array.isArray(ret) ? children.concat(ret) : (children.push(ret), children);\n    }, []);\n  };\n}\nfunction normalizeBlock(node, options = {}) {\n  const schema = {\n    block: {\n      name: options.blockTypeName || \"block\"\n    },\n    span: {\n      name: \"span\"\n    },\n    styles: [],\n    lists: [],\n    decorators: [],\n    annotations: [],\n    blockObjects: [],\n    inlineObjects: []\n  };\n  if (node._type !== (options.blockTypeName || \"block\"))\n    return \"_key\" in node ? node : {\n      ...node,\n      _key: options.keyGenerator ? options.keyGenerator() : keyGenerator()\n    };\n  const block = {\n    _key: options.keyGenerator ? options.keyGenerator() : keyGenerator(),\n    children: [],\n    markDefs: [],\n    ...node\n  }, lastChild = block.children[block.children.length - 1];\n  if (!lastChild)\n    return block.children = [\n      {\n        _type: \"span\",\n        _key: options.keyGenerator ? options.keyGenerator() : keyGenerator(),\n        text: \"\",\n        marks: []\n      }\n    ], block;\n  const usedMarkDefs = [], allowedDecorators = options.allowedDecorators && Array.isArray(options.allowedDecorators) ? options.allowedDecorators : !1;\n  return block.children = block.children.reduce(\n    (acc, child) => {\n      const previousChild = acc[acc.length - 1];\n      return previousChild && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_4__.isSpan)({ schema }, child) && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_4__.isSpan)({ schema }, previousChild) && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__(previousChild.marks, child.marks) ? (lastChild && lastChild === child && child.text === \"\" && block.children.length > 1 || (previousChild.text += child.text), acc) : (acc.push(child), acc);\n    },\n    []\n  ).map((child) => {\n    if (!child)\n      throw new Error(\"missing child\");\n    return child._key = options.keyGenerator ? options.keyGenerator() : keyGenerator(), (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_4__.isSpan)({ schema }, child) && (child.marks ? allowedDecorators && (child.marks = child.marks.filter((mark) => {\n      const isAllowed = allowedDecorators.includes(mark), isUsed = block.markDefs?.some((def) => def._key === mark);\n      return isAllowed || isUsed;\n    })) : child.marks = [], usedMarkDefs.push(...child.marks)), child;\n  }), block.markDefs = (block.markDefs || []).filter(\n    (markDef) => usedMarkDefs.includes(markDef._key)\n  ), block;\n}\nfunction htmlToBlocks(html, schemaType, options = {}) {\n  const schema = isSanitySchema(schemaType) ? (0,_portabletext_sanity_bridge__WEBPACK_IMPORTED_MODULE_5__.sanitySchemaToPortableTextSchema)(schemaType) : schemaType;\n  return new HtmlDeserializer(schema, options).deserialize(html).map((block) => normalizeBlock(block, { keyGenerator: options.keyGenerator }));\n}\nfunction isSanitySchema(schema) {\n  return schema.hasOwnProperty(\"jsonType\");\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@portabletext/block-tools/lib/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/selector.get-selection-text.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/@portabletext/editor/lib/_chunks-es/selector.get-selection-text.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFocusBlock: () => (/* binding */ getFocusBlock),\n/* harmony export */   getFocusChild: () => (/* binding */ getFocusChild),\n/* harmony export */   getFocusSpan: () => (/* binding */ getFocusSpan),\n/* harmony export */   getFocusTextBlock: () => (/* binding */ getFocusTextBlock),\n/* harmony export */   getPreviousInlineObject: () => (/* binding */ getPreviousInlineObject),\n/* harmony export */   getSelectedValue: () => (/* binding */ getSelectedValue),\n/* harmony export */   getSelectionStartPoint: () => (/* binding */ getSelectionStartPoint),\n/* harmony export */   getSelectionText: () => (/* binding */ getSelectionText),\n/* harmony export */   isSelectionCollapsed: () => (/* binding */ isSelectionCollapsed),\n/* harmony export */   isSelectionExpanded: () => (/* binding */ isSelectionExpanded)\n/* harmony export */ });\n/* harmony import */ var _portabletext_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @portabletext/schema */ \"(ssr)/../node_modules/@portabletext/schema/dist/index.js\");\n/* harmony import */ var _util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.get-text-block-text.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.get-text-block-text.js\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/../node_modules/@sanity/types/lib/index.mjs\");\n\n\n\nconst getFocusBlock = (snapshot) => {\n  if (!snapshot.context.selection)\n    return;\n  const key = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__.getBlockKeyFromSelectionPoint)(snapshot.context.selection.focus), index = key ? snapshot.blockIndexMap.get(key) : void 0, node = index !== void 0 ? snapshot.context.value.at(index) : void 0;\n  return node && key ? {\n    node,\n    path: [{\n      _key: key\n    }]\n  } : void 0;\n}, getFocusTextBlock = (snapshot) => {\n  const focusBlock = getFocusBlock(snapshot);\n  return focusBlock && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, focusBlock.node) ? {\n    node: focusBlock.node,\n    path: focusBlock.path\n  } : void 0;\n}, getFocusChild = (snapshot) => {\n  if (!snapshot.context.selection)\n    return;\n  const focusBlock = getFocusTextBlock(snapshot);\n  if (!focusBlock)\n    return;\n  const key = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__.getChildKeyFromSelectionPoint)(snapshot.context.selection.focus), node = key ? focusBlock.node.children.find((span) => span._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [...focusBlock.path, \"children\", {\n      _key: key\n    }]\n  } : void 0;\n}, getFocusSpan = (snapshot) => {\n  const focusChild = getFocusChild(snapshot);\n  return focusChild && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, focusChild.node) ? {\n    node: focusChild.node,\n    path: focusChild.path\n  } : void 0;\n}, getSelectionStartPoint = (snapshot) => {\n  if (snapshot.context.selection)\n    return snapshot.context.selection.backward ? snapshot.context.selection.focus : snapshot.context.selection.anchor;\n}, isSelectionCollapsed = (snapshot) => snapshot.context.selection ? JSON.stringify(snapshot.context.selection.anchor.path) === JSON.stringify(snapshot.context.selection.focus.path) && snapshot.context.selection?.anchor.offset === snapshot.context.selection?.focus.offset : !1, isSelectionExpanded = (snapshot) => !isSelectionCollapsed(snapshot), getSelectedValue = (snapshot) => {\n  const selection = snapshot.context.selection;\n  if (!selection)\n    return [];\n  const startPoint = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionStartPoint)(selection), endPoint = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionEndPoint)(selection), startBlockKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__.getBlockKeyFromSelectionPoint)(startPoint), endBlockKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__.getBlockKeyFromSelectionPoint)(endPoint);\n  if (!startBlockKey || !endBlockKey)\n    return [];\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey), endBlockIndex = snapshot.blockIndexMap.get(endBlockKey);\n  if (startBlockIndex === void 0 || endBlockIndex === void 0)\n    return [];\n  const startBlock = snapshot.context.value.at(startBlockIndex), slicedStartBlock = startBlock ? (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__.sliceBlocks)({\n    context: snapshot.context,\n    blocks: [startBlock]\n  }).at(0) : void 0;\n  if (startBlockIndex === endBlockIndex)\n    return slicedStartBlock ? [slicedStartBlock] : [];\n  const endBlock = snapshot.context.value.at(endBlockIndex), slicedEndBlock = endBlock ? (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__.sliceBlocks)({\n    context: snapshot.context,\n    blocks: [endBlock]\n  }).at(0) : void 0, middleBlocks = snapshot.context.value.slice(startBlockIndex + 1, endBlockIndex);\n  return [...slicedStartBlock ? [slicedStartBlock] : [], ...middleBlocks, ...slicedEndBlock ? [slicedEndBlock] : []];\n}, getPreviousInlineObject = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot), selectionStartPoint = getSelectionStartPoint(snapshot), selectionStartPointChildKey = selectionStartPoint && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_2__.isKeySegment)(selectionStartPoint.path[2]) ? selectionStartPoint.path[2]._key : void 0;\n  if (!focusTextBlock || !selectionStartPointChildKey)\n    return;\n  let inlineObject;\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionStartPointChildKey)\n      break;\n    (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child) || (inlineObject = {\n      node: child,\n      path: [...focusTextBlock.path, \"children\", {\n        _key: child._key\n      }]\n    });\n  }\n  return inlineObject;\n}, getSelectionText = (snapshot) => getSelectedValue(snapshot).reduce((text, block) => (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, block) ? text + block.children.reduce((text2, child) => (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child) ? text2 + child.text : text2, \"\") : text, \"\");\n\n//# sourceMappingURL=selector.get-selection-text.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0Bwb3J0YWJsZXRleHQvZWRpdG9yL2xpYi9fY2h1bmtzLWVzL3NlbGVjdG9yLmdldC1zZWxlY3Rpb24tdGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQTJEO0FBQ3lJO0FBQ3ZKO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLGNBQWMsMkZBQTZCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSixDQUFDO0FBQ0Q7QUFDQSx1QkFBdUIsaUVBQVc7QUFDbEM7QUFDQTtBQUNBLElBQUk7QUFDSixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsMkZBQTZCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSixDQUFDO0FBQ0Q7QUFDQSx1QkFBdUIsNERBQU07QUFDN0I7QUFDQTtBQUNBLElBQUk7QUFDSixDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsb0ZBQXdCLHdCQUF3QixrRkFBb0IsNkJBQTZCLDJGQUE2Qiw0QkFBNEIsMkZBQTZCO0FBQzVNO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpR0FBaUcseUVBQVc7QUFDNUc7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EseUZBQXlGLHlFQUFXO0FBQ3BHO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDO0FBQ0QsbUtBQW1LLDJEQUFZO0FBQy9LO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksNERBQU07QUFDVjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQSxDQUFDLHNGQUFzRixpRUFBVywyRUFBMkUsNERBQU07QUFZakw7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL0dhbG9jay9DUy9iZWhvbWUtc2l0ZS9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvc2VsZWN0b3IuZ2V0LXNlbGVjdGlvbi10ZXh0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzVGV4dEJsb2NrLCBpc1NwYW4gfSBmcm9tIFwiQHBvcnRhYmxldGV4dC9zY2hlbWFcIjtcbmltcG9ydCB7IGdldEJsb2NrS2V5RnJvbVNlbGVjdGlvblBvaW50LCBnZXRDaGlsZEtleUZyb21TZWxlY3Rpb25Qb2ludCwgZ2V0U2VsZWN0aW9uU3RhcnRQb2ludCBhcyBnZXRTZWxlY3Rpb25TdGFydFBvaW50JDEsIGdldFNlbGVjdGlvbkVuZFBvaW50LCBzbGljZUJsb2NrcyB9IGZyb20gXCIuL3V0aWwuZ2V0LXRleHQtYmxvY2stdGV4dC5qc1wiO1xuaW1wb3J0IHsgaXNLZXlTZWdtZW50IH0gZnJvbSBcIkBzYW5pdHkvdHlwZXNcIjtcbmNvbnN0IGdldEZvY3VzQmxvY2sgPSAoc25hcHNob3QpID0+IHtcbiAgaWYgKCFzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbilcbiAgICByZXR1cm47XG4gIGNvbnN0IGtleSA9IGdldEJsb2NrS2V5RnJvbVNlbGVjdGlvblBvaW50KHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uLmZvY3VzKSwgaW5kZXggPSBrZXkgPyBzbmFwc2hvdC5ibG9ja0luZGV4TWFwLmdldChrZXkpIDogdm9pZCAwLCBub2RlID0gaW5kZXggIT09IHZvaWQgMCA/IHNuYXBzaG90LmNvbnRleHQudmFsdWUuYXQoaW5kZXgpIDogdm9pZCAwO1xuICByZXR1cm4gbm9kZSAmJiBrZXkgPyB7XG4gICAgbm9kZSxcbiAgICBwYXRoOiBbe1xuICAgICAgX2tleToga2V5XG4gICAgfV1cbiAgfSA6IHZvaWQgMDtcbn0sIGdldEZvY3VzVGV4dEJsb2NrID0gKHNuYXBzaG90KSA9PiB7XG4gIGNvbnN0IGZvY3VzQmxvY2sgPSBnZXRGb2N1c0Jsb2NrKHNuYXBzaG90KTtcbiAgcmV0dXJuIGZvY3VzQmxvY2sgJiYgaXNUZXh0QmxvY2soc25hcHNob3QuY29udGV4dCwgZm9jdXNCbG9jay5ub2RlKSA/IHtcbiAgICBub2RlOiBmb2N1c0Jsb2NrLm5vZGUsXG4gICAgcGF0aDogZm9jdXNCbG9jay5wYXRoXG4gIH0gOiB2b2lkIDA7XG59LCBnZXRGb2N1c0NoaWxkID0gKHNuYXBzaG90KSA9PiB7XG4gIGlmICghc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24pXG4gICAgcmV0dXJuO1xuICBjb25zdCBmb2N1c0Jsb2NrID0gZ2V0Rm9jdXNUZXh0QmxvY2soc25hcHNob3QpO1xuICBpZiAoIWZvY3VzQmxvY2spXG4gICAgcmV0dXJuO1xuICBjb25zdCBrZXkgPSBnZXRDaGlsZEtleUZyb21TZWxlY3Rpb25Qb2ludChzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbi5mb2N1cyksIG5vZGUgPSBrZXkgPyBmb2N1c0Jsb2NrLm5vZGUuY2hpbGRyZW4uZmluZCgoc3BhbikgPT4gc3Bhbi5fa2V5ID09PSBrZXkpIDogdm9pZCAwO1xuICByZXR1cm4gbm9kZSAmJiBrZXkgPyB7XG4gICAgbm9kZSxcbiAgICBwYXRoOiBbLi4uZm9jdXNCbG9jay5wYXRoLCBcImNoaWxkcmVuXCIsIHtcbiAgICAgIF9rZXk6IGtleVxuICAgIH1dXG4gIH0gOiB2b2lkIDA7XG59LCBnZXRGb2N1c1NwYW4gPSAoc25hcHNob3QpID0+IHtcbiAgY29uc3QgZm9jdXNDaGlsZCA9IGdldEZvY3VzQ2hpbGQoc25hcHNob3QpO1xuICByZXR1cm4gZm9jdXNDaGlsZCAmJiBpc1NwYW4oc25hcHNob3QuY29udGV4dCwgZm9jdXNDaGlsZC5ub2RlKSA/IHtcbiAgICBub2RlOiBmb2N1c0NoaWxkLm5vZGUsXG4gICAgcGF0aDogZm9jdXNDaGlsZC5wYXRoXG4gIH0gOiB2b2lkIDA7XG59LCBnZXRTZWxlY3Rpb25TdGFydFBvaW50ID0gKHNuYXBzaG90KSA9PiB7XG4gIGlmIChzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbilcbiAgICByZXR1cm4gc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24uYmFja3dhcmQgPyBzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbi5mb2N1cyA6IHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uLmFuY2hvcjtcbn0sIGlzU2VsZWN0aW9uQ29sbGFwc2VkID0gKHNuYXBzaG90KSA9PiBzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbiA/IEpTT04uc3RyaW5naWZ5KHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uLmFuY2hvci5wYXRoKSA9PT0gSlNPTi5zdHJpbmdpZnkoc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24uZm9jdXMucGF0aCkgJiYgc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24/LmFuY2hvci5vZmZzZXQgPT09IHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uPy5mb2N1cy5vZmZzZXQgOiAhMSwgaXNTZWxlY3Rpb25FeHBhbmRlZCA9IChzbmFwc2hvdCkgPT4gIWlzU2VsZWN0aW9uQ29sbGFwc2VkKHNuYXBzaG90KSwgZ2V0U2VsZWN0ZWRWYWx1ZSA9IChzbmFwc2hvdCkgPT4ge1xuICBjb25zdCBzZWxlY3Rpb24gPSBzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbjtcbiAgaWYgKCFzZWxlY3Rpb24pXG4gICAgcmV0dXJuIFtdO1xuICBjb25zdCBzdGFydFBvaW50ID0gZ2V0U2VsZWN0aW9uU3RhcnRQb2ludCQxKHNlbGVjdGlvbiksIGVuZFBvaW50ID0gZ2V0U2VsZWN0aW9uRW5kUG9pbnQoc2VsZWN0aW9uKSwgc3RhcnRCbG9ja0tleSA9IGdldEJsb2NrS2V5RnJvbVNlbGVjdGlvblBvaW50KHN0YXJ0UG9pbnQpLCBlbmRCbG9ja0tleSA9IGdldEJsb2NrS2V5RnJvbVNlbGVjdGlvblBvaW50KGVuZFBvaW50KTtcbiAgaWYgKCFzdGFydEJsb2NrS2V5IHx8ICFlbmRCbG9ja0tleSlcbiAgICByZXR1cm4gW107XG4gIGNvbnN0IHN0YXJ0QmxvY2tJbmRleCA9IHNuYXBzaG90LmJsb2NrSW5kZXhNYXAuZ2V0KHN0YXJ0QmxvY2tLZXkpLCBlbmRCbG9ja0luZGV4ID0gc25hcHNob3QuYmxvY2tJbmRleE1hcC5nZXQoZW5kQmxvY2tLZXkpO1xuICBpZiAoc3RhcnRCbG9ja0luZGV4ID09PSB2b2lkIDAgfHwgZW5kQmxvY2tJbmRleCA9PT0gdm9pZCAwKVxuICAgIHJldHVybiBbXTtcbiAgY29uc3Qgc3RhcnRCbG9jayA9IHNuYXBzaG90LmNvbnRleHQudmFsdWUuYXQoc3RhcnRCbG9ja0luZGV4KSwgc2xpY2VkU3RhcnRCbG9jayA9IHN0YXJ0QmxvY2sgPyBzbGljZUJsb2Nrcyh7XG4gICAgY29udGV4dDogc25hcHNob3QuY29udGV4dCxcbiAgICBibG9ja3M6IFtzdGFydEJsb2NrXVxuICB9KS5hdCgwKSA6IHZvaWQgMDtcbiAgaWYgKHN0YXJ0QmxvY2tJbmRleCA9PT0gZW5kQmxvY2tJbmRleClcbiAgICByZXR1cm4gc2xpY2VkU3RhcnRCbG9jayA/IFtzbGljZWRTdGFydEJsb2NrXSA6IFtdO1xuICBjb25zdCBlbmRCbG9jayA9IHNuYXBzaG90LmNvbnRleHQudmFsdWUuYXQoZW5kQmxvY2tJbmRleCksIHNsaWNlZEVuZEJsb2NrID0gZW5kQmxvY2sgPyBzbGljZUJsb2Nrcyh7XG4gICAgY29udGV4dDogc25hcHNob3QuY29udGV4dCxcbiAgICBibG9ja3M6IFtlbmRCbG9ja11cbiAgfSkuYXQoMCkgOiB2b2lkIDAsIG1pZGRsZUJsb2NrcyA9IHNuYXBzaG90LmNvbnRleHQudmFsdWUuc2xpY2Uoc3RhcnRCbG9ja0luZGV4ICsgMSwgZW5kQmxvY2tJbmRleCk7XG4gIHJldHVybiBbLi4uc2xpY2VkU3RhcnRCbG9jayA/IFtzbGljZWRTdGFydEJsb2NrXSA6IFtdLCAuLi5taWRkbGVCbG9ja3MsIC4uLnNsaWNlZEVuZEJsb2NrID8gW3NsaWNlZEVuZEJsb2NrXSA6IFtdXTtcbn0sIGdldFByZXZpb3VzSW5saW5lT2JqZWN0ID0gKHNuYXBzaG90KSA9PiB7XG4gIGNvbnN0IGZvY3VzVGV4dEJsb2NrID0gZ2V0Rm9jdXNUZXh0QmxvY2soc25hcHNob3QpLCBzZWxlY3Rpb25TdGFydFBvaW50ID0gZ2V0U2VsZWN0aW9uU3RhcnRQb2ludChzbmFwc2hvdCksIHNlbGVjdGlvblN0YXJ0UG9pbnRDaGlsZEtleSA9IHNlbGVjdGlvblN0YXJ0UG9pbnQgJiYgaXNLZXlTZWdtZW50KHNlbGVjdGlvblN0YXJ0UG9pbnQucGF0aFsyXSkgPyBzZWxlY3Rpb25TdGFydFBvaW50LnBhdGhbMl0uX2tleSA6IHZvaWQgMDtcbiAgaWYgKCFmb2N1c1RleHRCbG9jayB8fCAhc2VsZWN0aW9uU3RhcnRQb2ludENoaWxkS2V5KVxuICAgIHJldHVybjtcbiAgbGV0IGlubGluZU9iamVjdDtcbiAgZm9yIChjb25zdCBjaGlsZCBvZiBmb2N1c1RleHRCbG9jay5ub2RlLmNoaWxkcmVuKSB7XG4gICAgaWYgKGNoaWxkLl9rZXkgPT09IHNlbGVjdGlvblN0YXJ0UG9pbnRDaGlsZEtleSlcbiAgICAgIGJyZWFrO1xuICAgIGlzU3BhbihzbmFwc2hvdC5jb250ZXh0LCBjaGlsZCkgfHwgKGlubGluZU9iamVjdCA9IHtcbiAgICAgIG5vZGU6IGNoaWxkLFxuICAgICAgcGF0aDogWy4uLmZvY3VzVGV4dEJsb2NrLnBhdGgsIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICBfa2V5OiBjaGlsZC5fa2V5XG4gICAgICB9XVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBpbmxpbmVPYmplY3Q7XG59LCBnZXRTZWxlY3Rpb25UZXh0ID0gKHNuYXBzaG90KSA9PiBnZXRTZWxlY3RlZFZhbHVlKHNuYXBzaG90KS5yZWR1Y2UoKHRleHQsIGJsb2NrKSA9PiBpc1RleHRCbG9jayhzbmFwc2hvdC5jb250ZXh0LCBibG9jaykgPyB0ZXh0ICsgYmxvY2suY2hpbGRyZW4ucmVkdWNlKCh0ZXh0MiwgY2hpbGQpID0+IGlzU3BhbihzbmFwc2hvdC5jb250ZXh0LCBjaGlsZCkgPyB0ZXh0MiArIGNoaWxkLnRleHQgOiB0ZXh0MiwgXCJcIikgOiB0ZXh0LCBcIlwiKTtcbmV4cG9ydCB7XG4gIGdldEZvY3VzQmxvY2ssXG4gIGdldEZvY3VzQ2hpbGQsXG4gIGdldEZvY3VzU3BhbixcbiAgZ2V0Rm9jdXNUZXh0QmxvY2ssXG4gIGdldFByZXZpb3VzSW5saW5lT2JqZWN0LFxuICBnZXRTZWxlY3RlZFZhbHVlLFxuICBnZXRTZWxlY3Rpb25TdGFydFBvaW50LFxuICBnZXRTZWxlY3Rpb25UZXh0LFxuICBpc1NlbGVjdGlvbkNvbGxhcHNlZCxcbiAgaXNTZWxlY3Rpb25FeHBhbmRlZFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlbGVjdG9yLmdldC1zZWxlY3Rpb24tdGV4dC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/selector.get-selection-text.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBlockTextBefore: () => (/* binding */ getBlockTextBefore)\n/* harmony export */ });\n/* harmony import */ var _util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.get-text-block-text.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.get-text-block-text.js\");\n/* harmony import */ var _selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selector.get-selection-text.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/selector.get-selection-text.js\");\n\n\nconst getBlockTextBefore = (snapshot) => {\n  if (!snapshot.context.selection)\n    return \"\";\n  const startPoint = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionStartPoint)(snapshot.context.selection), block = (0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_1__.getFocusBlock)({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: startPoint,\n        focus: startPoint\n      }\n    }\n  });\n  if (!block)\n    return \"\";\n  const startOfBlock = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__.getBlockStartPoint)({\n    context: snapshot.context,\n    block\n  });\n  return (0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionText)({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: startOfBlock,\n        focus: startPoint\n      }\n    }\n  });\n};\n\n//# sourceMappingURL=selector.get-text-before.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0Bwb3J0YWJsZXRleHQvZWRpdG9yL2xpYi9fY2h1bmtzLWVzL3NlbGVjdG9yLmdldC10ZXh0LWJlZm9yZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMkY7QUFDUjtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsb0ZBQXNCLHNDQUFzQyw4RUFBYTtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSx1QkFBdUIsZ0ZBQWtCO0FBQ3pDO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsU0FBUyxpRkFBZ0I7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9HYWxvY2svQ1MvYmVob21lLXNpdGUvbm9kZV9tb2R1bGVzL0Bwb3J0YWJsZXRleHQvZWRpdG9yL2xpYi9fY2h1bmtzLWVzL3NlbGVjdG9yLmdldC10ZXh0LWJlZm9yZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRTZWxlY3Rpb25TdGFydFBvaW50LCBnZXRCbG9ja1N0YXJ0UG9pbnQgfSBmcm9tIFwiLi91dGlsLmdldC10ZXh0LWJsb2NrLXRleHQuanNcIjtcbmltcG9ydCB7IGdldEZvY3VzQmxvY2ssIGdldFNlbGVjdGlvblRleHQgfSBmcm9tIFwiLi9zZWxlY3Rvci5nZXQtc2VsZWN0aW9uLXRleHQuanNcIjtcbmNvbnN0IGdldEJsb2NrVGV4dEJlZm9yZSA9IChzbmFwc2hvdCkgPT4ge1xuICBpZiAoIXNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uKVxuICAgIHJldHVybiBcIlwiO1xuICBjb25zdCBzdGFydFBvaW50ID0gZ2V0U2VsZWN0aW9uU3RhcnRQb2ludChzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbiksIGJsb2NrID0gZ2V0Rm9jdXNCbG9jayh7XG4gICAgLi4uc25hcHNob3QsXG4gICAgY29udGV4dDoge1xuICAgICAgLi4uc25hcHNob3QuY29udGV4dCxcbiAgICAgIHNlbGVjdGlvbjoge1xuICAgICAgICBhbmNob3I6IHN0YXJ0UG9pbnQsXG4gICAgICAgIGZvY3VzOiBzdGFydFBvaW50XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgaWYgKCFibG9jaylcbiAgICByZXR1cm4gXCJcIjtcbiAgY29uc3Qgc3RhcnRPZkJsb2NrID0gZ2V0QmxvY2tTdGFydFBvaW50KHtcbiAgICBjb250ZXh0OiBzbmFwc2hvdC5jb250ZXh0LFxuICAgIGJsb2NrXG4gIH0pO1xuICByZXR1cm4gZ2V0U2VsZWN0aW9uVGV4dCh7XG4gICAgLi4uc25hcHNob3QsXG4gICAgY29udGV4dDoge1xuICAgICAgLi4uc25hcHNob3QuY29udGV4dCxcbiAgICAgIHNlbGVjdGlvbjoge1xuICAgICAgICBhbmNob3I6IHN0YXJ0T2ZCbG9jayxcbiAgICAgICAgZm9jdXM6IHN0YXJ0UG9pbnRcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcbmV4cG9ydCB7XG4gIGdldEJsb2NrVGV4dEJlZm9yZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlbGVjdG9yLmdldC10ZXh0LWJlZm9yZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/selector.is-active-style.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@portabletext/editor/lib/_chunks-es/selector.is-active-style.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getActiveAnnotations: () => (/* binding */ getActiveAnnotations),\n/* harmony export */   getActiveAnnotationsMarks: () => (/* binding */ getActiveAnnotationsMarks),\n/* harmony export */   getActiveDecorators: () => (/* binding */ getActiveDecorators),\n/* harmony export */   getActiveListItem: () => (/* binding */ getActiveListItem),\n/* harmony export */   getActiveStyle: () => (/* binding */ getActiveStyle),\n/* harmony export */   getCaretWordSelection: () => (/* binding */ getCaretWordSelection),\n/* harmony export */   getFirstBlock: () => (/* binding */ getFirstBlock),\n/* harmony export */   getFocusBlockObject: () => (/* binding */ getFocusBlockObject),\n/* harmony export */   getFocusInlineObject: () => (/* binding */ getFocusInlineObject),\n/* harmony export */   getFocusListBlock: () => (/* binding */ getFocusListBlock),\n/* harmony export */   getLastBlock: () => (/* binding */ getLastBlock),\n/* harmony export */   getMarkState: () => (/* binding */ getMarkState),\n/* harmony export */   getNextBlock: () => (/* binding */ getNextBlock),\n/* harmony export */   getNextInlineObject: () => (/* binding */ getNextInlineObject),\n/* harmony export */   getPreviousBlock: () => (/* binding */ getPreviousBlock),\n/* harmony export */   getSelectedBlocks: () => (/* binding */ getSelectedBlocks),\n/* harmony export */   getSelectedSpans: () => (/* binding */ getSelectedSpans),\n/* harmony export */   getSelectedTextBlocks: () => (/* binding */ getSelectedTextBlocks),\n/* harmony export */   getSelectionEndBlock: () => (/* binding */ getSelectionEndBlock),\n/* harmony export */   getSelectionEndPoint: () => (/* binding */ getSelectionEndPoint),\n/* harmony export */   getSelectionStartBlock: () => (/* binding */ getSelectionStartBlock),\n/* harmony export */   getTrimmedSelection: () => (/* binding */ getTrimmedSelection),\n/* harmony export */   isActiveAnnotation: () => (/* binding */ isActiveAnnotation),\n/* harmony export */   isActiveDecorator: () => (/* binding */ isActiveDecorator),\n/* harmony export */   isActiveListItem: () => (/* binding */ isActiveListItem),\n/* harmony export */   isActiveStyle: () => (/* binding */ isActiveStyle),\n/* harmony export */   isAtTheEndOfBlock: () => (/* binding */ isAtTheEndOfBlock),\n/* harmony export */   isAtTheStartOfBlock: () => (/* binding */ isAtTheStartOfBlock),\n/* harmony export */   isOverlappingSelection: () => (/* binding */ isOverlappingSelection),\n/* harmony export */   isPointAfterSelection: () => (/* binding */ isPointAfterSelection),\n/* harmony export */   isPointBeforeSelection: () => (/* binding */ isPointBeforeSelection),\n/* harmony export */   isSelectingEntireBlocks: () => (/* binding */ isSelectingEntireBlocks)\n/* harmony export */ });\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/../node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var _selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./selector.get-selection-text.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/selector.get-selection-text.js\");\n/* harmony import */ var _util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util.is-empty-text-block.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js\");\n/* harmony import */ var _portabletext_schema__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @portabletext/schema */ \"(ssr)/../node_modules/@portabletext/schema/dist/index.js\");\n/* harmony import */ var _util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.get-text-block-text.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.get-text-block-text.js\");\n\n\n\n\n\nconst getFocusInlineObject = (snapshot) => {\n  const focusChild = (0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.getFocusChild)(snapshot);\n  return focusChild && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_1__.isPortableTextSpan)(focusChild.node) ? {\n    node: focusChild.node,\n    path: focusChild.path\n  } : void 0;\n}, getSelectedBlocks = (snapshot) => {\n  if (!snapshot.context.selection)\n    return [];\n  const selectedBlocks = [], startPoint = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionStartPoint)(snapshot.context.selection), endPoint = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionEndPoint)(snapshot.context.selection), startKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getBlockKeyFromSelectionPoint)(startPoint), endKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getBlockKeyFromSelectionPoint)(endPoint);\n  if (!startKey || !endKey)\n    return selectedBlocks;\n  const startBlockIndex = snapshot.blockIndexMap.get(startKey), endBlockIndex = snapshot.blockIndexMap.get(endKey);\n  if (startBlockIndex === void 0 || endBlockIndex === void 0)\n    return selectedBlocks;\n  const slicedValue = snapshot.context.value.slice(startBlockIndex, endBlockIndex + 1);\n  for (const block of slicedValue) {\n    if (block._key === startKey) {\n      if (selectedBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      }), startKey === endKey)\n        break;\n      continue;\n    }\n    if (block._key === endKey) {\n      selectedBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      });\n      break;\n    }\n    selectedBlocks.length > 0 && selectedBlocks.push({\n      node: block,\n      path: [{\n        _key: block._key\n      }]\n    });\n  }\n  return selectedBlocks;\n}, getSelectionEndBlock = (snapshot) => {\n  const endPoint = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionEndPoint)(snapshot.context.selection);\n  if (endPoint)\n    return (0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.getFocusBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: endPoint,\n          focus: endPoint\n        }\n      }\n    });\n}, getSelectionStartBlock = (snapshot) => {\n  const startPoint = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionStartPoint)(snapshot.context.selection);\n  if (startPoint)\n    return (0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.getFocusBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: startPoint,\n          focus: startPoint\n        }\n      }\n    });\n}, getSelectionEndPoint = (snapshot) => {\n  if (snapshot.context.selection)\n    return snapshot.context.selection.backward ? snapshot.context.selection.anchor : snapshot.context.selection.focus;\n};\nfunction isPointAfterSelection(point) {\n  return (snapshot) => {\n    if (!snapshot.context.selection)\n      return !1;\n    const endPoint = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionEndPoint)(snapshot.context.selection), endBlockKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getBlockKeyFromSelectionPoint)(endPoint), endChildKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getChildKeyFromSelectionPoint)(endPoint), pointBlockKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getBlockKeyFromSelectionPoint)(point), pointChildKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getChildKeyFromSelectionPoint)(point);\n    if (!pointBlockKey || !endBlockKey)\n      return !1;\n    const pointBlockIndex = snapshot.blockIndexMap.get(pointBlockKey), endBlockIndex = snapshot.blockIndexMap.get(endBlockKey);\n    if (pointBlockIndex === void 0 || endBlockIndex === void 0)\n      return !1;\n    if (pointBlockIndex > endBlockIndex)\n      return !0;\n    if (pointBlockIndex < endBlockIndex)\n      return !1;\n    const pointBlock = snapshot.context.value.at(pointBlockIndex);\n    if (!pointBlock || !(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isTextBlock)(snapshot.context, pointBlock))\n      return !1;\n    let pointChildIndex, endChildIndex, childIndex = -1;\n    for (const child of pointBlock.children) {\n      if (childIndex++, child._key === pointChildKey && child._key === endChildKey)\n        return point.offset > endPoint.offset;\n      if (child._key === pointChildKey && (pointChildIndex = childIndex), child._key === endChildKey && (endChildIndex = childIndex), pointChildIndex !== void 0 && endChildIndex !== void 0)\n        break;\n    }\n    return pointChildIndex === void 0 || endChildIndex === void 0 ? !1 : pointChildIndex > endChildIndex;\n  };\n}\nfunction isPointBeforeSelection(point) {\n  return (snapshot) => {\n    if (!snapshot.context.selection)\n      return !1;\n    const startPoint = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionStartPoint)(snapshot.context.selection), startBlockKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getBlockKeyFromSelectionPoint)(startPoint), startChildKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getChildKeyFromSelectionPoint)(startPoint), pointBlockKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getBlockKeyFromSelectionPoint)(point), pointChildKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getChildKeyFromSelectionPoint)(point);\n    if (!pointBlockKey || !startBlockKey)\n      return !1;\n    const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey), pointBlockIndex = snapshot.blockIndexMap.get(pointBlockKey);\n    if (startBlockIndex === void 0 || pointBlockIndex === void 0)\n      return !1;\n    if (pointBlockIndex < startBlockIndex)\n      return !0;\n    if (pointBlockIndex > startBlockIndex)\n      return !1;\n    const pointBlock = snapshot.context.value.at(pointBlockIndex);\n    if (!pointBlock || !(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isTextBlock)(snapshot.context, pointBlock))\n      return !1;\n    let pointChildIndex, startChildIndex, childIndex = -1;\n    for (const child of pointBlock.children) {\n      if (childIndex++, child._key === pointChildKey && child._key === startChildKey)\n        return point.offset < startPoint.offset;\n      if (child._key === pointChildKey && (pointChildIndex = childIndex), child._key === startChildKey && (startChildIndex = childIndex), pointChildIndex !== void 0 && startChildIndex !== void 0)\n        break;\n    }\n    return pointChildIndex === void 0 || startChildIndex === void 0 ? !1 : pointChildIndex < startChildIndex;\n  };\n}\nfunction isOverlappingSelection(selection) {\n  return (snapshot) => {\n    if (!selection || !snapshot.context.selection)\n      return !1;\n    const selectionStartPoint = (0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionStartPoint)({\n      context: {\n        ...snapshot.context,\n        selection\n      }\n    }), selectionEndPoint = getSelectionEndPoint({\n      context: {\n        ...snapshot.context,\n        selection\n      }\n    }), originalSelectionStartPoint = (0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionStartPoint)(snapshot), originalSelectionEndPoint = getSelectionEndPoint(snapshot);\n    if (!selectionStartPoint || !selectionEndPoint || !originalSelectionStartPoint || !originalSelectionEndPoint)\n      return !1;\n    const startPointEqualToOriginalStartPoint = (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_4__.isEqualSelectionPoints)(selectionStartPoint, originalSelectionStartPoint), endPointEqualToOriginalEndPoint = (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_4__.isEqualSelectionPoints)(selectionEndPoint, originalSelectionEndPoint);\n    if (startPointEqualToOriginalStartPoint && endPointEqualToOriginalEndPoint)\n      return !0;\n    const startPointBeforeSelection = isPointBeforeSelection(selectionStartPoint)(snapshot), startPointAfterSelection = isPointAfterSelection(selectionStartPoint)(snapshot), endPointBeforeSelection = isPointBeforeSelection(selectionEndPoint)(snapshot), endPointAfterSelection = isPointAfterSelection(selectionEndPoint)(snapshot), originalStartPointBeforeStartPoint = isPointBeforeSelection(originalSelectionStartPoint)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint\n        }\n      }\n    }), originalStartPointAfterStartPoint = isPointAfterSelection(originalSelectionStartPoint)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint\n        }\n      }\n    }), originalEndPointBeforeEndPoint = isPointBeforeSelection(originalSelectionEndPoint)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint\n        }\n      }\n    }), originalEndPointAfterEndPoint = isPointAfterSelection(originalSelectionEndPoint)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint\n        }\n      }\n    }), startPointEqualToOriginalEndPoint = (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_4__.isEqualSelectionPoints)(selectionStartPoint, originalSelectionEndPoint), endPointEqualToOriginalStartPoint = (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_4__.isEqualSelectionPoints)(selectionEndPoint, originalSelectionStartPoint);\n    return !endPointEqualToOriginalStartPoint && !startPointEqualToOriginalEndPoint && !originalStartPointBeforeStartPoint && !originalStartPointAfterStartPoint && !originalEndPointBeforeEndPoint && !originalEndPointAfterEndPoint || endPointBeforeSelection && !endPointEqualToOriginalStartPoint || startPointAfterSelection && !startPointEqualToOriginalEndPoint ? !1 : !originalStartPointBeforeStartPoint && originalStartPointAfterStartPoint && !originalEndPointBeforeEndPoint && originalEndPointAfterEndPoint ? !endPointEqualToOriginalStartPoint : originalStartPointBeforeStartPoint && !originalStartPointAfterStartPoint && originalEndPointBeforeEndPoint && !originalEndPointAfterEndPoint ? !startPointEqualToOriginalEndPoint : !startPointAfterSelection || !startPointBeforeSelection || !endPointAfterSelection || !endPointBeforeSelection;\n  };\n}\nconst isSelectingEntireBlocks = (snapshot) => {\n  if (!snapshot.context.selection)\n    return !1;\n  const startPoint = snapshot.context.selection.backward ? snapshot.context.selection.focus : snapshot.context.selection.anchor, endPoint = snapshot.context.selection.backward ? snapshot.context.selection.anchor : snapshot.context.selection.focus, startBlock = getSelectionStartBlock(snapshot), endBlock = getSelectionEndBlock(snapshot);\n  if (!startBlock || !endBlock)\n    return !1;\n  const startBlockStartPoint = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getBlockStartPoint)({\n    context: snapshot.context,\n    block: startBlock\n  }), endBlockEndPoint = (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_4__.getBlockEndPoint)({\n    context: snapshot.context,\n    block: endBlock\n  });\n  return (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_4__.isEqualSelectionPoints)(startBlockStartPoint, startPoint) && (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_4__.isEqualSelectionPoints)(endBlockEndPoint, endPoint);\n};\nfunction isBlockPath(path) {\n  const firstSegment = path.at(0);\n  return path.length === 1 && firstSegment !== void 0 && isRecord(firstSegment) && \"_key\" in firstSegment && typeof firstSegment._key == \"string\";\n}\nfunction isRecord(value) {\n  return !!value && (typeof value == \"object\" || typeof value == \"function\");\n}\nfunction isSelectionExpanded(selection) {\n  return selection ? !(0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_4__.isSelectionCollapsed)(selection) : !1;\n}\nconst getNextSpan = (snapshot) => {\n  const selectionEndBlock = getSelectionEndBlock(snapshot), selectionEndPoint = getSelectionEndPoint(snapshot);\n  if (!selectionEndBlock || !selectionEndPoint || !(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isTextBlock)(snapshot.context, selectionEndBlock.node))\n    return;\n  const selectionEndPointChildKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getChildKeyFromSelectionPoint)(selectionEndPoint);\n  let endPointChildFound = !1, nextSpan;\n  for (const child of selectionEndBlock.node.children) {\n    if (child._key === selectionEndPointChildKey) {\n      endPointChildFound = !0;\n      continue;\n    }\n    if ((0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isSpan)(snapshot.context, child) && endPointChildFound) {\n      nextSpan = {\n        node: child,\n        path: [...selectionEndBlock.path, \"children\", {\n          _key: child._key\n        }]\n      };\n      break;\n    }\n  }\n  return nextSpan;\n}, getPreviousSpan = (snapshot) => {\n  const selectionStartBlock = getSelectionStartBlock(snapshot), selectionStartPoint = (0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionStartPoint)(snapshot);\n  if (!selectionStartBlock || !selectionStartPoint || !(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isTextBlock)(snapshot.context, selectionStartBlock.node))\n    return;\n  const selectionStartPointChildKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getChildKeyFromSelectionPoint)(selectionStartPoint);\n  let previousSpan;\n  for (const child of selectionStartBlock.node.children) {\n    if (child._key === selectionStartPointChildKey)\n      break;\n    (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isSpan)(snapshot.context, child) && (previousSpan = {\n      node: child,\n      path: [...selectionStartBlock.path, \"children\", {\n        _key: child._key\n      }]\n    });\n  }\n  return previousSpan;\n}, getSelectedSpans = (snapshot) => {\n  if (!snapshot.context.selection)\n    return [];\n  const selectedSpans = [], startPoint = (0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionStartPoint)(snapshot), endPoint = getSelectionEndPoint(snapshot);\n  if (!startPoint || !endPoint)\n    return selectedSpans;\n  const startBlockKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getBlockKeyFromSelectionPoint)(startPoint), endBlockKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getBlockKeyFromSelectionPoint)(endPoint), startSpanKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getChildKeyFromSelectionPoint)(startPoint), endSpanKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getChildKeyFromSelectionPoint)(endPoint);\n  if (!startBlockKey || !endBlockKey)\n    return selectedSpans;\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey), endBlockIndex = snapshot.blockIndexMap.get(endBlockKey);\n  if (startBlockIndex === void 0 || endBlockIndex === void 0)\n    return selectedSpans;\n  const slicedValue = snapshot.context.value.slice(startBlockIndex, endBlockIndex + 1);\n  let startBlockFound = !1;\n  for (const block of slicedValue)\n    if (block._key === startBlockKey && (startBlockFound = !0), !!(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isTextBlock)(snapshot.context, block)) {\n      if (block._key === startBlockKey) {\n        for (const child of block.children)\n          if ((0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isSpan)(snapshot.context, child)) {\n            if (startSpanKey && child._key === startSpanKey) {\n              if (startPoint.offset < child.text.length && selectedSpans.push({\n                node: child,\n                path: [{\n                  _key: block._key\n                }, \"children\", {\n                  _key: child._key\n                }]\n              }), startSpanKey === endSpanKey)\n                break;\n              continue;\n            }\n            if (endSpanKey && child._key === endSpanKey) {\n              endPoint.offset > 0 && selectedSpans.push({\n                node: child,\n                path: [{\n                  _key: block._key\n                }, \"children\", {\n                  _key: child._key\n                }]\n              });\n              break;\n            }\n            selectedSpans.length > 0 && selectedSpans.push({\n              node: child,\n              path: [{\n                _key: block._key\n              }, \"children\", {\n                _key: child._key\n              }]\n            });\n          }\n        if (startBlockKey === endBlockKey)\n          break;\n        continue;\n      }\n      if (block._key === endBlockKey) {\n        for (const child of block.children)\n          if ((0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isSpan)(snapshot.context, child)) {\n            if (endSpanKey && child._key === endSpanKey) {\n              endPoint.offset > 0 && selectedSpans.push({\n                node: child,\n                path: [{\n                  _key: block._key\n                }, \"children\", {\n                  _key: child._key\n                }]\n              });\n              break;\n            }\n            selectedSpans.push({\n              node: child,\n              path: [{\n                _key: block._key\n              }, \"children\", {\n                _key: child._key\n              }]\n            });\n          }\n        break;\n      }\n      if (startBlockFound)\n        for (const child of block.children)\n          (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isSpan)(snapshot.context, child) && selectedSpans.push({\n            node: child,\n            path: [{\n              _key: block._key\n            }, \"children\", {\n              _key: child._key\n            }]\n          });\n    }\n  return selectedSpans;\n}, getMarkState = (snapshot) => {\n  if (!snapshot.context.selection)\n    return;\n  let selection = snapshot.context.selection;\n  if (!(0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)(snapshot))\n    return;\n  if (isBlockPath(selection.anchor.path)) {\n    const spanSelectionPoint = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.blockOffsetToSpanSelectionPoint)({\n      context: snapshot.context,\n      blockOffset: {\n        path: selection.anchor.path,\n        offset: selection.anchor.offset\n      },\n      direction: selection.backward ? \"backward\" : \"forward\"\n    });\n    selection = spanSelectionPoint ? {\n      ...selection,\n      anchor: spanSelectionPoint\n    } : selection;\n  }\n  if (isBlockPath(selection.focus.path)) {\n    const spanSelectionPoint = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.blockOffsetToSpanSelectionPoint)({\n      context: snapshot.context,\n      blockOffset: {\n        path: selection.focus.path,\n        offset: selection.focus.offset\n      },\n      direction: selection.backward ? \"backward\" : \"forward\"\n    });\n    selection = spanSelectionPoint ? {\n      ...selection,\n      focus: spanSelectionPoint\n    } : selection;\n  }\n  const focusSpan = (0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.getFocusSpan)({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection\n    }\n  });\n  if (!focusSpan)\n    return;\n  if (isSelectionExpanded(selection)) {\n    const selectedSpans = getSelectedSpans({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection\n      }\n    });\n    let index = 0, marks2 = [];\n    for (const span of selectedSpans) {\n      if (index === 0)\n        marks2 = span.node.marks ?? [];\n      else {\n        if (span.node.marks?.length === 0) {\n          marks2 = [];\n          continue;\n        }\n        marks2 = marks2.filter((mark) => (span.node.marks ?? []).some((spanMark) => spanMark === mark));\n      }\n      index++;\n    }\n    return {\n      state: \"unchanged\",\n      marks: marks2\n    };\n  }\n  const decorators = snapshot.context.schema.decorators.map((decorator) => decorator.name), marks = focusSpan.node.marks ?? [], marksWithoutAnnotations = marks.filter((mark) => decorators.includes(mark)), spanHasAnnotations = marks.length > marksWithoutAnnotations.length, spanIsEmpty = focusSpan.node.text.length === 0, atTheBeginningOfSpan = snapshot.context.selection.anchor.offset === 0, atTheEndOfSpan = snapshot.context.selection.anchor.offset === focusSpan.node.text.length, previousSpan = getPreviousSpan({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection\n    }\n  }), nextSpan = getNextSpan({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection\n    }\n  }), nextSpanAnnotations = nextSpan?.node?.marks?.filter((mark) => !decorators.includes(mark)) ?? [], spanAnnotations = marks.filter((mark) => !decorators.includes(mark)), previousSpanHasAnnotations = previousSpan ? previousSpan.node.marks?.some((mark) => !decorators.includes(mark)) : !1, previousSpanHasSameAnnotations = previousSpan ? previousSpan.node.marks?.filter((mark) => !decorators.includes(mark)).every((mark) => marks.includes(mark)) : !1, previousSpanHasSameAnnotation = previousSpan ? previousSpan.node.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1, previousSpanHasSameMarks = previousSpan ? previousSpan.node.marks?.every((mark) => marks.includes(mark)) : !1, nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) => nextSpanAnnotations?.includes(mark));\n  if (spanHasAnnotations && !spanIsEmpty) {\n    if (atTheBeginningOfSpan) {\n      if (previousSpanHasSameMarks)\n        return {\n          state: \"changed\",\n          previousMarks: marks,\n          marks: previousSpan?.node.marks ?? []\n        };\n      if (previousSpanHasSameAnnotations)\n        return {\n          state: \"changed\",\n          previousMarks: marks,\n          marks: previousSpan?.node.marks ?? []\n        };\n      if (previousSpanHasSameAnnotation)\n        return {\n          state: \"unchanged\",\n          previousMarks: marks,\n          marks: focusSpan.node.marks ?? []\n        };\n      if (!previousSpan)\n        return {\n          state: \"changed\",\n          previousMarks: marks,\n          marks: []\n        };\n    }\n    if (atTheEndOfSpan) {\n      if (nextSpan && nextSpanSharesSomeAnnotations && nextSpanAnnotations.length < spanAnnotations.length || !nextSpanSharesSomeAnnotations)\n        return {\n          state: \"changed\",\n          previousMarks: marks,\n          marks: nextSpan?.node.marks ?? []\n        };\n      if (!nextSpan)\n        return {\n          state: \"changed\",\n          previousMarks: marks,\n          marks: []\n        };\n    }\n  }\n  return atTheBeginningOfSpan && !spanIsEmpty && previousSpan ? previousSpanHasAnnotations ? {\n    state: \"changed\",\n    marks,\n    previousMarks: previousSpan?.node.marks ?? []\n  } : {\n    state: \"changed\",\n    previousMarks: marks,\n    marks: (previousSpan?.node.marks ?? []).filter((mark) => decorators.includes(mark))\n  } : {\n    state: \"unchanged\",\n    marks\n  };\n};\nfunction getActiveDecorators(snapshot) {\n  const schema = snapshot.context.schema, decoratorState = snapshot.decoratorState, markState = getMarkState(snapshot), decorators = schema.decorators.map((decorator) => decorator.name);\n  let activeDecorators = (markState?.marks ?? []).filter((mark) => decorators.includes(mark));\n  for (const decorator in decoratorState)\n    decoratorState[decorator] === !1 ? activeDecorators = activeDecorators.filter((activeDecorator) => activeDecorator !== decorator) : decoratorState[decorator] === !0 && (activeDecorators.includes(decorator) || activeDecorators.push(decorator));\n  return activeDecorators;\n}\nconst getTrimmedSelection = (snapshot) => {\n  if (!snapshot.context.selection)\n    return snapshot.context.selection;\n  const startPoint = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionStartPoint)(snapshot.context.selection), endPoint = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionEndPoint)(snapshot.context.selection), startBlockKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getBlockKeyFromSelectionPoint)(startPoint), startChildKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getChildKeyFromSelectionPoint)(startPoint), endBlockKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getBlockKeyFromSelectionPoint)(endPoint), endChildKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getChildKeyFromSelectionPoint)(endPoint);\n  if (!startBlockKey || !endBlockKey)\n    return snapshot.context.selection;\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey), endBlockIndex = snapshot.blockIndexMap.get(endBlockKey);\n  if (startBlockIndex === void 0 || endBlockIndex === void 0)\n    return snapshot.context.selection;\n  const slicedValue = snapshot.context.value.slice(startBlockIndex, endBlockIndex + 1);\n  let startBlockFound = !1, adjustedStartPoint, trimStartPoint = !1, adjustedEndPoint, trimEndPoint = !1, previousPotentialEndpoint;\n  for (const block of slicedValue)\n    if (!(block._key === startBlockKey && (startBlockFound = !0, (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isTextBlock)(snapshot.context, block) && (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_4__.isEmptyTextBlock)(snapshot.context, block))) && startBlockFound && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isTextBlock)(snapshot.context, block)) {\n      if (block._key === endBlockKey && (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_4__.isEmptyTextBlock)(snapshot.context, block))\n        break;\n      for (const child of block.children) {\n        if (child._key === endChildKey && (!(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isSpan)(snapshot.context, child) || endPoint.offset === 0)) {\n          adjustedEndPoint = previousPotentialEndpoint ? {\n            path: [{\n              _key: previousPotentialEndpoint.blockKey\n            }, \"children\", {\n              _key: previousPotentialEndpoint.span._key\n            }],\n            offset: previousPotentialEndpoint.span.text.length\n          } : void 0, trimEndPoint = !0;\n          break;\n        }\n        if (trimStartPoint) {\n          const lonelySpan = (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isSpan)(snapshot.context, child) && block.children.length === 1;\n          ((0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isSpan)(snapshot.context, child) && child.text.length > 0 || lonelySpan) && (adjustedStartPoint = {\n            path: [{\n              _key: block._key\n            }, \"children\", {\n              _key: child._key\n            }],\n            offset: 0\n          }, previousPotentialEndpoint = {\n            blockKey: block._key,\n            span: child\n          }, trimStartPoint = !1);\n          continue;\n        }\n        if (child._key === startChildKey) {\n          if (!(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isSpan)(snapshot.context, child)) {\n            trimStartPoint = !0;\n            continue;\n          }\n          if (startPoint.offset === child.text.length) {\n            trimStartPoint = !0, previousPotentialEndpoint = child.text.length > 0 ? {\n              blockKey: block._key,\n              span: child\n            } : previousPotentialEndpoint;\n            continue;\n          }\n        }\n        previousPotentialEndpoint = (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isSpan)(snapshot.context, child) && child.text.length > 0 ? {\n          blockKey: block._key,\n          span: child\n        } : previousPotentialEndpoint;\n      }\n      if (block._key === endBlockKey)\n        break;\n    }\n  const trimmedSelection = snapshot.context.selection.backward ? {\n    anchor: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,\n    focus: adjustedStartPoint ?? startPoint,\n    backward: !0\n  } : {\n    anchor: adjustedStartPoint ?? startPoint,\n    focus: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint\n  };\n  if ((0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)({\n    context: {\n      ...snapshot.context,\n      selection: trimmedSelection\n    }\n  })) {\n    const focusTextBlock = (0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: trimmedSelection\n      }\n    });\n    if (focusTextBlock && !(0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_4__.isEmptyTextBlock)(snapshot.context, focusTextBlock.node))\n      return null;\n  }\n  return trimmedSelection;\n}, getNextInlineObject = (snapshot) => {\n  const focusTextBlock = (0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)(snapshot), selectionEndPoint = getSelectionEndPoint(snapshot), selectionEndPointChildKey = selectionEndPoint && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_1__.isKeySegment)(selectionEndPoint.path[2]) ? selectionEndPoint.path[2]._key : void 0;\n  if (!focusTextBlock || !selectionEndPointChildKey)\n    return;\n  let endPointChildFound = !1, inlineObject;\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionEndPointChildKey) {\n      endPointChildFound = !0;\n      continue;\n    }\n    if (!(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isSpan)(snapshot.context, child) && endPointChildFound) {\n      inlineObject = {\n        node: child,\n        path: [...focusTextBlock.path, \"children\", {\n          _key: child._key\n        }]\n      };\n      break;\n    }\n  }\n  return inlineObject;\n}, getCaretWordSelection = (snapshot) => {\n  if (!snapshot.context.selection || !(0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(snapshot))\n    return null;\n  const focusTextBlock = (0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)(snapshot), selectionStartPoint = (0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionStartPoint)(snapshot), selectionStartOffset = selectionStartPoint ? (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.spanSelectionPointToBlockOffset)({\n    context: snapshot.context,\n    selectionPoint: selectionStartPoint\n  }) : void 0;\n  if (!focusTextBlock || !selectionStartPoint || !selectionStartOffset)\n    return null;\n  const previousInlineObject = (0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.getPreviousInlineObject)(snapshot), blockStartPoint = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getBlockStartPoint)({\n    context: snapshot.context,\n    block: focusTextBlock\n  }), textDirectlyBefore = (0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionText)({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: previousInlineObject ? {\n          path: previousInlineObject.path,\n          offset: 0\n        } : blockStartPoint,\n        focus: selectionStartPoint\n      }\n    }\n  }).split(/\\s+/).at(-1), nextInlineObject = getNextInlineObject(snapshot), blockEndPoint = (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_4__.getBlockEndPoint)({\n    context: snapshot.context,\n    block: focusTextBlock\n  }), textDirectlyAfter = (0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionText)({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: selectionStartPoint,\n        focus: nextInlineObject ? {\n          path: nextInlineObject.path,\n          offset: 0\n        } : blockEndPoint\n      }\n    }\n  }).split(/\\s+/).at(0);\n  if ((textDirectlyBefore === void 0 || textDirectlyBefore === \"\") && (textDirectlyAfter === void 0 || textDirectlyAfter === \"\"))\n    return null;\n  const caretWordStartOffset = textDirectlyBefore ? {\n    ...selectionStartOffset,\n    offset: selectionStartOffset.offset - textDirectlyBefore.length\n  } : selectionStartOffset, caretWordEndOffset = textDirectlyAfter ? {\n    ...selectionStartOffset,\n    offset: selectionStartOffset.offset + textDirectlyAfter.length\n  } : selectionStartOffset, caretWordStartSelectionPoint = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.blockOffsetToSpanSelectionPoint)({\n    context: snapshot.context,\n    blockOffset: caretWordStartOffset,\n    direction: \"backward\"\n  }), caretWordEndSelectionPoint = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.blockOffsetToSpanSelectionPoint)({\n    context: snapshot.context,\n    blockOffset: caretWordEndOffset,\n    direction: \"forward\"\n  });\n  if (!caretWordStartSelectionPoint || !caretWordEndSelectionPoint)\n    return null;\n  const caretWordSelection = {\n    anchor: caretWordStartSelectionPoint,\n    focus: caretWordEndSelectionPoint\n  };\n  return (0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionExpanded)({\n    context: {\n      ...snapshot.context,\n      selection: caretWordSelection\n    }\n  }) ? caretWordSelection : null;\n};\nfunction getActiveAnnotationsMarks(snapshot) {\n  const schema = snapshot.context.schema;\n  return (getMarkState(snapshot)?.marks ?? []).filter((mark) => !schema.decorators.map((decorator) => decorator.name).includes(mark));\n}\nfunction isActiveAnnotation(annotation, options) {\n  return (snapshot) => {\n    if ((options?.mode ?? \"full\") === \"partial\")\n      return (0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.getSelectedValue)(snapshot).flatMap((block) => (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isTextBlock)(snapshot.context, block) ? block.markDefs ?? [] : []).some((markDef) => markDef._type === annotation);\n    const selectionMarkDefs = getSelectedBlocks(snapshot).flatMap((block) => (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isTextBlock)(snapshot.context, block.node) ? block.node.markDefs ?? [] : []), activeAnnotations = getActiveAnnotationsMarks(snapshot);\n    return selectionMarkDefs.filter((markDef) => markDef._type === annotation && activeAnnotations.includes(markDef._key)).length > 0;\n  };\n}\nconst getFocusBlockObject = (snapshot) => {\n  const focusBlock = (0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.getFocusBlock)(snapshot);\n  return focusBlock && !(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isTextBlock)(snapshot.context, focusBlock.node) ? {\n    node: focusBlock.node,\n    path: focusBlock.path\n  } : void 0;\n}, getNextBlock = (snapshot) => {\n  const selectionEndBlock = getSelectionEndBlock(snapshot);\n  if (!selectionEndBlock)\n    return;\n  const index = snapshot.blockIndexMap.get(selectionEndBlock.node._key);\n  if (index === void 0 || index === snapshot.context.value.length - 1)\n    return;\n  const nextBlock = snapshot.context.value.at(index + 1);\n  return nextBlock ? {\n    node: nextBlock,\n    path: [{\n      _key: nextBlock._key\n    }]\n  } : void 0;\n}, getPreviousBlock = (snapshot) => {\n  const selectionStartBlock = getSelectionStartBlock(snapshot);\n  if (!selectionStartBlock)\n    return;\n  const index = snapshot.blockIndexMap.get(selectionStartBlock.node._key);\n  if (index === void 0 || index === 0)\n    return;\n  const previousBlock = snapshot.context.value.at(index - 1);\n  return previousBlock ? {\n    node: previousBlock,\n    path: [{\n      _key: previousBlock._key\n    }]\n  } : void 0;\n}, getFirstBlock = (snapshot) => {\n  const node = snapshot.context.value[0];\n  return node ? {\n    node,\n    path: [{\n      _key: node._key\n    }]\n  } : void 0;\n}, getLastBlock = (snapshot) => {\n  const node = snapshot.context.value[snapshot.context.value.length - 1] ? snapshot.context.value[snapshot.context.value.length - 1] : void 0;\n  return node ? {\n    node,\n    path: [{\n      _key: node._key\n    }]\n  } : void 0;\n};\nfunction isAtTheEndOfBlock(block) {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !(0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const blockEndPoint = (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_4__.getBlockEndPoint)({\n      context: snapshot.context,\n      block\n    });\n    return (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_4__.isEqualSelectionPoints)(snapshot.context.selection.focus, blockEndPoint);\n  };\n}\nfunction isAtTheStartOfBlock(block) {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !(0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const blockStartPoint = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getBlockStartPoint)({\n      context: snapshot.context,\n      block\n    });\n    return (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_4__.isEqualSelectionPoints)(snapshot.context.selection.focus, blockStartPoint);\n  };\n}\nconst getFocusListBlock = (snapshot) => {\n  const focusTextBlock = (0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)(snapshot);\n  return focusTextBlock && (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.isListBlock)(snapshot.context, focusTextBlock.node) ? {\n    node: focusTextBlock.node,\n    path: focusTextBlock.path\n  } : void 0;\n};\nfunction isActiveDecorator(decorator) {\n  return (snapshot) => {\n    if ((0,_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionExpanded)(snapshot)) {\n      const selectedSpans = getSelectedSpans(snapshot);\n      return selectedSpans.length > 0 && selectedSpans.every((span) => span.node.marks?.includes(decorator));\n    }\n    return getActiveDecorators(snapshot).includes(decorator);\n  };\n}\nconst getActiveAnnotations = (snapshot) => {\n  if (!snapshot.context.selection)\n    return [];\n  const selectedBlocks = getSelectedBlocks(snapshot), activeAnnotations = (getMarkState(snapshot)?.marks ?? []).filter((mark) => !snapshot.context.schema.decorators.map((decorator) => decorator.name).includes(mark));\n  return selectedBlocks.flatMap((block) => (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isTextBlock)(snapshot.context, block.node) ? block.node.markDefs ?? [] : []).filter((markDef) => activeAnnotations.includes(markDef._key));\n}, getSelectedTextBlocks = (snapshot) => {\n  if (!snapshot.context.selection)\n    return [];\n  const selectedTextBlocks = [], startPoint = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionStartPoint)(snapshot.context.selection), endPoint = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionEndPoint)(snapshot.context.selection), startBlockKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getBlockKeyFromSelectionPoint)(startPoint), endBlockKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_2__.getBlockKeyFromSelectionPoint)(endPoint);\n  if (!startBlockKey || !endBlockKey)\n    return selectedTextBlocks;\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey), endBlockIndex = snapshot.blockIndexMap.get(endBlockKey);\n  if (startBlockIndex === void 0 || endBlockIndex === void 0)\n    return selectedTextBlocks;\n  const slicedValue = snapshot.context.value.slice(startBlockIndex, endBlockIndex + 1);\n  for (const block of slicedValue) {\n    if (block._key === startBlockKey) {\n      if ((0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isTextBlock)(snapshot.context, block) && selectedTextBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      }), startBlockKey === endBlockKey)\n        break;\n      continue;\n    }\n    if (block._key === endBlockKey) {\n      (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isTextBlock)(snapshot.context, block) && selectedTextBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      });\n      break;\n    }\n    selectedTextBlocks.length > 0 && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isTextBlock)(snapshot.context, block) && selectedTextBlocks.push({\n      node: block,\n      path: [{\n        _key: block._key\n      }]\n    });\n  }\n  return selectedTextBlocks;\n}, getActiveListItem = (snapshot) => {\n  if (!snapshot.context.selection)\n    return;\n  const selectedTextBlocks = getSelectedBlocks(snapshot).map((block) => block.node).filter((block) => (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isTextBlock)(snapshot.context, block)), firstTextBlock = selectedTextBlocks.at(0);\n  if (!firstTextBlock)\n    return;\n  const firstListItem = firstTextBlock.listItem;\n  if (firstListItem && selectedTextBlocks.every((block) => block.listItem === firstListItem))\n    return firstListItem;\n};\nfunction isActiveListItem(listItem) {\n  return (snapshot) => getActiveListItem(snapshot) === listItem;\n}\nconst getActiveStyle = (snapshot) => {\n  if (!snapshot.context.selection)\n    return;\n  const selectedTextBlocks = getSelectedBlocks(snapshot).map((block) => block.node).filter((block) => (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_3__.isTextBlock)(snapshot.context, block)), firstTextBlock = selectedTextBlocks.at(0);\n  if (!firstTextBlock)\n    return;\n  const firstStyle = firstTextBlock.style;\n  if (firstStyle && selectedTextBlocks.every((block) => block.style === firstStyle))\n    return firstStyle;\n};\nfunction isActiveStyle(style) {\n  return (snapshot) => getActiveStyle(snapshot) === style;\n}\n\n//# sourceMappingURL=selector.is-active-style.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/selector.is-active-style.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/use-editor.js":
/*!*************************************************************************!*\
  !*** ../node_modules/@portabletext/editor/lib/_chunks-es/use-editor.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditorContext: () => (/* binding */ EditorContext),\n/* harmony export */   useEditor: () => (/* binding */ useEditor)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n\nfunction getGlobalScope() {\n  if (typeof globalThis < \"u\") return globalThis;\n  if (typeof window < \"u\") return window;\n  if (typeof self < \"u\") return self;\n  if (typeof global < \"u\") return global;\n  throw new Error(\"@portabletext/editor: could not locate global scope\");\n}\nconst globalScope = getGlobalScope();\nfunction createGloballyScopedContext(key, defaultValue) {\n  const symbol = Symbol.for(key);\n  return typeof document > \"u\" ? (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(defaultValue) : (globalScope[symbol] = globalScope[symbol] ?? (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(defaultValue), globalScope[symbol]);\n}\nconst EditorContext = createGloballyScopedContext(\"@portabletext/editor/context/editor\", null);\nfunction useEditor() {\n  const editor = react__WEBPACK_IMPORTED_MODULE_0__.useContext(EditorContext);\n  if (!editor)\n    throw new Error(\"No Editor set. Use EditorProvider to set one.\");\n  return editor;\n}\n\n//# sourceMappingURL=use-editor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0Bwb3J0YWJsZXRleHQvZWRpdG9yL2xpYi9fY2h1bmtzLWVzL3VzZS1lZGl0b3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLG9EQUFhLCtEQUErRCxvREFBYTtBQUMxSDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsNkNBQWdCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBSUU7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL0dhbG9jay9DUy9iZWhvbWUtc2l0ZS9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXNlLWVkaXRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgY3JlYXRlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gZ2V0R2xvYmFsU2NvcGUoKSB7XG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA8IFwidVwiKSByZXR1cm4gZ2xvYmFsVGhpcztcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPCBcInVcIikgcmV0dXJuIHdpbmRvdztcbiAgaWYgKHR5cGVvZiBzZWxmIDwgXCJ1XCIpIHJldHVybiBzZWxmO1xuICBpZiAodHlwZW9mIGdsb2JhbCA8IFwidVwiKSByZXR1cm4gZ2xvYmFsO1xuICB0aHJvdyBuZXcgRXJyb3IoXCJAcG9ydGFibGV0ZXh0L2VkaXRvcjogY291bGQgbm90IGxvY2F0ZSBnbG9iYWwgc2NvcGVcIik7XG59XG5jb25zdCBnbG9iYWxTY29wZSA9IGdldEdsb2JhbFNjb3BlKCk7XG5mdW5jdGlvbiBjcmVhdGVHbG9iYWxseVNjb3BlZENvbnRleHQoa2V5LCBkZWZhdWx0VmFsdWUpIHtcbiAgY29uc3Qgc3ltYm9sID0gU3ltYm9sLmZvcihrZXkpO1xuICByZXR1cm4gdHlwZW9mIGRvY3VtZW50ID4gXCJ1XCIgPyBjcmVhdGVDb250ZXh0KGRlZmF1bHRWYWx1ZSkgOiAoZ2xvYmFsU2NvcGVbc3ltYm9sXSA9IGdsb2JhbFNjb3BlW3N5bWJvbF0gPz8gY3JlYXRlQ29udGV4dChkZWZhdWx0VmFsdWUpLCBnbG9iYWxTY29wZVtzeW1ib2xdKTtcbn1cbmNvbnN0IEVkaXRvckNvbnRleHQgPSBjcmVhdGVHbG9iYWxseVNjb3BlZENvbnRleHQoXCJAcG9ydGFibGV0ZXh0L2VkaXRvci9jb250ZXh0L2VkaXRvclwiLCBudWxsKTtcbmZ1bmN0aW9uIHVzZUVkaXRvcigpIHtcbiAgY29uc3QgZWRpdG9yID0gUmVhY3QudXNlQ29udGV4dChFZGl0b3JDb250ZXh0KTtcbiAgaWYgKCFlZGl0b3IpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gRWRpdG9yIHNldC4gVXNlIEVkaXRvclByb3ZpZGVyIHRvIHNldCBvbmUuXCIpO1xuICByZXR1cm4gZWRpdG9yO1xufVxuZXhwb3J0IHtcbiAgRWRpdG9yQ29udGV4dCxcbiAgdXNlRWRpdG9yXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLWVkaXRvci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/use-editor.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.child-selection-point-to-block-offset.js":
/*!*********************************************************************************************************!*\
  !*** ../node_modules/@portabletext/editor/lib/_chunks-es/util.child-selection-point-to-block-offset.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockOffsetToBlockSelectionPoint: () => (/* binding */ blockOffsetToBlockSelectionPoint),\n/* harmony export */   blockOffsetToSelectionPoint: () => (/* binding */ blockOffsetToSelectionPoint),\n/* harmony export */   blockOffsetsToSelection: () => (/* binding */ blockOffsetsToSelection),\n/* harmony export */   childSelectionPointToBlockOffset: () => (/* binding */ childSelectionPointToBlockOffset)\n/* harmony export */ });\n/* harmony import */ var _util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.get-text-block-text.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.get-text-block-text.js\");\n/* harmony import */ var _portabletext_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @portabletext/schema */ \"(ssr)/../node_modules/@portabletext/schema/dist/index.js\");\n\n\nfunction blockOffsetToBlockSelectionPoint({\n  context,\n  blockOffset\n}) {\n  let selectionPoint;\n  for (const block of context.value)\n    if (block._key === blockOffset.path[0]._key) {\n      selectionPoint = {\n        path: [{\n          _key: block._key\n        }],\n        offset: blockOffset.offset\n      };\n      break;\n    }\n  return selectionPoint;\n}\nfunction blockOffsetToSelectionPoint({\n  context,\n  blockOffset,\n  direction\n}) {\n  return (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__.blockOffsetToSpanSelectionPoint)({\n    context,\n    blockOffset,\n    direction\n  }) || blockOffsetToBlockSelectionPoint({\n    context,\n    blockOffset\n  });\n}\nfunction blockOffsetsToSelection({\n  context,\n  offsets,\n  backward\n}) {\n  const anchor = blockOffsetToSelectionPoint({\n    context,\n    blockOffset: offsets.anchor,\n    direction: backward ? \"backward\" : \"forward\"\n  }), focus = blockOffsetToSelectionPoint({\n    context,\n    blockOffset: offsets.focus,\n    direction: backward ? \"forward\" : \"backward\"\n  });\n  return !anchor || !focus ? null : {\n    anchor,\n    focus,\n    backward\n  };\n}\nfunction childSelectionPointToBlockOffset({\n  context,\n  selectionPoint\n}) {\n  let offset = 0;\n  const blockKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__.getBlockKeyFromSelectionPoint)(selectionPoint), childKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__.getChildKeyFromSelectionPoint)(selectionPoint);\n  if (!(!blockKey || !childKey)) {\n    for (const block of context.value)\n      if (block._key === blockKey && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(context, block))\n        for (const child of block.children) {\n          if (child._key === childKey)\n            return {\n              path: [{\n                _key: block._key\n              }],\n              offset: offset + selectionPoint.offset\n            };\n          (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_1__.isSpan)(context, child) && (offset += child.text.length);\n        }\n  }\n}\n\n//# sourceMappingURL=util.child-selection-point-to-block-offset.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0Bwb3J0YWJsZXRleHQvZWRpdG9yL2xpYi9fY2h1bmtzLWVzL3V0aWwuY2hpbGQtc2VsZWN0aW9uLXBvaW50LXRvLWJsb2NrLW9mZnNldC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBOEk7QUFDbkY7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxTQUFTLDZGQUErQjtBQUN4QztBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxtQkFBbUIsMkZBQTZCLDZCQUE2QiwyRkFBNkI7QUFDMUc7QUFDQTtBQUNBLHFDQUFxQyxpRUFBVztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQSxVQUFVLDREQUFNO0FBQ2hCO0FBQ0E7QUFDQTtBQU1FO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9HYWxvY2svQ1MvYmVob21lLXNpdGUvbm9kZV9tb2R1bGVzL0Bwb3J0YWJsZXRleHQvZWRpdG9yL2xpYi9fY2h1bmtzLWVzL3V0aWwuY2hpbGQtc2VsZWN0aW9uLXBvaW50LXRvLWJsb2NrLW9mZnNldC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBibG9ja09mZnNldFRvU3BhblNlbGVjdGlvblBvaW50LCBnZXRCbG9ja0tleUZyb21TZWxlY3Rpb25Qb2ludCwgZ2V0Q2hpbGRLZXlGcm9tU2VsZWN0aW9uUG9pbnQgfSBmcm9tIFwiLi91dGlsLmdldC10ZXh0LWJsb2NrLXRleHQuanNcIjtcbmltcG9ydCB7IGlzVGV4dEJsb2NrLCBpc1NwYW4gfSBmcm9tIFwiQHBvcnRhYmxldGV4dC9zY2hlbWFcIjtcbmZ1bmN0aW9uIGJsb2NrT2Zmc2V0VG9CbG9ja1NlbGVjdGlvblBvaW50KHtcbiAgY29udGV4dCxcbiAgYmxvY2tPZmZzZXRcbn0pIHtcbiAgbGV0IHNlbGVjdGlvblBvaW50O1xuICBmb3IgKGNvbnN0IGJsb2NrIG9mIGNvbnRleHQudmFsdWUpXG4gICAgaWYgKGJsb2NrLl9rZXkgPT09IGJsb2NrT2Zmc2V0LnBhdGhbMF0uX2tleSkge1xuICAgICAgc2VsZWN0aW9uUG9pbnQgPSB7XG4gICAgICAgIHBhdGg6IFt7XG4gICAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgICB9XSxcbiAgICAgICAgb2Zmc2V0OiBibG9ja09mZnNldC5vZmZzZXRcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICB9XG4gIHJldHVybiBzZWxlY3Rpb25Qb2ludDtcbn1cbmZ1bmN0aW9uIGJsb2NrT2Zmc2V0VG9TZWxlY3Rpb25Qb2ludCh7XG4gIGNvbnRleHQsXG4gIGJsb2NrT2Zmc2V0LFxuICBkaXJlY3Rpb25cbn0pIHtcbiAgcmV0dXJuIGJsb2NrT2Zmc2V0VG9TcGFuU2VsZWN0aW9uUG9pbnQoe1xuICAgIGNvbnRleHQsXG4gICAgYmxvY2tPZmZzZXQsXG4gICAgZGlyZWN0aW9uXG4gIH0pIHx8IGJsb2NrT2Zmc2V0VG9CbG9ja1NlbGVjdGlvblBvaW50KHtcbiAgICBjb250ZXh0LFxuICAgIGJsb2NrT2Zmc2V0XG4gIH0pO1xufVxuZnVuY3Rpb24gYmxvY2tPZmZzZXRzVG9TZWxlY3Rpb24oe1xuICBjb250ZXh0LFxuICBvZmZzZXRzLFxuICBiYWNrd2FyZFxufSkge1xuICBjb25zdCBhbmNob3IgPSBibG9ja09mZnNldFRvU2VsZWN0aW9uUG9pbnQoe1xuICAgIGNvbnRleHQsXG4gICAgYmxvY2tPZmZzZXQ6IG9mZnNldHMuYW5jaG9yLFxuICAgIGRpcmVjdGlvbjogYmFja3dhcmQgPyBcImJhY2t3YXJkXCIgOiBcImZvcndhcmRcIlxuICB9KSwgZm9jdXMgPSBibG9ja09mZnNldFRvU2VsZWN0aW9uUG9pbnQoe1xuICAgIGNvbnRleHQsXG4gICAgYmxvY2tPZmZzZXQ6IG9mZnNldHMuZm9jdXMsXG4gICAgZGlyZWN0aW9uOiBiYWNrd2FyZCA/IFwiZm9yd2FyZFwiIDogXCJiYWNrd2FyZFwiXG4gIH0pO1xuICByZXR1cm4gIWFuY2hvciB8fCAhZm9jdXMgPyBudWxsIDoge1xuICAgIGFuY2hvcixcbiAgICBmb2N1cyxcbiAgICBiYWNrd2FyZFxuICB9O1xufVxuZnVuY3Rpb24gY2hpbGRTZWxlY3Rpb25Qb2ludFRvQmxvY2tPZmZzZXQoe1xuICBjb250ZXh0LFxuICBzZWxlY3Rpb25Qb2ludFxufSkge1xuICBsZXQgb2Zmc2V0ID0gMDtcbiAgY29uc3QgYmxvY2tLZXkgPSBnZXRCbG9ja0tleUZyb21TZWxlY3Rpb25Qb2ludChzZWxlY3Rpb25Qb2ludCksIGNoaWxkS2V5ID0gZ2V0Q2hpbGRLZXlGcm9tU2VsZWN0aW9uUG9pbnQoc2VsZWN0aW9uUG9pbnQpO1xuICBpZiAoISghYmxvY2tLZXkgfHwgIWNoaWxkS2V5KSkge1xuICAgIGZvciAoY29uc3QgYmxvY2sgb2YgY29udGV4dC52YWx1ZSlcbiAgICAgIGlmIChibG9jay5fa2V5ID09PSBibG9ja0tleSAmJiBpc1RleHRCbG9jayhjb250ZXh0LCBibG9jaykpXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgYmxvY2suY2hpbGRyZW4pIHtcbiAgICAgICAgICBpZiAoY2hpbGQuX2tleSA9PT0gY2hpbGRLZXkpXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBwYXRoOiBbe1xuICAgICAgICAgICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0ICsgc2VsZWN0aW9uUG9pbnQub2Zmc2V0XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIGlzU3Bhbihjb250ZXh0LCBjaGlsZCkgJiYgKG9mZnNldCArPSBjaGlsZC50ZXh0Lmxlbmd0aCk7XG4gICAgICAgIH1cbiAgfVxufVxuZXhwb3J0IHtcbiAgYmxvY2tPZmZzZXRUb0Jsb2NrU2VsZWN0aW9uUG9pbnQsXG4gIGJsb2NrT2Zmc2V0VG9TZWxlY3Rpb25Qb2ludCxcbiAgYmxvY2tPZmZzZXRzVG9TZWxlY3Rpb24sXG4gIGNoaWxkU2VsZWN0aW9uUG9pbnRUb0Jsb2NrT2Zmc2V0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5jaGlsZC1zZWxlY3Rpb24tcG9pbnQtdG8tYmxvY2stb2Zmc2V0LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.child-selection-point-to-block-offset.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.get-text-block-text.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@portabletext/editor/lib/_chunks-es/util.get-text-block-text.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockOffsetToSpanSelectionPoint: () => (/* binding */ blockOffsetToSpanSelectionPoint),\n/* harmony export */   defaultKeyGenerator: () => (/* binding */ defaultKeyGenerator),\n/* harmony export */   getBlockKeyFromSelectionPoint: () => (/* binding */ getBlockKeyFromSelectionPoint),\n/* harmony export */   getBlockStartPoint: () => (/* binding */ getBlockStartPoint),\n/* harmony export */   getChildKeyFromSelectionPoint: () => (/* binding */ getChildKeyFromSelectionPoint),\n/* harmony export */   getSelectionEndPoint: () => (/* binding */ getSelectionEndPoint),\n/* harmony export */   getSelectionStartPoint: () => (/* binding */ getSelectionStartPoint),\n/* harmony export */   getTextBlockText: () => (/* binding */ getTextBlockText),\n/* harmony export */   isKeyedSegment: () => (/* binding */ isKeyedSegment),\n/* harmony export */   isListBlock: () => (/* binding */ isListBlock),\n/* harmony export */   isTypedObject: () => (/* binding */ isTypedObject),\n/* harmony export */   parseAnnotation: () => (/* binding */ parseAnnotation),\n/* harmony export */   parseBlock: () => (/* binding */ parseBlock),\n/* harmony export */   parseBlocks: () => (/* binding */ parseBlocks),\n/* harmony export */   parseInlineObject: () => (/* binding */ parseInlineObject),\n/* harmony export */   parseSpan: () => (/* binding */ parseSpan),\n/* harmony export */   sliceBlocks: () => (/* binding */ sliceBlocks),\n/* harmony export */   spanSelectionPointToBlockOffset: () => (/* binding */ spanSelectionPointToBlockOffset)\n/* harmony export */ });\n/* harmony import */ var _portabletext_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @portabletext/schema */ \"(ssr)/../node_modules/@portabletext/schema/dist/index.js\");\n/* harmony import */ var get_random_values_esm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! get-random-values-esm */ \"(ssr)/../node_modules/get-random-values-esm/index.mjs\");\n\n\nfunction getBlockStartPoint({\n  context,\n  block\n}) {\n  return (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_0__.isTextBlock)(context, block.node) ? {\n    path: [...block.path, \"children\", {\n      _key: block.node.children[0]._key\n    }],\n    offset: 0\n  } : {\n    path: block.path,\n    offset: 0\n  };\n}\nfunction isKeyedSegment(segment) {\n  return typeof segment == \"object\" && segment !== null && \"_key\" in segment;\n}\nfunction getBlockKeyFromSelectionPoint(point) {\n  const blockPathSegment = point.path.at(0);\n  if (isKeyedSegment(blockPathSegment))\n    return blockPathSegment._key;\n}\nfunction getChildKeyFromSelectionPoint(point) {\n  const childPathSegment = point.path.at(2);\n  if (isKeyedSegment(childPathSegment))\n    return childPathSegment._key;\n}\nfunction blockOffsetToSpanSelectionPoint({\n  context,\n  blockOffset,\n  direction\n}) {\n  let offsetLeft = blockOffset.offset, selectionPoint, skippedInlineObject = !1;\n  for (const block of context.value)\n    if (block._key === blockOffset.path[0]._key && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_0__.isTextBlock)(context, block))\n      for (const child of block.children) {\n        if (direction === \"forward\") {\n          if (!(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_0__.isSpan)(context, child))\n            continue;\n          if (offsetLeft <= child.text.length) {\n            selectionPoint = {\n              path: [...blockOffset.path, \"children\", {\n                _key: child._key\n              }],\n              offset: offsetLeft\n            };\n            break;\n          }\n          offsetLeft -= child.text.length;\n          continue;\n        }\n        if (!(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_0__.isSpan)(context, child)) {\n          skippedInlineObject = !0;\n          continue;\n        }\n        if (offsetLeft === 0 && selectionPoint && !skippedInlineObject) {\n          skippedInlineObject && (selectionPoint = {\n            path: [...blockOffset.path, \"children\", {\n              _key: child._key\n            }],\n            offset: 0\n          });\n          break;\n        }\n        if (offsetLeft > child.text.length) {\n          offsetLeft -= child.text.length;\n          continue;\n        }\n        if (offsetLeft <= child.text.length && (selectionPoint = {\n          path: [...blockOffset.path, \"children\", {\n            _key: child._key\n          }],\n          offset: offsetLeft\n        }, offsetLeft -= child.text.length, offsetLeft !== 0))\n          break;\n      }\n  return selectionPoint;\n}\nfunction spanSelectionPointToBlockOffset({\n  context,\n  selectionPoint\n}) {\n  let offset = 0;\n  const blockKey = getBlockKeyFromSelectionPoint(selectionPoint), spanKey = getChildKeyFromSelectionPoint(selectionPoint);\n  if (!(!blockKey || !spanKey)) {\n    for (const block of context.value)\n      if (block._key === blockKey && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_0__.isTextBlock)(context, block)) {\n        for (const child of block.children)\n          if ((0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_0__.isSpan)(context, child)) {\n            if (child._key === spanKey)\n              return {\n                path: [{\n                  _key: block._key\n                }],\n                offset: offset + selectionPoint.offset\n              };\n            offset += child.text.length;\n          }\n      }\n  }\n}\nfunction isTypedObject(object) {\n  return isRecord(object) && typeof object._type == \"string\";\n}\nfunction isRecord(value) {\n  return !!value && (typeof value == \"object\" || typeof value == \"function\");\n}\nfunction parseBlocks({\n  context,\n  blocks,\n  options\n}) {\n  return Array.isArray(blocks) ? blocks.flatMap((block) => {\n    const parsedBlock = parseBlock({\n      context,\n      block,\n      options\n    });\n    return parsedBlock ? [parsedBlock] : [];\n  }) : [];\n}\nfunction parseBlock({\n  context,\n  block,\n  options\n}) {\n  return parseTextBlock({\n    block,\n    context,\n    options\n  }) ?? parseBlockObject({\n    blockObject: block,\n    context,\n    options\n  });\n}\nfunction parseBlockObject({\n  blockObject,\n  context,\n  options\n}) {\n  if (!isTypedObject(blockObject))\n    return;\n  const schemaType = context.schema.blockObjects.find(({\n    name\n  }) => name === blockObject._type);\n  if (schemaType)\n    return parseObject({\n      object: blockObject,\n      context: {\n        keyGenerator: context.keyGenerator,\n        schemaType\n      },\n      options\n    });\n}\nfunction isListBlock(context, block) {\n  return (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_0__.isTextBlock)(context, block) && block.level !== void 0 && block.listItem !== void 0;\n}\nfunction parseTextBlock({\n  block,\n  context,\n  options\n}) {\n  if (!isTypedObject(block))\n    return;\n  const customFields = {};\n  for (const key of Object.keys(block))\n    key === \"_type\" || key === \"_key\" || key === \"children\" || key === \"markDefs\" || key === \"style\" || key === \"listItem\" || key === \"level\" || (options.validateFields ? context.schema.block.fields?.some((field) => field.name === key) && (customFields[key] = block[key]) : customFields[key] = block[key]);\n  if (block._type !== context.schema.block.name)\n    return;\n  const _key = typeof block._key == \"string\" ? block._key : context.keyGenerator(), unparsedMarkDefs = Array.isArray(block.markDefs) ? block.markDefs : [], markDefKeyMap = /* @__PURE__ */ new Map(), markDefs = unparsedMarkDefs.flatMap((markDef) => {\n    if (!isTypedObject(markDef))\n      return [];\n    const schemaType = context.schema.annotations.find(({\n      name\n    }) => name === markDef._type);\n    if (!schemaType)\n      return [];\n    if (typeof markDef._key != \"string\")\n      return [];\n    const parsedAnnotation = parseObject({\n      object: markDef,\n      context: {\n        schemaType,\n        keyGenerator: context.keyGenerator\n      },\n      options\n    });\n    return parsedAnnotation ? (markDefKeyMap.set(markDef._key, parsedAnnotation._key), [parsedAnnotation]) : [];\n  }), children = (Array.isArray(block.children) ? block.children : []).map((child) => parseSpan({\n    span: child,\n    context,\n    markDefKeyMap,\n    options\n  }) ?? parseInlineObject({\n    inlineObject: child,\n    context,\n    options\n  })).filter((child) => child !== void 0), marks = children.flatMap((child) => child.marks ?? []), parsedBlock = {\n    _type: context.schema.block.name,\n    _key,\n    children: children.length > 0 ? children : [{\n      _key: context.keyGenerator(),\n      _type: context.schema.span.name,\n      text: \"\",\n      marks: []\n    }],\n    markDefs: options.removeUnusedMarkDefs ? markDefs.filter((markDef) => marks.includes(markDef._key)) : markDefs,\n    ...customFields\n  };\n  if (typeof block.style == \"string\" && context.schema.styles.find((style) => style.name === block.style))\n    parsedBlock.style = block.style;\n  else {\n    const defaultStyle = context.schema.styles.at(0)?.name;\n    defaultStyle !== void 0 ? parsedBlock.style = defaultStyle : console.error(\"Expected default style\");\n  }\n  return typeof block.listItem == \"string\" && context.schema.lists.find((list) => list.name === block.listItem) && (parsedBlock.listItem = block.listItem), typeof block.level == \"number\" && (parsedBlock.level = block.level), parsedBlock;\n}\nfunction parseSpan({\n  span,\n  context,\n  markDefKeyMap,\n  options\n}) {\n  if (!isTypedObject(span))\n    return;\n  const customFields = {};\n  for (const key of Object.keys(span))\n    key !== \"_type\" && key !== \"_key\" && key !== \"text\" && key !== \"marks\" && (customFields[key] = span[key]);\n  if (span._type !== context.schema.span.name || span._type !== \"span\")\n    return;\n  const marks = (Array.isArray(span.marks) ? span.marks : []).flatMap((mark) => {\n    if (typeof mark != \"string\")\n      return [];\n    const markDefKey = markDefKeyMap.get(mark);\n    return markDefKey !== void 0 ? [markDefKey] : context.schema.decorators.some((decorator) => decorator.name === mark) ? [mark] : [];\n  });\n  return {\n    _type: \"span\",\n    _key: typeof span._key == \"string\" ? span._key : context.keyGenerator(),\n    text: typeof span.text == \"string\" ? span.text : \"\",\n    marks,\n    ...options.validateFields ? {} : customFields\n  };\n}\nfunction parseInlineObject({\n  inlineObject,\n  context,\n  options\n}) {\n  if (!isTypedObject(inlineObject))\n    return;\n  const schemaType = context.schema.inlineObjects.find(({\n    name\n  }) => name === inlineObject._type);\n  if (schemaType)\n    return parseObject({\n      object: inlineObject,\n      context: {\n        keyGenerator: context.keyGenerator,\n        schemaType\n      },\n      options\n    });\n}\nfunction parseAnnotation({\n  annotation,\n  context,\n  options\n}) {\n  if (!isTypedObject(annotation))\n    return;\n  const schemaType = context.schema.annotations.find(({\n    name\n  }) => name === annotation._type);\n  if (schemaType)\n    return parseObject({\n      object: annotation,\n      context: {\n        keyGenerator: context.keyGenerator,\n        schemaType\n      },\n      options\n    });\n}\nfunction parseObject({\n  object,\n  context,\n  options\n}) {\n  const {\n    _type,\n    _key,\n    ...customFields\n  } = object, values = options.validateFields ? context.schemaType.fields.reduce((fieldValues, field) => {\n    const fieldValue = object[field.name];\n    return fieldValue !== void 0 && (fieldValues[field.name] = fieldValue), fieldValues;\n  }, {}) : customFields;\n  return {\n    _type: context.schemaType.name,\n    _key: typeof object._key == \"string\" ? object._key : context.keyGenerator(),\n    ...values\n  };\n}\nconst defaultKeyGenerator = () => randomKey(12), getByteHexTable = /* @__PURE__ */ (() => {\n  let table;\n  return () => {\n    if (table)\n      return table;\n    table = [];\n    for (let i = 0; i < 256; ++i)\n      table[i] = (i + 256).toString(16).slice(1);\n    return table;\n  };\n})();\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length);\n  return (0,get_random_values_esm__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(rnds8), rnds8;\n}\nfunction randomKey(length) {\n  const table = getByteHexTable();\n  return whatwgRNG(length).reduce((str, n) => str + table[n], \"\").slice(0, length);\n}\nfunction getSelectionEndPoint(selection) {\n  return selection ? selection.backward ? selection.anchor : selection.focus : null;\n}\nfunction getSelectionStartPoint(selection) {\n  return selection ? selection.backward ? selection.focus : selection.anchor : null;\n}\nfunction sliceBlocks({\n  context,\n  blocks\n}) {\n  const slice = [];\n  if (!context.selection)\n    return slice;\n  let startBlock;\n  const middleBlocks = [];\n  let endBlock;\n  const startPoint = getSelectionStartPoint(context.selection), endPoint = getSelectionEndPoint(context.selection), startBlockKey = getBlockKeyFromSelectionPoint(startPoint), startChildKey = getChildKeyFromSelectionPoint(startPoint), endBlockKey = getBlockKeyFromSelectionPoint(endPoint), endChildKey = getChildKeyFromSelectionPoint(endPoint);\n  if (!startBlockKey || !endBlockKey)\n    return slice;\n  for (const block of blocks) {\n    if (!(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_0__.isTextBlock)(context, block) && block._key === startBlockKey && block._key === endBlockKey) {\n      startBlock = block;\n      break;\n    }\n    if (block._key === startBlockKey) {\n      if (!(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_0__.isTextBlock)(context, block)) {\n        startBlock = block;\n        continue;\n      }\n      if (startChildKey) {\n        for (const child of block.children) {\n          if (child._key === startChildKey) {\n            if ((0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_0__.isSpan)(context, child)) {\n              const text = child._key === endChildKey ? child.text.slice(startPoint.offset, endPoint.offset) : child.text.slice(startPoint.offset);\n              startBlock = {\n                ...block,\n                children: [{\n                  ...child,\n                  text\n                }]\n              };\n            } else\n              startBlock = {\n                ...block,\n                children: [child]\n              };\n            if (block._key === endBlockKey && startChildKey === endChildKey)\n              break;\n            continue;\n          }\n          if (startBlock && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_0__.isTextBlock)(context, startBlock) && (endChildKey && child._key === endChildKey && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_0__.isSpan)(context, child) ? startBlock.children.push({\n            ...child,\n            text: child.text.slice(0, endPoint.offset)\n          }) : startBlock.children.push(child), block._key === endBlockKey && endChildKey && child._key === endChildKey))\n            break;\n        }\n        if (startBlockKey === endBlockKey)\n          break;\n        continue;\n      }\n      if (startBlock = block, startBlockKey === endBlockKey)\n        break;\n    }\n    if (block._key === endBlockKey) {\n      if (!(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_0__.isTextBlock)(context, block)) {\n        endBlock = block;\n        break;\n      }\n      if (endChildKey) {\n        endBlock = {\n          ...block,\n          children: []\n        };\n        for (const child of block.children)\n          if (endBlock && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_0__.isTextBlock)(context, endBlock)) {\n            if (child._key === endChildKey && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_0__.isSpan)(context, child)) {\n              endBlock.children.push({\n                ...child,\n                text: child.text.slice(0, endPoint.offset)\n              });\n              break;\n            }\n            if (endBlock.children.push(child), endChildKey && child._key === endChildKey)\n              break;\n          }\n        break;\n      }\n      endBlock = block;\n      break;\n    }\n    startBlock && middleBlocks.push(parseBlock({\n      context: {\n        ...context,\n        keyGenerator: defaultKeyGenerator\n      },\n      block,\n      options: {\n        removeUnusedMarkDefs: !0,\n        validateFields: !1\n      }\n    }) ?? block);\n  }\n  const parsedStartBlock = startBlock ? parseBlock({\n    context: {\n      ...context,\n      keyGenerator: defaultKeyGenerator\n    },\n    block: startBlock,\n    options: {\n      removeUnusedMarkDefs: !0,\n      validateFields: !1\n    }\n  }) : void 0, parsedEndBlock = endBlock ? parseBlock({\n    context: {\n      ...context,\n      keyGenerator: defaultKeyGenerator\n    },\n    block: endBlock,\n    options: {\n      removeUnusedMarkDefs: !0,\n      validateFields: !1\n    }\n  }) : void 0;\n  return [...parsedStartBlock ? [parsedStartBlock] : [], ...middleBlocks, ...parsedEndBlock ? [parsedEndBlock] : []];\n}\nfunction getTextBlockText(block) {\n  return block.children.map((child) => child.text ?? \"\").join(\"\");\n}\n\n//# sourceMappingURL=util.get-text-block-text.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0Bwb3J0YWJsZXRleHQvZWRpdG9yL2xpYi9fY2h1bmtzLWVzL3V0aWwuZ2V0LXRleHQtYmxvY2stdGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUEyRDtBQUNQO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxTQUFTLGlFQUFXO0FBQ3BCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxtREFBbUQsaUVBQVc7QUFDOUQ7QUFDQTtBQUNBLGVBQWUsNERBQU07QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsNERBQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGlFQUFXO0FBQ2hEO0FBQ0EsY0FBYyw0REFBTTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFNBQVMsaUVBQVc7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUcsSUFBSTtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsU0FBUyxpRUFBZTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxpRUFBVztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUVBQVc7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDREQUFNO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGlFQUFXLHVFQUF1RSw0REFBTTtBQUNwSDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpRUFBVztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsaUVBQVc7QUFDckMsOENBQThDLDREQUFNO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFvQkU7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL0dhbG9jay9DUy9iZWhvbWUtc2l0ZS9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5nZXQtdGV4dC1ibG9jay10ZXh0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzVGV4dEJsb2NrLCBpc1NwYW4gfSBmcm9tIFwiQHBvcnRhYmxldGV4dC9zY2hlbWFcIjtcbmltcG9ydCBnZXRSYW5kb21WYWx1ZXMgZnJvbSBcImdldC1yYW5kb20tdmFsdWVzLWVzbVwiO1xuZnVuY3Rpb24gZ2V0QmxvY2tTdGFydFBvaW50KHtcbiAgY29udGV4dCxcbiAgYmxvY2tcbn0pIHtcbiAgcmV0dXJuIGlzVGV4dEJsb2NrKGNvbnRleHQsIGJsb2NrLm5vZGUpID8ge1xuICAgIHBhdGg6IFsuLi5ibG9jay5wYXRoLCBcImNoaWxkcmVuXCIsIHtcbiAgICAgIF9rZXk6IGJsb2NrLm5vZGUuY2hpbGRyZW5bMF0uX2tleVxuICAgIH1dLFxuICAgIG9mZnNldDogMFxuICB9IDoge1xuICAgIHBhdGg6IGJsb2NrLnBhdGgsXG4gICAgb2Zmc2V0OiAwXG4gIH07XG59XG5mdW5jdGlvbiBpc0tleWVkU2VnbWVudChzZWdtZW50KSB7XG4gIHJldHVybiB0eXBlb2Ygc2VnbWVudCA9PSBcIm9iamVjdFwiICYmIHNlZ21lbnQgIT09IG51bGwgJiYgXCJfa2V5XCIgaW4gc2VnbWVudDtcbn1cbmZ1bmN0aW9uIGdldEJsb2NrS2V5RnJvbVNlbGVjdGlvblBvaW50KHBvaW50KSB7XG4gIGNvbnN0IGJsb2NrUGF0aFNlZ21lbnQgPSBwb2ludC5wYXRoLmF0KDApO1xuICBpZiAoaXNLZXllZFNlZ21lbnQoYmxvY2tQYXRoU2VnbWVudCkpXG4gICAgcmV0dXJuIGJsb2NrUGF0aFNlZ21lbnQuX2tleTtcbn1cbmZ1bmN0aW9uIGdldENoaWxkS2V5RnJvbVNlbGVjdGlvblBvaW50KHBvaW50KSB7XG4gIGNvbnN0IGNoaWxkUGF0aFNlZ21lbnQgPSBwb2ludC5wYXRoLmF0KDIpO1xuICBpZiAoaXNLZXllZFNlZ21lbnQoY2hpbGRQYXRoU2VnbWVudCkpXG4gICAgcmV0dXJuIGNoaWxkUGF0aFNlZ21lbnQuX2tleTtcbn1cbmZ1bmN0aW9uIGJsb2NrT2Zmc2V0VG9TcGFuU2VsZWN0aW9uUG9pbnQoe1xuICBjb250ZXh0LFxuICBibG9ja09mZnNldCxcbiAgZGlyZWN0aW9uXG59KSB7XG4gIGxldCBvZmZzZXRMZWZ0ID0gYmxvY2tPZmZzZXQub2Zmc2V0LCBzZWxlY3Rpb25Qb2ludCwgc2tpcHBlZElubGluZU9iamVjdCA9ICExO1xuICBmb3IgKGNvbnN0IGJsb2NrIG9mIGNvbnRleHQudmFsdWUpXG4gICAgaWYgKGJsb2NrLl9rZXkgPT09IGJsb2NrT2Zmc2V0LnBhdGhbMF0uX2tleSAmJiBpc1RleHRCbG9jayhjb250ZXh0LCBibG9jaykpXG4gICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGJsb2NrLmNoaWxkcmVuKSB7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09IFwiZm9yd2FyZFwiKSB7XG4gICAgICAgICAgaWYgKCFpc1NwYW4oY29udGV4dCwgY2hpbGQpKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgaWYgKG9mZnNldExlZnQgPD0gY2hpbGQudGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNlbGVjdGlvblBvaW50ID0ge1xuICAgICAgICAgICAgICBwYXRoOiBbLi4uYmxvY2tPZmZzZXQucGF0aCwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgICAgICAgICAgX2tleTogY2hpbGQuX2tleVxuICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgb2Zmc2V0OiBvZmZzZXRMZWZ0XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9mZnNldExlZnQgLT0gY2hpbGQudGV4dC5sZW5ndGg7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1NwYW4oY29udGV4dCwgY2hpbGQpKSB7XG4gICAgICAgICAgc2tpcHBlZElubGluZU9iamVjdCA9ICEwO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvZmZzZXRMZWZ0ID09PSAwICYmIHNlbGVjdGlvblBvaW50ICYmICFza2lwcGVkSW5saW5lT2JqZWN0KSB7XG4gICAgICAgICAgc2tpcHBlZElubGluZU9iamVjdCAmJiAoc2VsZWN0aW9uUG9pbnQgPSB7XG4gICAgICAgICAgICBwYXRoOiBbLi4uYmxvY2tPZmZzZXQucGF0aCwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgICAgICAgIF9rZXk6IGNoaWxkLl9rZXlcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldExlZnQgPiBjaGlsZC50ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgIG9mZnNldExlZnQgLT0gY2hpbGQudGV4dC5sZW5ndGg7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldExlZnQgPD0gY2hpbGQudGV4dC5sZW5ndGggJiYgKHNlbGVjdGlvblBvaW50ID0ge1xuICAgICAgICAgIHBhdGg6IFsuLi5ibG9ja09mZnNldC5wYXRoLCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgICAgIF9rZXk6IGNoaWxkLl9rZXlcbiAgICAgICAgICB9XSxcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldExlZnRcbiAgICAgICAgfSwgb2Zmc2V0TGVmdCAtPSBjaGlsZC50ZXh0Lmxlbmd0aCwgb2Zmc2V0TGVmdCAhPT0gMCkpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gIHJldHVybiBzZWxlY3Rpb25Qb2ludDtcbn1cbmZ1bmN0aW9uIHNwYW5TZWxlY3Rpb25Qb2ludFRvQmxvY2tPZmZzZXQoe1xuICBjb250ZXh0LFxuICBzZWxlY3Rpb25Qb2ludFxufSkge1xuICBsZXQgb2Zmc2V0ID0gMDtcbiAgY29uc3QgYmxvY2tLZXkgPSBnZXRCbG9ja0tleUZyb21TZWxlY3Rpb25Qb2ludChzZWxlY3Rpb25Qb2ludCksIHNwYW5LZXkgPSBnZXRDaGlsZEtleUZyb21TZWxlY3Rpb25Qb2ludChzZWxlY3Rpb25Qb2ludCk7XG4gIGlmICghKCFibG9ja0tleSB8fCAhc3BhbktleSkpIHtcbiAgICBmb3IgKGNvbnN0IGJsb2NrIG9mIGNvbnRleHQudmFsdWUpXG4gICAgICBpZiAoYmxvY2suX2tleSA9PT0gYmxvY2tLZXkgJiYgaXNUZXh0QmxvY2soY29udGV4dCwgYmxvY2spKSB7XG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgYmxvY2suY2hpbGRyZW4pXG4gICAgICAgICAgaWYgKGlzU3Bhbihjb250ZXh0LCBjaGlsZCkpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5fa2V5ID09PSBzcGFuS2V5KVxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHBhdGg6IFt7XG4gICAgICAgICAgICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBvZmZzZXQgKyBzZWxlY3Rpb25Qb2ludC5vZmZzZXRcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG9mZnNldCArPSBjaGlsZC50ZXh0Lmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGlzVHlwZWRPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiBpc1JlY29yZChvYmplY3QpICYmIHR5cGVvZiBvYmplY3QuX3R5cGUgPT0gXCJzdHJpbmdcIjtcbn1cbmZ1bmN0aW9uIGlzUmVjb3JkKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmICh0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgdmFsdWUgPT0gXCJmdW5jdGlvblwiKTtcbn1cbmZ1bmN0aW9uIHBhcnNlQmxvY2tzKHtcbiAgY29udGV4dCxcbiAgYmxvY2tzLFxuICBvcHRpb25zXG59KSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGJsb2NrcykgPyBibG9ja3MuZmxhdE1hcCgoYmxvY2spID0+IHtcbiAgICBjb25zdCBwYXJzZWRCbG9jayA9IHBhcnNlQmxvY2soe1xuICAgICAgY29udGV4dCxcbiAgICAgIGJsb2NrLFxuICAgICAgb3B0aW9uc1xuICAgIH0pO1xuICAgIHJldHVybiBwYXJzZWRCbG9jayA/IFtwYXJzZWRCbG9ja10gOiBbXTtcbiAgfSkgOiBbXTtcbn1cbmZ1bmN0aW9uIHBhcnNlQmxvY2soe1xuICBjb250ZXh0LFxuICBibG9jayxcbiAgb3B0aW9uc1xufSkge1xuICByZXR1cm4gcGFyc2VUZXh0QmxvY2soe1xuICAgIGJsb2NrLFxuICAgIGNvbnRleHQsXG4gICAgb3B0aW9uc1xuICB9KSA/PyBwYXJzZUJsb2NrT2JqZWN0KHtcbiAgICBibG9ja09iamVjdDogYmxvY2ssXG4gICAgY29udGV4dCxcbiAgICBvcHRpb25zXG4gIH0pO1xufVxuZnVuY3Rpb24gcGFyc2VCbG9ja09iamVjdCh7XG4gIGJsb2NrT2JqZWN0LFxuICBjb250ZXh0LFxuICBvcHRpb25zXG59KSB7XG4gIGlmICghaXNUeXBlZE9iamVjdChibG9ja09iamVjdCkpXG4gICAgcmV0dXJuO1xuICBjb25zdCBzY2hlbWFUeXBlID0gY29udGV4dC5zY2hlbWEuYmxvY2tPYmplY3RzLmZpbmQoKHtcbiAgICBuYW1lXG4gIH0pID0+IG5hbWUgPT09IGJsb2NrT2JqZWN0Ll90eXBlKTtcbiAgaWYgKHNjaGVtYVR5cGUpXG4gICAgcmV0dXJuIHBhcnNlT2JqZWN0KHtcbiAgICAgIG9iamVjdDogYmxvY2tPYmplY3QsXG4gICAgICBjb250ZXh0OiB7XG4gICAgICAgIGtleUdlbmVyYXRvcjogY29udGV4dC5rZXlHZW5lcmF0b3IsXG4gICAgICAgIHNjaGVtYVR5cGVcbiAgICAgIH0sXG4gICAgICBvcHRpb25zXG4gICAgfSk7XG59XG5mdW5jdGlvbiBpc0xpc3RCbG9jayhjb250ZXh0LCBibG9jaykge1xuICByZXR1cm4gaXNUZXh0QmxvY2soY29udGV4dCwgYmxvY2spICYmIGJsb2NrLmxldmVsICE9PSB2b2lkIDAgJiYgYmxvY2subGlzdEl0ZW0gIT09IHZvaWQgMDtcbn1cbmZ1bmN0aW9uIHBhcnNlVGV4dEJsb2NrKHtcbiAgYmxvY2ssXG4gIGNvbnRleHQsXG4gIG9wdGlvbnNcbn0pIHtcbiAgaWYgKCFpc1R5cGVkT2JqZWN0KGJsb2NrKSlcbiAgICByZXR1cm47XG4gIGNvbnN0IGN1c3RvbUZpZWxkcyA9IHt9O1xuICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhibG9jaykpXG4gICAga2V5ID09PSBcIl90eXBlXCIgfHwga2V5ID09PSBcIl9rZXlcIiB8fCBrZXkgPT09IFwiY2hpbGRyZW5cIiB8fCBrZXkgPT09IFwibWFya0RlZnNcIiB8fCBrZXkgPT09IFwic3R5bGVcIiB8fCBrZXkgPT09IFwibGlzdEl0ZW1cIiB8fCBrZXkgPT09IFwibGV2ZWxcIiB8fCAob3B0aW9ucy52YWxpZGF0ZUZpZWxkcyA/IGNvbnRleHQuc2NoZW1hLmJsb2NrLmZpZWxkcz8uc29tZSgoZmllbGQpID0+IGZpZWxkLm5hbWUgPT09IGtleSkgJiYgKGN1c3RvbUZpZWxkc1trZXldID0gYmxvY2tba2V5XSkgOiBjdXN0b21GaWVsZHNba2V5XSA9IGJsb2NrW2tleV0pO1xuICBpZiAoYmxvY2suX3R5cGUgIT09IGNvbnRleHQuc2NoZW1hLmJsb2NrLm5hbWUpXG4gICAgcmV0dXJuO1xuICBjb25zdCBfa2V5ID0gdHlwZW9mIGJsb2NrLl9rZXkgPT0gXCJzdHJpbmdcIiA/IGJsb2NrLl9rZXkgOiBjb250ZXh0LmtleUdlbmVyYXRvcigpLCB1bnBhcnNlZE1hcmtEZWZzID0gQXJyYXkuaXNBcnJheShibG9jay5tYXJrRGVmcykgPyBibG9jay5tYXJrRGVmcyA6IFtdLCBtYXJrRGVmS2V5TWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSwgbWFya0RlZnMgPSB1bnBhcnNlZE1hcmtEZWZzLmZsYXRNYXAoKG1hcmtEZWYpID0+IHtcbiAgICBpZiAoIWlzVHlwZWRPYmplY3QobWFya0RlZikpXG4gICAgICByZXR1cm4gW107XG4gICAgY29uc3Qgc2NoZW1hVHlwZSA9IGNvbnRleHQuc2NoZW1hLmFubm90YXRpb25zLmZpbmQoKHtcbiAgICAgIG5hbWVcbiAgICB9KSA9PiBuYW1lID09PSBtYXJrRGVmLl90eXBlKTtcbiAgICBpZiAoIXNjaGVtYVR5cGUpXG4gICAgICByZXR1cm4gW107XG4gICAgaWYgKHR5cGVvZiBtYXJrRGVmLl9rZXkgIT0gXCJzdHJpbmdcIilcbiAgICAgIHJldHVybiBbXTtcbiAgICBjb25zdCBwYXJzZWRBbm5vdGF0aW9uID0gcGFyc2VPYmplY3Qoe1xuICAgICAgb2JqZWN0OiBtYXJrRGVmLFxuICAgICAgY29udGV4dDoge1xuICAgICAgICBzY2hlbWFUeXBlLFxuICAgICAgICBrZXlHZW5lcmF0b3I6IGNvbnRleHQua2V5R2VuZXJhdG9yXG4gICAgICB9LFxuICAgICAgb3B0aW9uc1xuICAgIH0pO1xuICAgIHJldHVybiBwYXJzZWRBbm5vdGF0aW9uID8gKG1hcmtEZWZLZXlNYXAuc2V0KG1hcmtEZWYuX2tleSwgcGFyc2VkQW5ub3RhdGlvbi5fa2V5KSwgW3BhcnNlZEFubm90YXRpb25dKSA6IFtdO1xuICB9KSwgY2hpbGRyZW4gPSAoQXJyYXkuaXNBcnJheShibG9jay5jaGlsZHJlbikgPyBibG9jay5jaGlsZHJlbiA6IFtdKS5tYXAoKGNoaWxkKSA9PiBwYXJzZVNwYW4oe1xuICAgIHNwYW46IGNoaWxkLFxuICAgIGNvbnRleHQsXG4gICAgbWFya0RlZktleU1hcCxcbiAgICBvcHRpb25zXG4gIH0pID8/IHBhcnNlSW5saW5lT2JqZWN0KHtcbiAgICBpbmxpbmVPYmplY3Q6IGNoaWxkLFxuICAgIGNvbnRleHQsXG4gICAgb3B0aW9uc1xuICB9KSkuZmlsdGVyKChjaGlsZCkgPT4gY2hpbGQgIT09IHZvaWQgMCksIG1hcmtzID0gY2hpbGRyZW4uZmxhdE1hcCgoY2hpbGQpID0+IGNoaWxkLm1hcmtzID8/IFtdKSwgcGFyc2VkQmxvY2sgPSB7XG4gICAgX3R5cGU6IGNvbnRleHQuc2NoZW1hLmJsb2NrLm5hbWUsXG4gICAgX2tleSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4ubGVuZ3RoID4gMCA/IGNoaWxkcmVuIDogW3tcbiAgICAgIF9rZXk6IGNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgICBfdHlwZTogY29udGV4dC5zY2hlbWEuc3Bhbi5uYW1lLFxuICAgICAgdGV4dDogXCJcIixcbiAgICAgIG1hcmtzOiBbXVxuICAgIH1dLFxuICAgIG1hcmtEZWZzOiBvcHRpb25zLnJlbW92ZVVudXNlZE1hcmtEZWZzID8gbWFya0RlZnMuZmlsdGVyKChtYXJrRGVmKSA9PiBtYXJrcy5pbmNsdWRlcyhtYXJrRGVmLl9rZXkpKSA6IG1hcmtEZWZzLFxuICAgIC4uLmN1c3RvbUZpZWxkc1xuICB9O1xuICBpZiAodHlwZW9mIGJsb2NrLnN0eWxlID09IFwic3RyaW5nXCIgJiYgY29udGV4dC5zY2hlbWEuc3R5bGVzLmZpbmQoKHN0eWxlKSA9PiBzdHlsZS5uYW1lID09PSBibG9jay5zdHlsZSkpXG4gICAgcGFyc2VkQmxvY2suc3R5bGUgPSBibG9jay5zdHlsZTtcbiAgZWxzZSB7XG4gICAgY29uc3QgZGVmYXVsdFN0eWxlID0gY29udGV4dC5zY2hlbWEuc3R5bGVzLmF0KDApPy5uYW1lO1xuICAgIGRlZmF1bHRTdHlsZSAhPT0gdm9pZCAwID8gcGFyc2VkQmxvY2suc3R5bGUgPSBkZWZhdWx0U3R5bGUgOiBjb25zb2xlLmVycm9yKFwiRXhwZWN0ZWQgZGVmYXVsdCBzdHlsZVwiKTtcbiAgfVxuICByZXR1cm4gdHlwZW9mIGJsb2NrLmxpc3RJdGVtID09IFwic3RyaW5nXCIgJiYgY29udGV4dC5zY2hlbWEubGlzdHMuZmluZCgobGlzdCkgPT4gbGlzdC5uYW1lID09PSBibG9jay5saXN0SXRlbSkgJiYgKHBhcnNlZEJsb2NrLmxpc3RJdGVtID0gYmxvY2subGlzdEl0ZW0pLCB0eXBlb2YgYmxvY2subGV2ZWwgPT0gXCJudW1iZXJcIiAmJiAocGFyc2VkQmxvY2subGV2ZWwgPSBibG9jay5sZXZlbCksIHBhcnNlZEJsb2NrO1xufVxuZnVuY3Rpb24gcGFyc2VTcGFuKHtcbiAgc3BhbixcbiAgY29udGV4dCxcbiAgbWFya0RlZktleU1hcCxcbiAgb3B0aW9uc1xufSkge1xuICBpZiAoIWlzVHlwZWRPYmplY3Qoc3BhbikpXG4gICAgcmV0dXJuO1xuICBjb25zdCBjdXN0b21GaWVsZHMgPSB7fTtcbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoc3BhbikpXG4gICAga2V5ICE9PSBcIl90eXBlXCIgJiYga2V5ICE9PSBcIl9rZXlcIiAmJiBrZXkgIT09IFwidGV4dFwiICYmIGtleSAhPT0gXCJtYXJrc1wiICYmIChjdXN0b21GaWVsZHNba2V5XSA9IHNwYW5ba2V5XSk7XG4gIGlmIChzcGFuLl90eXBlICE9PSBjb250ZXh0LnNjaGVtYS5zcGFuLm5hbWUgfHwgc3Bhbi5fdHlwZSAhPT0gXCJzcGFuXCIpXG4gICAgcmV0dXJuO1xuICBjb25zdCBtYXJrcyA9IChBcnJheS5pc0FycmF5KHNwYW4ubWFya3MpID8gc3Bhbi5tYXJrcyA6IFtdKS5mbGF0TWFwKChtYXJrKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBtYXJrICE9IFwic3RyaW5nXCIpXG4gICAgICByZXR1cm4gW107XG4gICAgY29uc3QgbWFya0RlZktleSA9IG1hcmtEZWZLZXlNYXAuZ2V0KG1hcmspO1xuICAgIHJldHVybiBtYXJrRGVmS2V5ICE9PSB2b2lkIDAgPyBbbWFya0RlZktleV0gOiBjb250ZXh0LnNjaGVtYS5kZWNvcmF0b3JzLnNvbWUoKGRlY29yYXRvcikgPT4gZGVjb3JhdG9yLm5hbWUgPT09IG1hcmspID8gW21hcmtdIDogW107XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIF90eXBlOiBcInNwYW5cIixcbiAgICBfa2V5OiB0eXBlb2Ygc3Bhbi5fa2V5ID09IFwic3RyaW5nXCIgPyBzcGFuLl9rZXkgOiBjb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgIHRleHQ6IHR5cGVvZiBzcGFuLnRleHQgPT0gXCJzdHJpbmdcIiA/IHNwYW4udGV4dCA6IFwiXCIsXG4gICAgbWFya3MsXG4gICAgLi4ub3B0aW9ucy52YWxpZGF0ZUZpZWxkcyA/IHt9IDogY3VzdG9tRmllbGRzXG4gIH07XG59XG5mdW5jdGlvbiBwYXJzZUlubGluZU9iamVjdCh7XG4gIGlubGluZU9iamVjdCxcbiAgY29udGV4dCxcbiAgb3B0aW9uc1xufSkge1xuICBpZiAoIWlzVHlwZWRPYmplY3QoaW5saW5lT2JqZWN0KSlcbiAgICByZXR1cm47XG4gIGNvbnN0IHNjaGVtYVR5cGUgPSBjb250ZXh0LnNjaGVtYS5pbmxpbmVPYmplY3RzLmZpbmQoKHtcbiAgICBuYW1lXG4gIH0pID0+IG5hbWUgPT09IGlubGluZU9iamVjdC5fdHlwZSk7XG4gIGlmIChzY2hlbWFUeXBlKVxuICAgIHJldHVybiBwYXJzZU9iamVjdCh7XG4gICAgICBvYmplY3Q6IGlubGluZU9iamVjdCxcbiAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAga2V5R2VuZXJhdG9yOiBjb250ZXh0LmtleUdlbmVyYXRvcixcbiAgICAgICAgc2NoZW1hVHlwZVxuICAgICAgfSxcbiAgICAgIG9wdGlvbnNcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHBhcnNlQW5ub3RhdGlvbih7XG4gIGFubm90YXRpb24sXG4gIGNvbnRleHQsXG4gIG9wdGlvbnNcbn0pIHtcbiAgaWYgKCFpc1R5cGVkT2JqZWN0KGFubm90YXRpb24pKVxuICAgIHJldHVybjtcbiAgY29uc3Qgc2NoZW1hVHlwZSA9IGNvbnRleHQuc2NoZW1hLmFubm90YXRpb25zLmZpbmQoKHtcbiAgICBuYW1lXG4gIH0pID0+IG5hbWUgPT09IGFubm90YXRpb24uX3R5cGUpO1xuICBpZiAoc2NoZW1hVHlwZSlcbiAgICByZXR1cm4gcGFyc2VPYmplY3Qoe1xuICAgICAgb2JqZWN0OiBhbm5vdGF0aW9uLFxuICAgICAgY29udGV4dDoge1xuICAgICAgICBrZXlHZW5lcmF0b3I6IGNvbnRleHQua2V5R2VuZXJhdG9yLFxuICAgICAgICBzY2hlbWFUeXBlXG4gICAgICB9LFxuICAgICAgb3B0aW9uc1xuICAgIH0pO1xufVxuZnVuY3Rpb24gcGFyc2VPYmplY3Qoe1xuICBvYmplY3QsXG4gIGNvbnRleHQsXG4gIG9wdGlvbnNcbn0pIHtcbiAgY29uc3Qge1xuICAgIF90eXBlLFxuICAgIF9rZXksXG4gICAgLi4uY3VzdG9tRmllbGRzXG4gIH0gPSBvYmplY3QsIHZhbHVlcyA9IG9wdGlvbnMudmFsaWRhdGVGaWVsZHMgPyBjb250ZXh0LnNjaGVtYVR5cGUuZmllbGRzLnJlZHVjZSgoZmllbGRWYWx1ZXMsIGZpZWxkKSA9PiB7XG4gICAgY29uc3QgZmllbGRWYWx1ZSA9IG9iamVjdFtmaWVsZC5uYW1lXTtcbiAgICByZXR1cm4gZmllbGRWYWx1ZSAhPT0gdm9pZCAwICYmIChmaWVsZFZhbHVlc1tmaWVsZC5uYW1lXSA9IGZpZWxkVmFsdWUpLCBmaWVsZFZhbHVlcztcbiAgfSwge30pIDogY3VzdG9tRmllbGRzO1xuICByZXR1cm4ge1xuICAgIF90eXBlOiBjb250ZXh0LnNjaGVtYVR5cGUubmFtZSxcbiAgICBfa2V5OiB0eXBlb2Ygb2JqZWN0Ll9rZXkgPT0gXCJzdHJpbmdcIiA/IG9iamVjdC5fa2V5IDogY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICAuLi52YWx1ZXNcbiAgfTtcbn1cbmNvbnN0IGRlZmF1bHRLZXlHZW5lcmF0b3IgPSAoKSA9PiByYW5kb21LZXkoMTIpLCBnZXRCeXRlSGV4VGFibGUgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IHtcbiAgbGV0IHRhYmxlO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGlmICh0YWJsZSlcbiAgICAgIHJldHVybiB0YWJsZTtcbiAgICB0YWJsZSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyArK2kpXG4gICAgICB0YWJsZVtpXSA9IChpICsgMjU2KS50b1N0cmluZygxNikuc2xpY2UoMSk7XG4gICAgcmV0dXJuIHRhYmxlO1xuICB9O1xufSkoKTtcbmZ1bmN0aW9uIHdoYXR3Z1JORyhsZW5ndGggPSAxNikge1xuICBjb25zdCBybmRzOCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gIHJldHVybiBnZXRSYW5kb21WYWx1ZXMocm5kczgpLCBybmRzODtcbn1cbmZ1bmN0aW9uIHJhbmRvbUtleShsZW5ndGgpIHtcbiAgY29uc3QgdGFibGUgPSBnZXRCeXRlSGV4VGFibGUoKTtcbiAgcmV0dXJuIHdoYXR3Z1JORyhsZW5ndGgpLnJlZHVjZSgoc3RyLCBuKSA9PiBzdHIgKyB0YWJsZVtuXSwgXCJcIikuc2xpY2UoMCwgbGVuZ3RoKTtcbn1cbmZ1bmN0aW9uIGdldFNlbGVjdGlvbkVuZFBvaW50KHNlbGVjdGlvbikge1xuICByZXR1cm4gc2VsZWN0aW9uID8gc2VsZWN0aW9uLmJhY2t3YXJkID8gc2VsZWN0aW9uLmFuY2hvciA6IHNlbGVjdGlvbi5mb2N1cyA6IG51bGw7XG59XG5mdW5jdGlvbiBnZXRTZWxlY3Rpb25TdGFydFBvaW50KHNlbGVjdGlvbikge1xuICByZXR1cm4gc2VsZWN0aW9uID8gc2VsZWN0aW9uLmJhY2t3YXJkID8gc2VsZWN0aW9uLmZvY3VzIDogc2VsZWN0aW9uLmFuY2hvciA6IG51bGw7XG59XG5mdW5jdGlvbiBzbGljZUJsb2Nrcyh7XG4gIGNvbnRleHQsXG4gIGJsb2Nrc1xufSkge1xuICBjb25zdCBzbGljZSA9IFtdO1xuICBpZiAoIWNvbnRleHQuc2VsZWN0aW9uKVxuICAgIHJldHVybiBzbGljZTtcbiAgbGV0IHN0YXJ0QmxvY2s7XG4gIGNvbnN0IG1pZGRsZUJsb2NrcyA9IFtdO1xuICBsZXQgZW5kQmxvY2s7XG4gIGNvbnN0IHN0YXJ0UG9pbnQgPSBnZXRTZWxlY3Rpb25TdGFydFBvaW50KGNvbnRleHQuc2VsZWN0aW9uKSwgZW5kUG9pbnQgPSBnZXRTZWxlY3Rpb25FbmRQb2ludChjb250ZXh0LnNlbGVjdGlvbiksIHN0YXJ0QmxvY2tLZXkgPSBnZXRCbG9ja0tleUZyb21TZWxlY3Rpb25Qb2ludChzdGFydFBvaW50KSwgc3RhcnRDaGlsZEtleSA9IGdldENoaWxkS2V5RnJvbVNlbGVjdGlvblBvaW50KHN0YXJ0UG9pbnQpLCBlbmRCbG9ja0tleSA9IGdldEJsb2NrS2V5RnJvbVNlbGVjdGlvblBvaW50KGVuZFBvaW50KSwgZW5kQ2hpbGRLZXkgPSBnZXRDaGlsZEtleUZyb21TZWxlY3Rpb25Qb2ludChlbmRQb2ludCk7XG4gIGlmICghc3RhcnRCbG9ja0tleSB8fCAhZW5kQmxvY2tLZXkpXG4gICAgcmV0dXJuIHNsaWNlO1xuICBmb3IgKGNvbnN0IGJsb2NrIG9mIGJsb2Nrcykge1xuICAgIGlmICghaXNUZXh0QmxvY2soY29udGV4dCwgYmxvY2spICYmIGJsb2NrLl9rZXkgPT09IHN0YXJ0QmxvY2tLZXkgJiYgYmxvY2suX2tleSA9PT0gZW5kQmxvY2tLZXkpIHtcbiAgICAgIHN0YXJ0QmxvY2sgPSBibG9jaztcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoYmxvY2suX2tleSA9PT0gc3RhcnRCbG9ja0tleSkge1xuICAgICAgaWYgKCFpc1RleHRCbG9jayhjb250ZXh0LCBibG9jaykpIHtcbiAgICAgICAgc3RhcnRCbG9jayA9IGJsb2NrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydENoaWxkS2V5KSB7XG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgYmxvY2suY2hpbGRyZW4pIHtcbiAgICAgICAgICBpZiAoY2hpbGQuX2tleSA9PT0gc3RhcnRDaGlsZEtleSkge1xuICAgICAgICAgICAgaWYgKGlzU3Bhbihjb250ZXh0LCBjaGlsZCkpIHtcbiAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IGNoaWxkLl9rZXkgPT09IGVuZENoaWxkS2V5ID8gY2hpbGQudGV4dC5zbGljZShzdGFydFBvaW50Lm9mZnNldCwgZW5kUG9pbnQub2Zmc2V0KSA6IGNoaWxkLnRleHQuc2xpY2Uoc3RhcnRQb2ludC5vZmZzZXQpO1xuICAgICAgICAgICAgICBzdGFydEJsb2NrID0ge1xuICAgICAgICAgICAgICAgIC4uLmJsb2NrLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICAgICAgICAgICAgLi4uY2hpbGQsXG4gICAgICAgICAgICAgICAgICB0ZXh0XG4gICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICBzdGFydEJsb2NrID0ge1xuICAgICAgICAgICAgICAgIC4uLmJsb2NrLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbY2hpbGRdXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoYmxvY2suX2tleSA9PT0gZW5kQmxvY2tLZXkgJiYgc3RhcnRDaGlsZEtleSA9PT0gZW5kQ2hpbGRLZXkpXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdGFydEJsb2NrICYmIGlzVGV4dEJsb2NrKGNvbnRleHQsIHN0YXJ0QmxvY2spICYmIChlbmRDaGlsZEtleSAmJiBjaGlsZC5fa2V5ID09PSBlbmRDaGlsZEtleSAmJiBpc1NwYW4oY29udGV4dCwgY2hpbGQpID8gc3RhcnRCbG9jay5jaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgICAgIC4uLmNoaWxkLFxuICAgICAgICAgICAgdGV4dDogY2hpbGQudGV4dC5zbGljZSgwLCBlbmRQb2ludC5vZmZzZXQpXG4gICAgICAgICAgfSkgOiBzdGFydEJsb2NrLmNoaWxkcmVuLnB1c2goY2hpbGQpLCBibG9jay5fa2V5ID09PSBlbmRCbG9ja0tleSAmJiBlbmRDaGlsZEtleSAmJiBjaGlsZC5fa2V5ID09PSBlbmRDaGlsZEtleSkpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRCbG9ja0tleSA9PT0gZW5kQmxvY2tLZXkpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0QmxvY2sgPSBibG9jaywgc3RhcnRCbG9ja0tleSA9PT0gZW5kQmxvY2tLZXkpXG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoYmxvY2suX2tleSA9PT0gZW5kQmxvY2tLZXkpIHtcbiAgICAgIGlmICghaXNUZXh0QmxvY2soY29udGV4dCwgYmxvY2spKSB7XG4gICAgICAgIGVuZEJsb2NrID0gYmxvY2s7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGVuZENoaWxkS2V5KSB7XG4gICAgICAgIGVuZEJsb2NrID0ge1xuICAgICAgICAgIC4uLmJsb2NrLFxuICAgICAgICAgIGNoaWxkcmVuOiBbXVxuICAgICAgICB9O1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGJsb2NrLmNoaWxkcmVuKVxuICAgICAgICAgIGlmIChlbmRCbG9jayAmJiBpc1RleHRCbG9jayhjb250ZXh0LCBlbmRCbG9jaykpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5fa2V5ID09PSBlbmRDaGlsZEtleSAmJiBpc1NwYW4oY29udGV4dCwgY2hpbGQpKSB7XG4gICAgICAgICAgICAgIGVuZEJsb2NrLmNoaWxkcmVuLnB1c2goe1xuICAgICAgICAgICAgICAgIC4uLmNoaWxkLFxuICAgICAgICAgICAgICAgIHRleHQ6IGNoaWxkLnRleHQuc2xpY2UoMCwgZW5kUG9pbnQub2Zmc2V0KVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZW5kQmxvY2suY2hpbGRyZW4ucHVzaChjaGlsZCksIGVuZENoaWxkS2V5ICYmIGNoaWxkLl9rZXkgPT09IGVuZENoaWxkS2V5KVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZW5kQmxvY2sgPSBibG9jaztcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBzdGFydEJsb2NrICYmIG1pZGRsZUJsb2Nrcy5wdXNoKHBhcnNlQmxvY2soe1xuICAgICAgY29udGV4dDoge1xuICAgICAgICAuLi5jb250ZXh0LFxuICAgICAgICBrZXlHZW5lcmF0b3I6IGRlZmF1bHRLZXlHZW5lcmF0b3JcbiAgICAgIH0sXG4gICAgICBibG9jayxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgcmVtb3ZlVW51c2VkTWFya0RlZnM6ICEwLFxuICAgICAgICB2YWxpZGF0ZUZpZWxkczogITFcbiAgICAgIH1cbiAgICB9KSA/PyBibG9jayk7XG4gIH1cbiAgY29uc3QgcGFyc2VkU3RhcnRCbG9jayA9IHN0YXJ0QmxvY2sgPyBwYXJzZUJsb2NrKHtcbiAgICBjb250ZXh0OiB7XG4gICAgICAuLi5jb250ZXh0LFxuICAgICAga2V5R2VuZXJhdG9yOiBkZWZhdWx0S2V5R2VuZXJhdG9yXG4gICAgfSxcbiAgICBibG9jazogc3RhcnRCbG9jayxcbiAgICBvcHRpb25zOiB7XG4gICAgICByZW1vdmVVbnVzZWRNYXJrRGVmczogITAsXG4gICAgICB2YWxpZGF0ZUZpZWxkczogITFcbiAgICB9XG4gIH0pIDogdm9pZCAwLCBwYXJzZWRFbmRCbG9jayA9IGVuZEJsb2NrID8gcGFyc2VCbG9jayh7XG4gICAgY29udGV4dDoge1xuICAgICAgLi4uY29udGV4dCxcbiAgICAgIGtleUdlbmVyYXRvcjogZGVmYXVsdEtleUdlbmVyYXRvclxuICAgIH0sXG4gICAgYmxvY2s6IGVuZEJsb2NrLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIHJlbW92ZVVudXNlZE1hcmtEZWZzOiAhMCxcbiAgICAgIHZhbGlkYXRlRmllbGRzOiAhMVxuICAgIH1cbiAgfSkgOiB2b2lkIDA7XG4gIHJldHVybiBbLi4ucGFyc2VkU3RhcnRCbG9jayA/IFtwYXJzZWRTdGFydEJsb2NrXSA6IFtdLCAuLi5taWRkbGVCbG9ja3MsIC4uLnBhcnNlZEVuZEJsb2NrID8gW3BhcnNlZEVuZEJsb2NrXSA6IFtdXTtcbn1cbmZ1bmN0aW9uIGdldFRleHRCbG9ja1RleHQoYmxvY2spIHtcbiAgcmV0dXJuIGJsb2NrLmNoaWxkcmVuLm1hcCgoY2hpbGQpID0+IGNoaWxkLnRleHQgPz8gXCJcIikuam9pbihcIlwiKTtcbn1cbmV4cG9ydCB7XG4gIGJsb2NrT2Zmc2V0VG9TcGFuU2VsZWN0aW9uUG9pbnQsXG4gIGRlZmF1bHRLZXlHZW5lcmF0b3IsXG4gIGdldEJsb2NrS2V5RnJvbVNlbGVjdGlvblBvaW50LFxuICBnZXRCbG9ja1N0YXJ0UG9pbnQsXG4gIGdldENoaWxkS2V5RnJvbVNlbGVjdGlvblBvaW50LFxuICBnZXRTZWxlY3Rpb25FbmRQb2ludCxcbiAgZ2V0U2VsZWN0aW9uU3RhcnRQb2ludCxcbiAgZ2V0VGV4dEJsb2NrVGV4dCxcbiAgaXNLZXllZFNlZ21lbnQsXG4gIGlzTGlzdEJsb2NrLFxuICBpc1R5cGVkT2JqZWN0LFxuICBwYXJzZUFubm90YXRpb24sXG4gIHBhcnNlQmxvY2ssXG4gIHBhcnNlQmxvY2tzLFxuICBwYXJzZUlubGluZU9iamVjdCxcbiAgcGFyc2VTcGFuLFxuICBzbGljZUJsb2NrcyxcbiAgc3BhblNlbGVjdGlvblBvaW50VG9CbG9ja09mZnNldFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuZ2V0LXRleHQtYmxvY2stdGV4dC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.get-text-block-text.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBlockEndPoint: () => (/* binding */ getBlockEndPoint),\n/* harmony export */   isEmptyTextBlock: () => (/* binding */ isEmptyTextBlock),\n/* harmony export */   isEqualSelectionPoints: () => (/* binding */ isEqualSelectionPoints),\n/* harmony export */   isSelectionCollapsed: () => (/* binding */ isSelectionCollapsed)\n/* harmony export */ });\n/* harmony import */ var _portabletext_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @portabletext/schema */ \"(ssr)/../node_modules/@portabletext/schema/dist/index.js\");\n/* harmony import */ var _util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.get-text-block-text.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.get-text-block-text.js\");\n\n\nfunction getBlockEndPoint({\n  context,\n  block\n}) {\n  if ((0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_0__.isTextBlock)(context, block.node)) {\n    const lastChild = block.node.children[block.node.children.length - 1];\n    if (lastChild)\n      return {\n        path: [...block.path, \"children\", {\n          _key: lastChild._key\n        }],\n        offset: (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_0__.isSpan)(context, lastChild) ? lastChild.text.length : 0\n      };\n  }\n  return {\n    path: block.path,\n    offset: 0\n  };\n}\nfunction isSelectionCollapsed(selection) {\n  return selection ? JSON.stringify(selection.anchor.path) === JSON.stringify(selection.focus.path) && selection.anchor.offset === selection.focus.offset : !1;\n}\nfunction isEqualSelectionPoints(a, b) {\n  return a.offset === b.offset && JSON.stringify(a.path) === JSON.stringify(b.path);\n}\nfunction isEmptyTextBlock(context, block) {\n  if (!(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_0__.isTextBlock)(context, block))\n    return !1;\n  const onlyText = block.children.every((child) => (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_0__.isSpan)(context, child)), blockText = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_1__.getTextBlockText)(block);\n  return onlyText && blockText === \"\";\n}\n\n//# sourceMappingURL=util.is-empty-text-block.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0Bwb3J0YWJsZXRleHQvZWRpdG9yL2xpYi9fY2h1bmtzLWVzL3V0aWwuaXMtZW1wdHktdGV4dC1ibG9jay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBMkQ7QUFDTTtBQUNqRTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsTUFBTSxpRUFBVztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULGdCQUFnQiw0REFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxpRUFBVztBQUNsQjtBQUNBLG1EQUFtRCw0REFBTSwrQkFBK0IsOEVBQWdCO0FBQ3hHO0FBQ0E7QUFNRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvR2Fsb2NrL0NTL2JlaG9tZS1zaXRlL25vZGVfbW9kdWxlcy9AcG9ydGFibGV0ZXh0L2VkaXRvci9saWIvX2NodW5rcy1lcy91dGlsLmlzLWVtcHR5LXRleHQtYmxvY2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNUZXh0QmxvY2ssIGlzU3BhbiB9IGZyb20gXCJAcG9ydGFibGV0ZXh0L3NjaGVtYVwiO1xuaW1wb3J0IHsgZ2V0VGV4dEJsb2NrVGV4dCB9IGZyb20gXCIuL3V0aWwuZ2V0LXRleHQtYmxvY2stdGV4dC5qc1wiO1xuZnVuY3Rpb24gZ2V0QmxvY2tFbmRQb2ludCh7XG4gIGNvbnRleHQsXG4gIGJsb2NrXG59KSB7XG4gIGlmIChpc1RleHRCbG9jayhjb250ZXh0LCBibG9jay5ub2RlKSkge1xuICAgIGNvbnN0IGxhc3RDaGlsZCA9IGJsb2NrLm5vZGUuY2hpbGRyZW5bYmxvY2subm9kZS5jaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgICBpZiAobGFzdENoaWxkKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aDogWy4uLmJsb2NrLnBhdGgsIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICAgIF9rZXk6IGxhc3RDaGlsZC5fa2V5XG4gICAgICAgIH1dLFxuICAgICAgICBvZmZzZXQ6IGlzU3Bhbihjb250ZXh0LCBsYXN0Q2hpbGQpID8gbGFzdENoaWxkLnRleHQubGVuZ3RoIDogMFxuICAgICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHBhdGg6IGJsb2NrLnBhdGgsXG4gICAgb2Zmc2V0OiAwXG4gIH07XG59XG5mdW5jdGlvbiBpc1NlbGVjdGlvbkNvbGxhcHNlZChzZWxlY3Rpb24pIHtcbiAgcmV0dXJuIHNlbGVjdGlvbiA/IEpTT04uc3RyaW5naWZ5KHNlbGVjdGlvbi5hbmNob3IucGF0aCkgPT09IEpTT04uc3RyaW5naWZ5KHNlbGVjdGlvbi5mb2N1cy5wYXRoKSAmJiBzZWxlY3Rpb24uYW5jaG9yLm9mZnNldCA9PT0gc2VsZWN0aW9uLmZvY3VzLm9mZnNldCA6ICExO1xufVxuZnVuY3Rpb24gaXNFcXVhbFNlbGVjdGlvblBvaW50cyhhLCBiKSB7XG4gIHJldHVybiBhLm9mZnNldCA9PT0gYi5vZmZzZXQgJiYgSlNPTi5zdHJpbmdpZnkoYS5wYXRoKSA9PT0gSlNPTi5zdHJpbmdpZnkoYi5wYXRoKTtcbn1cbmZ1bmN0aW9uIGlzRW1wdHlUZXh0QmxvY2soY29udGV4dCwgYmxvY2spIHtcbiAgaWYgKCFpc1RleHRCbG9jayhjb250ZXh0LCBibG9jaykpXG4gICAgcmV0dXJuICExO1xuICBjb25zdCBvbmx5VGV4dCA9IGJsb2NrLmNoaWxkcmVuLmV2ZXJ5KChjaGlsZCkgPT4gaXNTcGFuKGNvbnRleHQsIGNoaWxkKSksIGJsb2NrVGV4dCA9IGdldFRleHRCbG9ja1RleHQoYmxvY2spO1xuICByZXR1cm4gb25seVRleHQgJiYgYmxvY2tUZXh0ID09PSBcIlwiO1xufVxuZXhwb3J0IHtcbiAgZ2V0QmxvY2tFbmRQb2ludCxcbiAgaXNFbXB0eVRleHRCbG9jayxcbiAgaXNFcXVhbFNlbGVjdGlvblBvaW50cyxcbiAgaXNTZWxlY3Rpb25Db2xsYXBzZWRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmlzLWVtcHR5LXRleHQtYmxvY2suanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.merge-text-blocks.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/@portabletext/editor/lib/_chunks-es/util.merge-text-blocks.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeTextBlocks: () => (/* binding */ mergeTextBlocks)\n/* harmony export */ });\n/* harmony import */ var _portabletext_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @portabletext/schema */ \"(ssr)/../node_modules/@portabletext/schema/dist/index.js\");\n/* harmony import */ var _util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.get-text-block-text.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.get-text-block-text.js\");\n\n\nfunction mergeTextBlocks({\n  context,\n  targetBlock,\n  incomingBlock\n}) {\n  const parsedIncomingBlock = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__.parseBlock)({\n    context,\n    block: incomingBlock,\n    options: {\n      removeUnusedMarkDefs: !0,\n      validateFields: !1\n    }\n  });\n  return !parsedIncomingBlock || !(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(context, parsedIncomingBlock) ? targetBlock : {\n    ...targetBlock,\n    children: [...targetBlock.children, ...parsedIncomingBlock.children],\n    markDefs: [...targetBlock.markDefs ?? [], ...parsedIncomingBlock.markDefs ?? []]\n  };\n}\n\n//# sourceMappingURL=util.merge-text-blocks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0Bwb3J0YWJsZXRleHQvZWRpdG9yL2xpYi9fY2h1bmtzLWVzL3V0aWwubWVyZ2UtdGV4dC1ibG9ja3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1EO0FBQ1E7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsOEJBQThCLHdFQUFVO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxrQ0FBa0MsaUVBQVc7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9HYWxvY2svQ1MvYmVob21lLXNpdGUvbm9kZV9tb2R1bGVzL0Bwb3J0YWJsZXRleHQvZWRpdG9yL2xpYi9fY2h1bmtzLWVzL3V0aWwubWVyZ2UtdGV4dC1ibG9ja3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNUZXh0QmxvY2sgfSBmcm9tIFwiQHBvcnRhYmxldGV4dC9zY2hlbWFcIjtcbmltcG9ydCB7IHBhcnNlQmxvY2sgfSBmcm9tIFwiLi91dGlsLmdldC10ZXh0LWJsb2NrLXRleHQuanNcIjtcbmZ1bmN0aW9uIG1lcmdlVGV4dEJsb2Nrcyh7XG4gIGNvbnRleHQsXG4gIHRhcmdldEJsb2NrLFxuICBpbmNvbWluZ0Jsb2NrXG59KSB7XG4gIGNvbnN0IHBhcnNlZEluY29taW5nQmxvY2sgPSBwYXJzZUJsb2NrKHtcbiAgICBjb250ZXh0LFxuICAgIGJsb2NrOiBpbmNvbWluZ0Jsb2NrLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIHJlbW92ZVVudXNlZE1hcmtEZWZzOiAhMCxcbiAgICAgIHZhbGlkYXRlRmllbGRzOiAhMVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiAhcGFyc2VkSW5jb21pbmdCbG9jayB8fCAhaXNUZXh0QmxvY2soY29udGV4dCwgcGFyc2VkSW5jb21pbmdCbG9jaykgPyB0YXJnZXRCbG9jayA6IHtcbiAgICAuLi50YXJnZXRCbG9jayxcbiAgICBjaGlsZHJlbjogWy4uLnRhcmdldEJsb2NrLmNoaWxkcmVuLCAuLi5wYXJzZWRJbmNvbWluZ0Jsb2NrLmNoaWxkcmVuXSxcbiAgICBtYXJrRGVmczogWy4uLnRhcmdldEJsb2NrLm1hcmtEZWZzID8/IFtdLCAuLi5wYXJzZWRJbmNvbWluZ0Jsb2NrLm1hcmtEZWZzID8/IFtdXVxuICB9O1xufVxuZXhwb3J0IHtcbiAgbWVyZ2VUZXh0QmxvY2tzXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5tZXJnZS10ZXh0LWJsb2Nrcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.merge-text-blocks.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.slice-text-block.js":
/*!************************************************************************************!*\
  !*** ../node_modules/@portabletext/editor/lib/_chunks-es/util.slice-text-block.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   selectionPointToBlockOffset: () => (/* binding */ selectionPointToBlockOffset),\n/* harmony export */   sliceTextBlock: () => (/* binding */ sliceTextBlock)\n/* harmony export */ });\n/* harmony import */ var _util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.child-selection-point-to-block-offset.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.child-selection-point-to-block-offset.js\");\n/* harmony import */ var _util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.get-text-block-text.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.get-text-block-text.js\");\n/* harmony import */ var _portabletext_schema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @portabletext/schema */ \"(ssr)/../node_modules/@portabletext/schema/dist/index.js\");\n\n\n\nfunction selectionPointToBlockOffset({\n  context,\n  selectionPoint\n}) {\n  const blockKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__.getBlockKeyFromSelectionPoint)(selectionPoint);\n  return selectionPoint.path.length === 1 && blockKey !== void 0 ? {\n    path: [{\n      _key: blockKey\n    }],\n    offset: selectionPoint.offset\n  } : (0,_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_1__.childSelectionPointToBlockOffset)({\n    context,\n    selectionPoint\n  });\n}\nfunction sliceTextBlock({\n  context,\n  block\n}) {\n  const startPoint = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionStartPoint)(context.selection), endPoint = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionEndPoint)(context.selection);\n  if (!startPoint || !endPoint)\n    return block;\n  const startBlockKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__.getBlockKeyFromSelectionPoint)(startPoint), endBlockKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__.getBlockKeyFromSelectionPoint)(endPoint);\n  if (startBlockKey !== endBlockKey || startBlockKey !== block._key)\n    return block;\n  const startChildKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__.getChildKeyFromSelectionPoint)(startPoint), endChildKey = (0,_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_0__.getChildKeyFromSelectionPoint)(endPoint);\n  if (!startChildKey || !endChildKey)\n    return block;\n  let startChildFound = !1;\n  const children = [];\n  for (const child of block.children) {\n    if (child._key === startChildKey) {\n      if (startChildFound = !0, (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_2__.isSpan)(context, child)) {\n        const text = child._key === endChildKey ? child.text.slice(startPoint.offset, endPoint.offset) : child.text.slice(startPoint.offset);\n        children.push({\n          ...child,\n          text\n        });\n      } else\n        children.push(child);\n      if (startChildKey === endChildKey)\n        break;\n      continue;\n    }\n    if (child._key === endChildKey) {\n      (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_2__.isSpan)(context, child) ? children.push({\n        ...child,\n        text: child.text.slice(0, endPoint.offset)\n      }) : children.push(child);\n      break;\n    }\n    startChildFound && children.push(child);\n  }\n  return {\n    ...block,\n    children\n  };\n}\n\n//# sourceMappingURL=util.slice-text-block.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0Bwb3J0YWJsZXRleHQvZWRpdG9yL2xpYi9fY2h1bmtzLWVzL3V0aWwuc2xpY2UtdGV4dC1ibG9jay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFtRztBQUN3RDtBQUM3RztBQUM5QztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsbUJBQW1CLDJGQUE2QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxJQUFJLEVBQUUsZ0hBQWdDO0FBQ3RDO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QscUJBQXFCLG9GQUFzQixnQ0FBZ0Msa0ZBQW9CO0FBQy9GO0FBQ0E7QUFDQSx3QkFBd0IsMkZBQTZCLDRCQUE0QiwyRkFBNkI7QUFDOUc7QUFDQTtBQUNBLHdCQUF3QiwyRkFBNkIsNEJBQTRCLDJGQUE2QjtBQUM5RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsNERBQU07QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sNERBQU07QUFDWjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9HYWxvY2svQ1MvYmVob21lLXNpdGUvbm9kZV9tb2R1bGVzL0Bwb3J0YWJsZXRleHQvZWRpdG9yL2xpYi9fY2h1bmtzLWVzL3V0aWwuc2xpY2UtdGV4dC1ibG9jay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjaGlsZFNlbGVjdGlvblBvaW50VG9CbG9ja09mZnNldCB9IGZyb20gXCIuL3V0aWwuY2hpbGQtc2VsZWN0aW9uLXBvaW50LXRvLWJsb2NrLW9mZnNldC5qc1wiO1xuaW1wb3J0IHsgZ2V0QmxvY2tLZXlGcm9tU2VsZWN0aW9uUG9pbnQsIGdldFNlbGVjdGlvblN0YXJ0UG9pbnQsIGdldFNlbGVjdGlvbkVuZFBvaW50LCBnZXRDaGlsZEtleUZyb21TZWxlY3Rpb25Qb2ludCB9IGZyb20gXCIuL3V0aWwuZ2V0LXRleHQtYmxvY2stdGV4dC5qc1wiO1xuaW1wb3J0IHsgaXNTcGFuIH0gZnJvbSBcIkBwb3J0YWJsZXRleHQvc2NoZW1hXCI7XG5mdW5jdGlvbiBzZWxlY3Rpb25Qb2ludFRvQmxvY2tPZmZzZXQoe1xuICBjb250ZXh0LFxuICBzZWxlY3Rpb25Qb2ludFxufSkge1xuICBjb25zdCBibG9ja0tleSA9IGdldEJsb2NrS2V5RnJvbVNlbGVjdGlvblBvaW50KHNlbGVjdGlvblBvaW50KTtcbiAgcmV0dXJuIHNlbGVjdGlvblBvaW50LnBhdGgubGVuZ3RoID09PSAxICYmIGJsb2NrS2V5ICE9PSB2b2lkIDAgPyB7XG4gICAgcGF0aDogW3tcbiAgICAgIF9rZXk6IGJsb2NrS2V5XG4gICAgfV0sXG4gICAgb2Zmc2V0OiBzZWxlY3Rpb25Qb2ludC5vZmZzZXRcbiAgfSA6IGNoaWxkU2VsZWN0aW9uUG9pbnRUb0Jsb2NrT2Zmc2V0KHtcbiAgICBjb250ZXh0LFxuICAgIHNlbGVjdGlvblBvaW50XG4gIH0pO1xufVxuZnVuY3Rpb24gc2xpY2VUZXh0QmxvY2soe1xuICBjb250ZXh0LFxuICBibG9ja1xufSkge1xuICBjb25zdCBzdGFydFBvaW50ID0gZ2V0U2VsZWN0aW9uU3RhcnRQb2ludChjb250ZXh0LnNlbGVjdGlvbiksIGVuZFBvaW50ID0gZ2V0U2VsZWN0aW9uRW5kUG9pbnQoY29udGV4dC5zZWxlY3Rpb24pO1xuICBpZiAoIXN0YXJ0UG9pbnQgfHwgIWVuZFBvaW50KVxuICAgIHJldHVybiBibG9jaztcbiAgY29uc3Qgc3RhcnRCbG9ja0tleSA9IGdldEJsb2NrS2V5RnJvbVNlbGVjdGlvblBvaW50KHN0YXJ0UG9pbnQpLCBlbmRCbG9ja0tleSA9IGdldEJsb2NrS2V5RnJvbVNlbGVjdGlvblBvaW50KGVuZFBvaW50KTtcbiAgaWYgKHN0YXJ0QmxvY2tLZXkgIT09IGVuZEJsb2NrS2V5IHx8IHN0YXJ0QmxvY2tLZXkgIT09IGJsb2NrLl9rZXkpXG4gICAgcmV0dXJuIGJsb2NrO1xuICBjb25zdCBzdGFydENoaWxkS2V5ID0gZ2V0Q2hpbGRLZXlGcm9tU2VsZWN0aW9uUG9pbnQoc3RhcnRQb2ludCksIGVuZENoaWxkS2V5ID0gZ2V0Q2hpbGRLZXlGcm9tU2VsZWN0aW9uUG9pbnQoZW5kUG9pbnQpO1xuICBpZiAoIXN0YXJ0Q2hpbGRLZXkgfHwgIWVuZENoaWxkS2V5KVxuICAgIHJldHVybiBibG9jaztcbiAgbGV0IHN0YXJ0Q2hpbGRGb3VuZCA9ICExO1xuICBjb25zdCBjaGlsZHJlbiA9IFtdO1xuICBmb3IgKGNvbnN0IGNoaWxkIG9mIGJsb2NrLmNoaWxkcmVuKSB7XG4gICAgaWYgKGNoaWxkLl9rZXkgPT09IHN0YXJ0Q2hpbGRLZXkpIHtcbiAgICAgIGlmIChzdGFydENoaWxkRm91bmQgPSAhMCwgaXNTcGFuKGNvbnRleHQsIGNoaWxkKSkge1xuICAgICAgICBjb25zdCB0ZXh0ID0gY2hpbGQuX2tleSA9PT0gZW5kQ2hpbGRLZXkgPyBjaGlsZC50ZXh0LnNsaWNlKHN0YXJ0UG9pbnQub2Zmc2V0LCBlbmRQb2ludC5vZmZzZXQpIDogY2hpbGQudGV4dC5zbGljZShzdGFydFBvaW50Lm9mZnNldCk7XG4gICAgICAgIGNoaWxkcmVuLnB1c2goe1xuICAgICAgICAgIC4uLmNoaWxkLFxuICAgICAgICAgIHRleHRcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2VcbiAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICBpZiAoc3RhcnRDaGlsZEtleSA9PT0gZW5kQ2hpbGRLZXkpXG4gICAgICAgIGJyZWFrO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChjaGlsZC5fa2V5ID09PSBlbmRDaGlsZEtleSkge1xuICAgICAgaXNTcGFuKGNvbnRleHQsIGNoaWxkKSA/IGNoaWxkcmVuLnB1c2goe1xuICAgICAgICAuLi5jaGlsZCxcbiAgICAgICAgdGV4dDogY2hpbGQudGV4dC5zbGljZSgwLCBlbmRQb2ludC5vZmZzZXQpXG4gICAgICB9KSA6IGNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHN0YXJ0Q2hpbGRGb3VuZCAmJiBjaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIC4uLmJsb2NrLFxuICAgIGNoaWxkcmVuXG4gIH07XG59XG5leHBvcnQge1xuICBzZWxlY3Rpb25Qb2ludFRvQmxvY2tPZmZzZXQsXG4gIHNsaWNlVGV4dEJsb2NrXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5zbGljZS10ZXh0LWJsb2NrLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.slice-text-block.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@portabletext/editor/lib/behaviors/index.js":
/*!*******************************************************************!*\
  !*** ../node_modules/@portabletext/editor/lib/behaviors/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defineBehavior: () => (/* binding */ defineBehavior),\n/* harmony export */   effect: () => (/* binding */ effect),\n/* harmony export */   execute: () => (/* binding */ execute),\n/* harmony export */   forward: () => (/* binding */ forward),\n/* harmony export */   raise: () => (/* binding */ raise)\n/* harmony export */ });\nfunction execute(event) {\n  return {\n    type: \"execute\",\n    event\n  };\n}\nfunction forward(event) {\n  return {\n    type: \"forward\",\n    event\n  };\n}\nfunction raise(event) {\n  return {\n    type: \"raise\",\n    event\n  };\n}\nfunction effect(effect2) {\n  return {\n    type: \"effect\",\n    effect: effect2\n  };\n}\nfunction defineBehavior(behavior) {\n  return behavior;\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0Bwb3J0YWJsZXRleHQvZWRpdG9yL2xpYi9iZWhhdmlvcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvR2Fsb2NrL0NTL2JlaG9tZS1zaXRlL25vZGVfbW9kdWxlcy9AcG9ydGFibGV0ZXh0L2VkaXRvci9saWIvYmVoYXZpb3JzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGV4ZWN1dGUoZXZlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcImV4ZWN1dGVcIixcbiAgICBldmVudFxuICB9O1xufVxuZnVuY3Rpb24gZm9yd2FyZChldmVudCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiZm9yd2FyZFwiLFxuICAgIGV2ZW50XG4gIH07XG59XG5mdW5jdGlvbiByYWlzZShldmVudCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwicmFpc2VcIixcbiAgICBldmVudFxuICB9O1xufVxuZnVuY3Rpb24gZWZmZWN0KGVmZmVjdDIpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcImVmZmVjdFwiLFxuICAgIGVmZmVjdDogZWZmZWN0MlxuICB9O1xufVxuZnVuY3Rpb24gZGVmaW5lQmVoYXZpb3IoYmVoYXZpb3IpIHtcbiAgcmV0dXJuIGJlaGF2aW9yO1xufVxuZXhwb3J0IHtcbiAgZGVmaW5lQmVoYXZpb3IsXG4gIGVmZmVjdCxcbiAgZXhlY3V0ZSxcbiAgZm9yd2FyZCxcbiAgcmFpc2Vcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@portabletext/editor/lib/behaviors/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@portabletext/editor/lib/index.js":
/*!*********************************************************!*\
  !*** ../node_modules/@portabletext/editor/lib/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditorEventListener: () => (/* binding */ EditorEventListener),\n/* harmony export */   EditorProvider: () => (/* binding */ EditorProvider),\n/* harmony export */   PortableTextEditable: () => (/* binding */ PortableTextEditable),\n/* harmony export */   PortableTextEditor: () => (/* binding */ PortableTextEditor),\n/* harmony export */   defineSchema: () => (/* reexport safe */ _portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.defineSchema),\n/* harmony export */   keyGenerator: () => (/* reexport safe */ _chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.defaultKeyGenerator),\n/* harmony export */   useEditor: () => (/* reexport safe */ _chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_13__.useEditor),\n/* harmony export */   useEditorSelector: () => (/* binding */ useEditorSelector),\n/* harmony export */   usePortableTextEditor: () => (/* binding */ usePortableTextEditor),\n/* harmony export */   usePortableTextEditorSelection: () => (/* binding */ usePortableTextEditorSelection)\n/* harmony export */ });\n/* harmony import */ var react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-compiler-runtime */ \"(ssr)/../node_modules/react-compiler-runtime/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./_chunks-es/use-editor.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/use-editor.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _xstate_react__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @xstate/react */ \"(ssr)/../node_modules/@xstate/react/dist/xstate-react.development.esm.js\");\n/* harmony import */ var lodash_noop_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/noop.js */ \"(ssr)/../node_modules/lodash/noop.js\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! slate */ \"(ssr)/../node_modules/slate/dist/index.es.js\");\n/* harmony import */ var slate_react__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! slate-react */ \"(ssr)/../node_modules/@portabletext/editor/node_modules/slate-react/dist/index.es.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! debug */ \"(ssr)/../node_modules/debug/src/index.js\");\n/* harmony import */ var slate_dom__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! slate-dom */ \"(ssr)/../node_modules/slate-dom/dist/index.es.js\");\n/* harmony import */ var _chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./_chunks-es/util.is-empty-text-block.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js\");\n/* harmony import */ var _chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./_chunks-es/util.get-text-block-text.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.get-text-block-text.js\");\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/../node_modules/lodash/isEqual.js\");\n/* harmony import */ var _portabletext_schema__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @portabletext/schema */ \"(ssr)/../node_modules/@portabletext/schema/dist/index.js\");\n/* harmony import */ var _chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./_chunks-es/selector.is-active-style.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/selector.is-active-style.js\");\n/* harmony import */ var _chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./_chunks-es/selector.get-selection-text.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/selector.get-selection-text.js\");\n/* harmony import */ var _behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./behaviors/index.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/behaviors/index.js\");\n/* harmony import */ var lodash_uniq_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash/uniq.js */ \"(ssr)/../node_modules/lodash/uniq.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! xstate */ \"(ssr)/../node_modules/xstate/dist/xstate.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! xstate */ \"(ssr)/../node_modules/xstate/dist/assign-fb4707fe.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! xstate */ \"(ssr)/../node_modules/xstate/actors/dist/xstate-actors.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! xstate */ \"(ssr)/../node_modules/xstate/dist/raise-f7b216be.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! xstate */ \"(ssr)/../node_modules/xstate/dist/log-368dd776.development.esm.js\");\n/* harmony import */ var _portabletext_sanity_bridge__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! @portabletext/sanity-bridge */ \"(ssr)/../node_modules/@portabletext/sanity-bridge/dist/index.js\");\n/* harmony import */ var _portabletext_block_tools__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @portabletext/block-tools */ \"(ssr)/../node_modules/@portabletext/block-tools/lib/index.js\");\n/* harmony import */ var _portabletext_to_html__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @portabletext/to-html */ \"(ssr)/../node_modules/@portabletext/to-html/dist/pt-to-html.mjs\");\n/* harmony import */ var _sanity_schema__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @sanity/schema */ \"(ssr)/../node_modules/@sanity/schema/lib/index.mjs\");\n/* harmony import */ var lodash_flatten_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash/flatten.js */ \"(ssr)/../node_modules/lodash/flatten.js\");\n/* harmony import */ var lodash_omit_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash/omit.js */ \"(ssr)/../node_modules/lodash/omit.js\");\n/* harmony import */ var _portabletext_patches__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @portabletext/patches */ \"(ssr)/../node_modules/@portabletext/patches/dist/index.js\");\n/* harmony import */ var _chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./_chunks-es/util.child-selection-point-to-block-offset.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.child-selection-point-to-block-offset.js\");\n/* harmony import */ var _chunks_es_util_slice_text_block_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./_chunks-es/util.slice-text-block.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.slice-text-block.js\");\n/* harmony import */ var lodash_get_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash/get.js */ \"(ssr)/../node_modules/lodash/get.js\");\n/* harmony import */ var lodash_isUndefined_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash/isUndefined.js */ \"(ssr)/../node_modules/lodash/isUndefined.js\");\n/* harmony import */ var lodash_omitBy_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash/omitBy.js */ \"(ssr)/../node_modules/lodash/omitBy.js\");\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! immer */ \"(ssr)/../node_modules/immer/dist/immer.mjs\");\n/* harmony import */ var _portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @portabletext/keyboard-shortcuts */ \"(ssr)/../node_modules/@portabletext/keyboard-shortcuts/dist/index.js\");\n/* harmony import */ var lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash/isPlainObject.js */ \"(ssr)/../node_modules/lodash/isPlainObject.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! rxjs */ \"(ssr)/../node_modules/rxjs/dist/cjs/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction EditorEventListener(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4), editor = (0,_chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_13__.useEditor)();\n  let t0, t1;\n  return $[0] !== editor || $[1] !== props.on ? (t0 = () => {\n    const subscription = editor.on(\"*\", props.on);\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t1 = [editor, props.on], $[0] = editor, $[1] = props.on, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1), null;\n}\nconst rootName = \"sanity-pte:\";\ndebug__WEBPACK_IMPORTED_MODULE_4__(rootName);\nfunction debugWithName(name) {\n  const namespace = `${rootName}${name}`;\n  return debug__WEBPACK_IMPORTED_MODULE_4__ && debug__WEBPACK_IMPORTED_MODULE_4__.enabled(namespace) ? debug__WEBPACK_IMPORTED_MODULE_4__(namespace) : debug__WEBPACK_IMPORTED_MODULE_4__(rootName);\n}\nconst VOID_CHILD_KEY = \"void-child\";\nfunction keepObjectEquality(object, keyMap) {\n  const value = keyMap[object._key];\n  return value && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(object, value) ? value : (keyMap[object._key] = object, object);\n}\nfunction toSlateValue(value, {\n  schemaTypes\n}, keyMap = {}) {\n  return value && Array.isArray(value) ? value.map((block) => {\n    const {\n      _type,\n      _key,\n      ...rest\n    } = block;\n    if (block && block._type === schemaTypes.block.name) {\n      const textBlock = block;\n      let hasInlines = !1;\n      const hasMissingStyle = typeof textBlock.style > \"u\", hasMissingMarkDefs = typeof textBlock.markDefs > \"u\", hasMissingChildren = typeof textBlock.children > \"u\", children = (textBlock.children || []).map((child) => {\n        const {\n          _type: cType,\n          _key: cKey,\n          ...cRest\n        } = child;\n        return cType !== \"span\" ? (hasInlines = !0, keepObjectEquality({\n          _type: cType,\n          _key: cKey,\n          children: [{\n            _key: VOID_CHILD_KEY,\n            _type: \"span\",\n            text: \"\",\n            marks: []\n          }],\n          value: cRest,\n          __inline: !0\n        }, keyMap)) : child;\n      });\n      return !hasMissingStyle && !hasMissingMarkDefs && !hasMissingChildren && !hasInlines && slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(block) ? block : (hasMissingStyle && (rest.style = schemaTypes.styles[0].name), keepObjectEquality({\n        _type,\n        _key,\n        ...rest,\n        children\n      }, keyMap));\n    }\n    return keepObjectEquality({\n      _type,\n      _key,\n      children: [{\n        _key: VOID_CHILD_KEY,\n        _type: \"span\",\n        text: \"\",\n        marks: []\n      }],\n      value: rest\n    }, keyMap);\n  }) : [];\n}\nfunction fromSlateValue(value, textBlockType, keyMap = {}) {\n  return value.map((block) => {\n    const {\n      _key,\n      _type\n    } = block;\n    if (!_key || !_type)\n      throw new Error(\"Not a valid block\");\n    if (_type === textBlockType && \"children\" in block && Array.isArray(block.children) && _key) {\n      let hasInlines = !1;\n      const children = block.children.map((child) => {\n        const {\n          _type: _cType\n        } = child;\n        if (\"value\" in child && _cType !== \"span\") {\n          hasInlines = !0;\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child;\n          return keepObjectEquality({\n            ...rest,\n            ...v,\n            _key: k,\n            _type: t\n          }, keyMap);\n        }\n        return child;\n      });\n      return hasInlines ? keepObjectEquality({\n        ...block,\n        children,\n        _key,\n        _type\n      }, keyMap) : block;\n    }\n    const blockValue = \"value\" in block && block.value;\n    return keepObjectEquality({\n      _key,\n      _type,\n      ...typeof blockValue == \"object\" ? blockValue : {}\n    }, keyMap);\n  });\n}\nfunction isEqualToEmptyEditor(children, schemaTypes) {\n  return children === void 0 || children && Array.isArray(children) && children.length === 0 || children && Array.isArray(children) && children.length === 1 && slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(children[0]) && children[0]._type === schemaTypes.block.name && \"style\" in children[0] && children[0].style === schemaTypes.styles[0].name && !(\"listItem\" in children[0]) && Array.isArray(children[0].children) && children[0].children.length === 1 && slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(children[0].children[0]) && children[0].children[0]._type === \"span\" && !children[0].children[0].marks?.join(\"\") && children[0].children[0].text === \"\";\n}\nfunction getFocusBlock({\n  editor\n}) {\n  if (!editor.selection)\n    return [void 0, void 0];\n  try {\n    return slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, editor.selection.focus.path.slice(0, 1)) ?? [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getFocusSpan({\n  editor\n}) {\n  if (!editor.selection)\n    return [void 0, void 0];\n  try {\n    const [focusBlock] = getFocusBlock({\n      editor\n    });\n    if (!focusBlock)\n      return [void 0, void 0];\n    if (!editor.isTextBlock(focusBlock))\n      return [void 0, void 0];\n    const [node, path] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, editor.selection.focus.path.slice(0, 2));\n    if (editor.isTextSpan(node))\n      return [node, path];\n  } catch {\n    return [void 0, void 0];\n  }\n  return [void 0, void 0];\n}\nfunction getSelectionStartBlock({\n  editor\n}) {\n  if (!editor.selection)\n    return [void 0, void 0];\n  const selectionStartPoint = slate__WEBPACK_IMPORTED_MODULE_14__.Range.start(editor.selection);\n  return getPointBlock({\n    editor,\n    point: selectionStartPoint\n  });\n}\nfunction getSelectionEndBlock({\n  editor\n}) {\n  if (!editor.selection)\n    return [void 0, void 0];\n  const selectionEndPoint = slate__WEBPACK_IMPORTED_MODULE_14__.Range.end(editor.selection);\n  return getPointBlock({\n    editor,\n    point: selectionEndPoint\n  });\n}\nfunction getPointBlock({\n  editor,\n  point\n}) {\n  try {\n    const [block] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, point.path.slice(0, 1)) ?? [void 0, void 0];\n    return block ? [block, point.path.slice(0, 1)] : [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getFocusChild({\n  editor\n}) {\n  const [focusBlock, focusBlockPath] = getFocusBlock({\n    editor\n  }), childIndex = editor.selection?.focus.path.at(1);\n  if (!focusBlock || !focusBlockPath || childIndex === void 0)\n    return [void 0, void 0];\n  try {\n    const focusChild = slate__WEBPACK_IMPORTED_MODULE_14__.Node.child(focusBlock, childIndex);\n    return focusChild ? [focusChild, [...focusBlockPath, childIndex]] : [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getPointChild({\n  editor,\n  point\n}) {\n  const [block, blockPath] = getPointBlock({\n    editor,\n    point\n  }), childIndex = point.path.at(1);\n  if (!block || !blockPath || childIndex === void 0)\n    return [void 0, void 0];\n  try {\n    const pointChild = slate__WEBPACK_IMPORTED_MODULE_14__.Node.child(block, childIndex);\n    return pointChild ? [pointChild, [...blockPath, childIndex]] : [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getFirstBlock({\n  editor\n}) {\n  if (editor.children.length === 0)\n    return [void 0, void 0];\n  const firstBlockPath = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, []).path.at(0);\n  try {\n    return firstBlockPath !== void 0 ? slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, [firstBlockPath]) ?? [void 0, void 0] : [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getLastBlock({\n  editor\n}) {\n  if (editor.children.length === 0)\n    return [void 0, void 0];\n  const lastBlockPath = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, []).path.at(0);\n  try {\n    return lastBlockPath !== void 0 ? slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, [lastBlockPath]) ?? [void 0, void 0] : [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getNodeBlock({\n  editor,\n  schema,\n  node\n}) {\n  if (slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(node))\n    return;\n  if (isBlockElement({\n    editor,\n    schema\n  }, node))\n    return elementToBlock({\n      schema,\n      element: node\n    });\n  const parent = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n    mode: \"highest\",\n    at: [],\n    match: (n) => isBlockElement({\n      editor,\n      schema\n    }, n) && n.children.some((child) => child._key === node._key)\n  })).at(0)?.at(0);\n  return slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(parent) ? elementToBlock({\n    schema,\n    element: parent\n  }) : void 0;\n}\nfunction elementToBlock({\n  schema,\n  element\n}) {\n  return fromSlateValue([element], schema.block.name)?.at(0);\n}\nfunction isBlockElement({\n  editor,\n  schema\n}, node) {\n  return slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(node) && !editor.isInline(node) && (schema.block.name === node._type || schema.blockObjects.some((blockObject) => blockObject.name === node._type));\n}\nfunction isListItemActive({\n  editor,\n  listItem\n}) {\n  if (!editor.selection)\n    return !1;\n  const selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node)\n  })];\n  return selectedBlocks.length > 0 ? selectedBlocks.every(([node]) => editor.isListBlock(node) && node.listItem === listItem) : !1;\n}\nfunction isStyleActive({\n  editor,\n  style\n}) {\n  if (!editor.selection)\n    return !1;\n  const selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node)\n  })];\n  return selectedBlocks.length > 0 ? selectedBlocks.every(([node]) => node.style === style) : !1;\n}\nfunction slateRangeToSelection({\n  schema,\n  editor,\n  range\n}) {\n  const [anchorBlock] = getPointBlock({\n    editor,\n    point: range.anchor\n  }), [focusBlock] = getPointBlock({\n    editor,\n    point: range.focus\n  });\n  if (!anchorBlock || !focusBlock)\n    return null;\n  const [anchorChild] = anchorBlock._type === schema.block.name ? getPointChild({\n    editor,\n    point: range.anchor\n  }) : [void 0, void 0], [focusChild] = focusBlock._type === schema.block.name ? getPointChild({\n    editor,\n    point: range.focus\n  }) : [void 0, void 0], selection = {\n    anchor: {\n      path: [{\n        _key: anchorBlock._key\n      }],\n      offset: range.anchor.offset\n    },\n    focus: {\n      path: [{\n        _key: focusBlock._key\n      }],\n      offset: range.focus.offset\n    },\n    backward: slate__WEBPACK_IMPORTED_MODULE_14__.Range.isBackward(range)\n  };\n  return anchorChild && (selection.anchor.path.push(\"children\"), selection.anchor.path.push({\n    _key: anchorChild._key\n  })), focusChild && (selection.focus.path.push(\"children\"), selection.focus.path.push({\n    _key: focusChild._key\n  })), selection;\n}\nfunction getEventPosition({\n  editorActor,\n  slateEditor,\n  event\n}) {\n  if (editorActor.getSnapshot().matches({\n    setup: \"setting up\"\n  }))\n    return;\n  const eventNode = getEventNode({\n    slateEditor,\n    event\n  });\n  if (!eventNode)\n    return;\n  const eventBlock = getNodeBlock({\n    editor: slateEditor,\n    schema: editorActor.getSnapshot().context.schema,\n    node: eventNode\n  }), eventPositionBlock = getEventPositionBlock({\n    node: eventNode,\n    slateEditor,\n    event\n  }), eventSelection = getEventSelection({\n    schema: editorActor.getSnapshot().context.schema,\n    slateEditor,\n    event\n  });\n  if (eventBlock && eventPositionBlock && !eventSelection && !slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(eventNode))\n    return {\n      block: eventPositionBlock,\n      isEditor: !1,\n      selection: {\n        anchor: (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getBlockStartPoint)({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{\n              _key: eventBlock._key\n            }]\n          }\n        }),\n        focus: (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{\n              _key: eventBlock._key\n            }]\n          }\n        })\n      }\n    };\n  if (!eventPositionBlock || !eventSelection)\n    return;\n  const eventSelectionFocusBlockKey = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getBlockKeyFromSelectionPoint)(eventSelection.focus);\n  if (eventSelectionFocusBlockKey !== void 0)\n    return (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isSelectionCollapsed)(eventSelection) && eventBlock && eventSelectionFocusBlockKey !== eventBlock._key ? {\n      block: eventPositionBlock,\n      isEditor: !1,\n      selection: {\n        anchor: (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getBlockStartPoint)({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{\n              _key: eventBlock._key\n            }]\n          }\n        }),\n        focus: (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{\n              _key: eventBlock._key\n            }]\n          }\n        })\n      }\n    } : {\n      block: eventPositionBlock,\n      isEditor: slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(eventNode),\n      selection: eventSelection\n    };\n}\nfunction getEventNode({\n  slateEditor,\n  event\n}) {\n  return slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.hasTarget(slateEditor, event.target) ? slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.toSlateNode(slateEditor, event.target) : void 0;\n}\nfunction getEventPositionBlock({\n  node,\n  slateEditor,\n  event\n}) {\n  const [firstBlock] = getFirstBlock({\n    editor: slateEditor\n  });\n  if (!firstBlock)\n    return;\n  const firstBlockRect = slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.toDOMNode(slateEditor, firstBlock).getBoundingClientRect();\n  if (event.pageY < firstBlockRect.top)\n    return \"start\";\n  const [lastBlock] = getLastBlock({\n    editor: slateEditor\n  });\n  if (!lastBlock)\n    return;\n  const lastBlockRef = slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.toDOMNode(slateEditor, lastBlock).getBoundingClientRect();\n  if (event.pageY > lastBlockRef.bottom)\n    return \"end\";\n  const elementRect = slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.toDOMNode(slateEditor, node).getBoundingClientRect(), top = elementRect.top, height = elementRect.height;\n  return Math.abs(top - event.pageY) < height / 2 ? \"start\" : \"end\";\n}\nfunction getEventSelection({\n  schema,\n  slateEditor,\n  event\n}) {\n  const range = getSlateRangeFromEvent(slateEditor, event);\n  return range ? slateRangeToSelection({\n    schema,\n    editor: slateEditor,\n    range\n  }) : null;\n}\nfunction getSlateRangeFromEvent(editor, event) {\n  if (!event.target || !(0,slate_dom__WEBPACK_IMPORTED_MODULE_17__.isDOMNode)(event.target))\n    return;\n  const window2 = slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.getWindow(editor);\n  let domRange;\n  if (window2.document.caretPositionFromPoint !== void 0) {\n    const position = window2.document.caretPositionFromPoint(event.clientX, event.clientY);\n    if (position)\n      try {\n        domRange = window2.document.createRange(), domRange.setStart(position.offsetNode, position.offset), domRange.setEnd(position.offsetNode, position.offset);\n      } catch {\n      }\n  } else if (window2.document.caretRangeFromPoint !== void 0)\n    domRange = window2.document.caretRangeFromPoint(event.clientX, event.clientY) ?? void 0;\n  else {\n    console.warn(\"Neither caretPositionFromPoint nor caretRangeFromPoint is supported\");\n    return;\n  }\n  if (!domRange)\n    return;\n  let range;\n  try {\n    range = slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.toSlateRange(editor, domRange, {\n      exactMatch: !1,\n      // It can still throw even with this option set to true\n      suppressThrow: !1\n    });\n  } catch {\n  }\n  return range;\n}\nfunction normalizePoint(point, value) {\n  if (!point || !value)\n    return null;\n  const newPath = [];\n  let newOffset = point.offset || 0;\n  const blockKey = typeof point.path[0] == \"object\" && \"_key\" in point.path[0] && point.path[0]._key, childKey = typeof point.path[2] == \"object\" && \"_key\" in point.path[2] && point.path[2]._key, block = value.find((blk) => blk._key === blockKey);\n  if (block)\n    newPath.push({\n      _key: block._key\n    });\n  else\n    return null;\n  if (block && point.path[1] === \"children\") {\n    if (!block.children || Array.isArray(block.children) && block.children.length === 0)\n      return null;\n    const child = Array.isArray(block.children) && block.children.find((cld) => cld._key === childKey);\n    if (child)\n      newPath.push(\"children\"), newPath.push({\n        _key: child._key\n      }), newOffset = child.text && child.text.length >= point.offset ? point.offset : child.text && child.text.length || 0;\n    else\n      return null;\n  }\n  return {\n    path: newPath,\n    offset: newOffset\n  };\n}\nfunction normalizeSelection(selection, value) {\n  if (!selection || !value || value.length === 0)\n    return null;\n  let newAnchor = null, newFocus = null;\n  const {\n    anchor,\n    focus\n  } = selection;\n  return anchor && value.find((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__({\n    _key: blk._key\n  }, anchor.path[0])) && (newAnchor = normalizePoint(anchor, value)), focus && value.find((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__({\n    _key: blk._key\n  }, focus.path[0])) && (newFocus = normalizePoint(focus, value)), newAnchor && newFocus ? {\n    anchor: newAnchor,\n    focus: newFocus,\n    backward: selection.backward\n  } : null;\n}\nfunction toSlateRange(snapshot) {\n  if (!snapshot.context.selection)\n    return null;\n  if ((0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isEqualSelectionPoints)(snapshot.context.selection.anchor, snapshot.context.selection.focus)) {\n    const anchorPoint2 = toSlateSelectionPoint(snapshot, snapshot.context.selection.anchor, snapshot.context.selection.backward ? \"forward\" : \"backward\");\n    return anchorPoint2 ? {\n      anchor: anchorPoint2,\n      focus: anchorPoint2\n    } : null;\n  }\n  const anchorPoint = toSlateSelectionPoint(snapshot, snapshot.context.selection.anchor, snapshot.context.selection.backward ? \"forward\" : \"backward\"), focusPoint = toSlateSelectionPoint(snapshot, snapshot.context.selection.focus, snapshot.context.selection.backward ? \"backward\" : \"forward\");\n  return !anchorPoint || !focusPoint ? null : {\n    anchor: anchorPoint,\n    focus: focusPoint\n  };\n}\nfunction toSlateSelectionPoint(snapshot, selectionPoint, direction) {\n  const blockKey = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getBlockKeyFromSelectionPoint)(selectionPoint);\n  if (!blockKey)\n    return;\n  const blockIndex = snapshot.blockIndexMap.get(blockKey);\n  if (blockIndex === void 0)\n    return;\n  const block = snapshot.context.value.at(blockIndex);\n  if (!block)\n    return;\n  if (!(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(snapshot.context, block))\n    return {\n      path: [blockIndex, 0],\n      offset: 0\n    };\n  let childKey = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getChildKeyFromSelectionPoint)({\n    path: selectionPoint.path\n  });\n  const spanSelectionPoint = childKey ? void 0 : (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.blockOffsetToSpanSelectionPoint)({\n    context: {\n      schema: snapshot.context.schema,\n      value: [block]\n    },\n    blockOffset: {\n      path: [{\n        _key: blockKey\n      }],\n      offset: selectionPoint.offset\n    },\n    direction\n  });\n  if (childKey = spanSelectionPoint ? (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getChildKeyFromSelectionPoint)(spanSelectionPoint) : childKey, !childKey)\n    return {\n      path: [blockIndex, 0],\n      offset: 0\n    };\n  let offset = spanSelectionPoint?.offset ?? selectionPoint.offset, childPath = [], childIndex = -1, pathChild;\n  for (const child of block.children)\n    if (childIndex++, child._key === childKey) {\n      pathChild = child, (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isSpan)(snapshot.context, child) ? childPath = [childIndex] : (childPath = [childIndex, 0], offset = 0);\n      break;\n    }\n  return childPath.length === 0 ? {\n    path: [blockIndex, 0],\n    offset: 0\n  } : {\n    path: [blockIndex].concat(childPath),\n    offset: (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isSpan)(snapshot.context, pathChild) ? Math.min(pathChild.text.length, offset) : offset\n  };\n}\nconst EditorActorContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({});\nfunction DropIndicator() {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(1);\n  let t0;\n  return $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { contentEditable: !1, className: \"pt-drop-indicator\", style: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: 1,\n    borderBottom: \"1px solid currentColor\",\n    zIndex: 5\n  }, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", {}) }), $[0] = t0) : t0 = $[0], t0;\n}\nfunction RenderDefaultBlockObject(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4);\n  let t0;\n  $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = {\n    userSelect: \"none\"\n  }, $[0] = t0) : t0 = $[0];\n  let t1;\n  return $[1] !== props.blockObject._key || $[2] !== props.blockObject._type ? (t1 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { style: t0, children: [\n    \"[\",\n    props.blockObject._type,\n    \": \",\n    props.blockObject._key,\n    \"]\"\n  ] }), $[1] = props.blockObject._key, $[2] = props.blockObject._type, $[3] = t1) : t1 = $[3], t1;\n}\nfunction RenderDefaultInlineObject(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4);\n  let t0;\n  $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = {\n    userSelect: \"none\"\n  }, $[0] = t0) : t0 = $[0];\n  let t1;\n  return $[1] !== props.inlineObject._key || $[2] !== props.inlineObject._type ? (t1 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { style: t0, children: [\n    \"[\",\n    props.inlineObject._type,\n    \": \",\n    props.inlineObject._key,\n    \"]\"\n  ] }), $[1] = props.inlineObject._key, $[2] = props.inlineObject._type, $[3] = t1) : t1 = $[3], t1;\n}\nfunction createEditorPriority(config) {\n  return {\n    id: (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.defaultKeyGenerator)(),\n    name: config?.name,\n    reference: config?.reference\n  };\n}\nconst corePriority = createEditorPriority({\n  name: \"core\"\n});\nfunction getDragSelection({\n  eventSelection,\n  snapshot\n}) {\n  let dragSelection = eventSelection;\n  if ((0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getFocusInlineObject)({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection\n    }\n  }))\n    return dragSelection;\n  const draggingCollapsedSelection = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionCollapsed)({\n    context: {\n      ...snapshot.context,\n      selection: eventSelection\n    }\n  }), draggedTextBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusTextBlock)({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection\n    }\n  }), draggedSpan = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusSpan)({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection\n    }\n  });\n  draggingCollapsedSelection && draggedTextBlock && draggedSpan && (dragSelection = {\n    anchor: (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getBlockStartPoint)({\n      context: snapshot.context,\n      block: draggedTextBlock\n    }),\n    focus: (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: draggedTextBlock\n    })\n  });\n  const selectedBlocks = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getSelectedBlocks)(snapshot);\n  if (snapshot.context.selection && (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionExpanded)(snapshot) && selectedBlocks.length > 1) {\n    const selectionStartBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getSelectionStartBlock)(snapshot), selectionEndBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getSelectionEndBlock)(snapshot);\n    if (!selectionStartBlock || !selectionEndBlock)\n      return dragSelection;\n    const selectionStartPoint = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getBlockStartPoint)({\n      context: snapshot.context,\n      block: selectionStartBlock\n    }), selectionEndPoint = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: selectionEndBlock\n    });\n    (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isOverlappingSelection)(eventSelection)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionEndPoint\n        }\n      }\n    }) && (dragSelection = {\n      anchor: selectionStartPoint,\n      focus: selectionEndPoint\n    });\n  }\n  return dragSelection;\n}\nfunction createCoreBlockElementBehaviorsConfig({\n  key,\n  onSetDragPositionBlock\n}) {\n  return [{\n    behavior: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n      on: \"drag.dragover\",\n      guard: ({\n        snapshot,\n        event\n      }) => {\n        const dropFocusBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusBlock)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: event.position.selection\n          }\n        });\n        if (!dropFocusBlock || dropFocusBlock.node._key !== key)\n          return !1;\n        const dragOrigin = event.dragOrigin;\n        if (!dragOrigin)\n          return !1;\n        const dragSelection = getDragSelection({\n          eventSelection: dragOrigin.selection,\n          snapshot\n        });\n        return (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getSelectedBlocks)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection\n          }\n        }).some((draggedBlock) => draggedBlock.node._key === key) ? !1 : (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isSelectingEntireBlocks)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection\n          }\n        });\n      },\n      actions: [({\n        event\n      }) => [{\n        type: \"effect\",\n        effect: () => {\n          onSetDragPositionBlock(event.position.block);\n        }\n      }]]\n    }),\n    priority: createEditorPriority({\n      reference: {\n        priority: corePriority,\n        importance: \"lower\"\n      }\n    })\n  }, {\n    behavior: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n      on: \"drag.*\",\n      guard: ({\n        event\n      }) => event.type !== \"drag.dragover\",\n      actions: [({\n        event\n      }) => [{\n        type: \"effect\",\n        effect: () => {\n          onSetDragPositionBlock(void 0);\n        }\n      }, (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.forward)(event)]]\n    }),\n    priority: createEditorPriority({\n      reference: {\n        priority: corePriority,\n        importance: \"lower\"\n      }\n    })\n  }];\n}\nfunction useCoreBlockElementBehaviors(t0) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(5), {\n    key,\n    onSetDragPositionBlock\n  } = t0, editorActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EditorActorContext);\n  let t1, t2;\n  $[0] !== editorActor || $[1] !== key || $[2] !== onSetDragPositionBlock ? (t1 = () => {\n    const behaviorConfigs = createCoreBlockElementBehaviorsConfig({\n      key,\n      onSetDragPositionBlock\n    });\n    for (const behaviorConfig of behaviorConfigs)\n      editorActor.send({\n        type: \"add behavior\",\n        behaviorConfig\n      });\n    return () => {\n      for (const behaviorConfig_0 of behaviorConfigs)\n        editorActor.send({\n          type: \"remove behavior\",\n          behaviorConfig: behaviorConfig_0\n        });\n    };\n  }, t2 = [editorActor, key, onSetDragPositionBlock], $[0] = editorActor, $[1] = key, $[2] = onSetDragPositionBlock, $[3] = t1, $[4] = t2) : (t1 = $[3], t2 = $[4]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t1, t2);\n}\nfunction RenderBlockObject(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(35), [dragPositionBlock, setDragPositionBlock] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(), blockObjectRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), selected = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSelected)();\n  let t0;\n  $[0] !== selected ? (t0 = (editor) => selected && editor.selection !== null && slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(editor.selection), $[0] = selected, $[1] = t0) : t0 = $[1];\n  const focused = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSlateSelector)(t0);\n  let t1;\n  $[2] !== props.element._key ? (t1 = {\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock\n  }, $[2] = props.element._key, $[3] = t1) : t1 = $[3], useCoreBlockElementBehaviors(t1);\n  let t2;\n  if ($[4] !== props.element._type || $[5] !== props.legacySchema.blockObjects) {\n    let t32;\n    $[7] !== props.element._type ? (t32 = (schemaType) => schemaType.name === props.element._type, $[7] = props.element._type, $[8] = t32) : t32 = $[8], t2 = props.legacySchema.blockObjects.find(t32), $[4] = props.element._type, $[5] = props.legacySchema.blockObjects, $[6] = t2;\n  } else\n    t2 = $[6];\n  const legacySchemaType = t2;\n  legacySchemaType || console.error(`Unable to find Block Object \"${props.element._type}\" in Schema`);\n  let t3;\n  $[9] !== props.blockObject || $[10] !== props.element._key || $[11] !== props.element._type ? (t3 = props.blockObject ?? {\n    _key: props.element._key,\n    _type: props.element._type\n  }, $[9] = props.blockObject, $[10] = props.element._key, $[11] = props.element._type, $[12] = t3) : t3 = $[12];\n  const blockObject = t3;\n  let t4;\n  $[13] !== dragPositionBlock ? (t4 = dragPositionBlock === \"start\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropIndicator, {}) : null, $[13] = dragPositionBlock, $[14] = t4) : t4 = $[14];\n  const t5 = !props.readOnly;\n  let t6;\n  $[15] !== blockObject || $[16] !== focused || $[17] !== legacySchemaType || $[18] !== props.element._key || $[19] !== props.renderBlock || $[20] !== selected ? (t6 = props.renderBlock && legacySchemaType ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderBlock$1, { renderBlock: props.renderBlock, editorElementRef: blockObjectRef, focused, path: [{\n    _key: props.element._key\n  }], schemaType: legacySchemaType, selected, type: legacySchemaType, value: blockObject, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderDefaultBlockObject, { blockObject }) }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderDefaultBlockObject, { blockObject }), $[15] = blockObject, $[16] = focused, $[17] = legacySchemaType, $[18] = props.element._key, $[19] = props.renderBlock, $[20] = selected, $[21] = t6) : t6 = $[21];\n  let t7;\n  $[22] !== t5 || $[23] !== t6 ? (t7 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { ref: blockObjectRef, contentEditable: !1, draggable: t5, children: t6 }), $[22] = t5, $[23] = t6, $[24] = t7) : t7 = $[24];\n  let t8;\n  $[25] !== dragPositionBlock ? (t8 = dragPositionBlock === \"end\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropIndicator, {}) : null, $[25] = dragPositionBlock, $[26] = t8) : t8 = $[26];\n  let t9;\n  return $[27] !== props.attributes || $[28] !== props.children || $[29] !== props.element._key || $[30] !== props.element._type || $[31] !== t4 || $[32] !== t7 || $[33] !== t8 ? (t9 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ...props.attributes, className: \"pt-block pt-object-block\", \"data-block-key\": props.element._key, \"data-block-name\": props.element._type, \"data-block-type\": \"object\", children: [\n    t4,\n    props.children,\n    t7,\n    t8\n  ] }), $[27] = props.attributes, $[28] = props.children, $[29] = props.element._key, $[30] = props.element._type, $[31] = t4, $[32] = t7, $[33] = t8, $[34] = t9) : t9 = $[34], t9;\n}\nfunction RenderBlock$1({\n  renderBlock,\n  children,\n  editorElementRef,\n  focused,\n  path,\n  schemaType,\n  selected,\n  type,\n  value\n}) {\n  return renderBlock({\n    children,\n    editorElementRef,\n    focused,\n    path,\n    schemaType,\n    selected,\n    type,\n    value\n  });\n}\nfunction RenderInlineObject(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(32), inlineObjectRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), slateEditor = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSlateStatic)(), selected = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSelected)();\n  let t0;\n  $[0] !== selected ? (t0 = (editor) => selected && editor.selection !== null && slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(editor.selection), $[0] = selected, $[1] = t0) : t0 = $[1];\n  const focused = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSlateSelector)(t0);\n  let t1;\n  if ($[2] !== props.element._type || $[3] !== props.legacySchema.inlineObjects) {\n    let t22;\n    $[5] !== props.element._type ? (t22 = (inlineObject) => inlineObject.name === props.element._type, $[5] = props.element._type, $[6] = t22) : t22 = $[6], t1 = props.legacySchema.inlineObjects.find(t22), $[2] = props.element._type, $[3] = props.legacySchema.inlineObjects, $[4] = t1;\n  } else\n    t1 = $[4];\n  const legacySchemaType = t1;\n  legacySchemaType || console.error(`Unable to find Inline Object \"${props.element._type}\" in Schema`);\n  let t2;\n  if ($[7] !== props.element || $[8] !== slateEditor) {\n    const path = slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.findPath(slateEditor, props.element);\n    t2 = getPointBlock({\n      editor: slateEditor,\n      point: {\n        path,\n        offset: 0\n      }\n    }), $[7] = props.element, $[8] = slateEditor, $[9] = t2;\n  } else\n    t2 = $[9];\n  const [block] = t2;\n  block || console.error(`Unable to find parent block of inline object ${props.element._key}`);\n  let t3;\n  $[10] !== props.element ? (t3 = \"value\" in props.element && typeof props.element.value == \"object\" ? props.element.value : {}, $[10] = props.element, $[11] = t3) : t3 = $[11];\n  let t4;\n  $[12] !== props.element._key || $[13] !== props.element._type || $[14] !== t3 ? (t4 = {\n    _key: props.element._key,\n    _type: props.element._type,\n    ...t3\n  }, $[12] = props.element._key, $[13] = props.element._type, $[14] = t3, $[15] = t4) : t4 = $[15];\n  const inlineObject_0 = t4, t5 = !props.readOnly;\n  let t6;\n  $[16] === Symbol.for(\"react.memo_cache_sentinel\") ? (t6 = {\n    display: \"inline-block\"\n  }, $[16] = t6) : t6 = $[16];\n  let t7;\n  $[17] !== block || $[18] !== focused || $[19] !== inlineObject_0 || $[20] !== legacySchemaType || $[21] !== props.element._key || $[22] !== props.renderChild || $[23] !== selected ? (t7 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { ref: inlineObjectRef, style: t6, children: props.renderChild && block && legacySchemaType ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderChild$1, { renderChild: props.renderChild, annotations: [], editorElementRef: inlineObjectRef, selected, focused, path: [{\n    _key: block._key\n  }, \"children\", {\n    _key: props.element._key\n  }], schemaType: legacySchemaType, value: inlineObject_0, type: legacySchemaType, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderDefaultInlineObject, { inlineObject: inlineObject_0 }) }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderDefaultInlineObject, { inlineObject: inlineObject_0 }) }), $[17] = block, $[18] = focused, $[19] = inlineObject_0, $[20] = legacySchemaType, $[21] = props.element._key, $[22] = props.renderChild, $[23] = selected, $[24] = t7) : t7 = $[24];\n  let t8;\n  return $[25] !== inlineObject_0._key || $[26] !== inlineObject_0._type || $[27] !== props.attributes || $[28] !== props.children || $[29] !== t5 || $[30] !== t7 ? (t8 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { ...props.attributes, draggable: t5, className: \"pt-inline-object\", \"data-child-key\": inlineObject_0._key, \"data-child-name\": inlineObject_0._type, \"data-child-type\": \"object\", children: [\n    props.children,\n    t7\n  ] }), $[25] = inlineObject_0._key, $[26] = inlineObject_0._type, $[27] = props.attributes, $[28] = props.children, $[29] = t5, $[30] = t7, $[31] = t8) : t8 = $[31], t8;\n}\nfunction RenderChild$1({\n  renderChild,\n  annotations,\n  children,\n  editorElementRef,\n  focused,\n  path,\n  schemaType,\n  selected,\n  value,\n  type\n}) {\n  return renderChild({\n    annotations,\n    children,\n    editorElementRef,\n    focused,\n    path,\n    schemaType,\n    selected,\n    value,\n    type\n  });\n}\nfunction RenderTextBlock(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(77), [dragPositionBlock, setDragPositionBlock] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(), blockRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), selected = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSelected)();\n  let t0;\n  $[0] !== selected ? (t0 = (editor) => selected && editor.selection !== null && slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(editor.selection), $[0] = selected, $[1] = t0) : t0 = $[1];\n  const focused = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSlateSelector)(t0);\n  let t1;\n  $[2] !== props.element._key ? (t1 = {\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock\n  }, $[2] = props.element._key, $[3] = t1) : t1 = $[3], useCoreBlockElementBehaviors(t1);\n  let t2;\n  $[4] !== props.textBlock._key ? (t2 = (editor_0) => editor_0.listIndexMap.get(props.textBlock._key), $[4] = props.textBlock._key, $[5] = t2) : t2 = $[5];\n  const listIndex = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSlateSelector)(t2);\n  let children = props.children;\n  if (props.renderStyle && props.textBlock.style) {\n    let t32;\n    $[6] !== props.legacySchema || $[7] !== props.textBlock.style ? (t32 = props.textBlock.style !== void 0 ? props.legacySchema.styles.find((style) => style.value === props.textBlock.style) : void 0, $[6] = props.legacySchema, $[7] = props.textBlock.style, $[8] = t32) : t32 = $[8];\n    const legacyStyleSchemaType = t32;\n    if (legacyStyleSchemaType) {\n      let t42;\n      $[9] !== props.textBlock._key ? (t42 = [{\n        _key: props.textBlock._key\n      }], $[9] = props.textBlock._key, $[10] = t42) : t42 = $[10];\n      let t52;\n      $[11] !== children || $[12] !== focused || $[13] !== legacyStyleSchemaType || $[14] !== props.renderStyle || $[15] !== props.textBlock || $[16] !== selected || $[17] !== t42 ? (t52 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderStyle, { renderStyle: props.renderStyle, block: props.textBlock, editorElementRef: blockRef, focused, path: t42, schemaType: legacyStyleSchemaType, selected, value: props.textBlock.style, children }), $[11] = children, $[12] = focused, $[13] = legacyStyleSchemaType, $[14] = props.renderStyle, $[15] = props.textBlock, $[16] = selected, $[17] = t42, $[18] = t52) : t52 = $[18], children = t52;\n    } else\n      console.error(`Unable to find Schema type for text block style ${props.textBlock.style}`);\n  }\n  if (props.renderListItem && props.textBlock.listItem) {\n    let t32;\n    if ($[19] !== props.legacySchema.lists || $[20] !== props.textBlock.listItem) {\n      let t42;\n      $[22] !== props.textBlock.listItem ? (t42 = (list) => list.value === props.textBlock.listItem, $[22] = props.textBlock.listItem, $[23] = t42) : t42 = $[23], t32 = props.legacySchema.lists.find(t42), $[19] = props.legacySchema.lists, $[20] = props.textBlock.listItem, $[21] = t32;\n    } else\n      t32 = $[21];\n    const legacyListItemSchemaType = t32;\n    if (legacyListItemSchemaType) {\n      const t42 = props.textBlock.level ?? 1;\n      let t52;\n      $[24] !== props.textBlock._key ? (t52 = [{\n        _key: props.textBlock._key\n      }], $[24] = props.textBlock._key, $[25] = t52) : t52 = $[25];\n      let t62;\n      $[26] !== children || $[27] !== focused || $[28] !== legacyListItemSchemaType || $[29] !== props.renderListItem || $[30] !== props.textBlock || $[31] !== selected || $[32] !== t42 || $[33] !== t52 ? (t62 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderListItem, { renderListItem: props.renderListItem, block: props.textBlock, editorElementRef: blockRef, focused, level: t42, path: t52, selected, value: props.textBlock.listItem, schemaType: legacyListItemSchemaType, children }), $[26] = children, $[27] = focused, $[28] = legacyListItemSchemaType, $[29] = props.renderListItem, $[30] = props.textBlock, $[31] = selected, $[32] = t42, $[33] = t52, $[34] = t62) : t62 = $[34], children = t62;\n    } else\n      console.error(`Unable to find Schema type for text block list item ${props.textBlock.listItem}`);\n  }\n  const t3 = props.attributes;\n  let t4;\n  $[35] !== props.textBlock.style ? (t4 = props.textBlock.style ? [`pt-text-block-style-${props.textBlock.style}`] : [], $[35] = props.textBlock.style, $[36] = t4) : t4 = $[36];\n  let t5;\n  $[37] !== props.textBlock.level || $[38] !== props.textBlock.listItem ? (t5 = props.textBlock.listItem ? [\"pt-list-item\", `pt-list-item-${props.textBlock.listItem}`, `pt-list-item-level-${props.textBlock.level ?? 1}`] : [], $[37] = props.textBlock.level, $[38] = props.textBlock.listItem, $[39] = t5) : t5 = $[39];\n  let t6;\n  $[40] !== t4 || $[41] !== t5 ? (t6 = [\"pt-block\", \"pt-text-block\", ...t4, ...t5], $[40] = t4, $[41] = t5, $[42] = t6) : t6 = $[42];\n  const t7 = t6.join(\" \");\n  let t8;\n  $[43] !== props.textBlock.listItem ? (t8 = props.textBlock.listItem !== void 0 ? {\n    \"data-list-item\": props.textBlock.listItem\n  } : {}, $[43] = props.textBlock.listItem, $[44] = t8) : t8 = $[44];\n  let t9;\n  $[45] !== props.textBlock.level ? (t9 = props.textBlock.level !== void 0 ? {\n    \"data-level\": props.textBlock.level\n  } : {}, $[45] = props.textBlock.level, $[46] = t9) : t9 = $[46];\n  let t10;\n  $[47] !== props.textBlock.style ? (t10 = props.textBlock.style !== void 0 ? {\n    \"data-style\": props.textBlock.style\n  } : {}, $[47] = props.textBlock.style, $[48] = t10) : t10 = $[48];\n  let t11;\n  $[49] !== listIndex ? (t11 = listIndex !== void 0 ? {\n    \"data-list-index\": listIndex\n  } : {}, $[49] = listIndex, $[50] = t11) : t11 = $[50];\n  let t12;\n  $[51] !== dragPositionBlock ? (t12 = dragPositionBlock === \"start\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropIndicator, {}) : null, $[51] = dragPositionBlock, $[52] = t12) : t12 = $[52];\n  let t13;\n  $[53] !== children || $[54] !== focused || $[55] !== props.legacySchema || $[56] !== props.renderBlock || $[57] !== props.textBlock || $[58] !== selected ? (t13 = props.renderBlock ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderBlock, { renderBlock: props.renderBlock, editorElementRef: blockRef, focused, level: props.textBlock.level, listItem: props.textBlock.listItem, path: [{\n    _key: props.textBlock._key\n  }], selected, schemaType: props.legacySchema.block, style: props.textBlock.style, type: props.legacySchema.block, value: props.textBlock, children }) : children, $[53] = children, $[54] = focused, $[55] = props.legacySchema, $[56] = props.renderBlock, $[57] = props.textBlock, $[58] = selected, $[59] = t13) : t13 = $[59];\n  let t14;\n  $[60] !== t13 ? (t14 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { ref: blockRef, children: t13 }), $[60] = t13, $[61] = t14) : t14 = $[61];\n  let t15;\n  $[62] !== dragPositionBlock ? (t15 = dragPositionBlock === \"end\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropIndicator, {}) : null, $[62] = dragPositionBlock, $[63] = t15) : t15 = $[63];\n  let t16;\n  return $[64] !== props.attributes || $[65] !== props.spellCheck || $[66] !== props.textBlock._key || $[67] !== props.textBlock._type || $[68] !== t10 || $[69] !== t11 || $[70] !== t12 || $[71] !== t14 || $[72] !== t15 || $[73] !== t7 || $[74] !== t8 || $[75] !== t9 ? (t16 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ...t3, className: t7, spellCheck: props.spellCheck, \"data-block-key\": props.textBlock._key, \"data-block-name\": props.textBlock._type, \"data-block-type\": \"text\", ...t8, ...t9, ...t10, ...t11, children: [\n    t12,\n    t14,\n    t15\n  ] }), $[64] = props.attributes, $[65] = props.spellCheck, $[66] = props.textBlock._key, $[67] = props.textBlock._type, $[68] = t10, $[69] = t11, $[70] = t12, $[71] = t14, $[72] = t15, $[73] = t7, $[74] = t8, $[75] = t9, $[76] = t16) : t16 = $[76], t16;\n}\nfunction RenderBlock({\n  renderBlock,\n  children,\n  editorElementRef,\n  focused,\n  level,\n  listItem,\n  path,\n  selected,\n  style,\n  schemaType,\n  type,\n  value\n}) {\n  return renderBlock({\n    children,\n    editorElementRef,\n    focused,\n    level,\n    listItem,\n    path,\n    selected,\n    style,\n    schemaType,\n    type,\n    value\n  });\n}\nfunction RenderListItem({\n  renderListItem,\n  block,\n  children,\n  editorElementRef,\n  focused,\n  level,\n  path,\n  schemaType,\n  selected,\n  value\n}) {\n  return renderListItem({\n    block,\n    children,\n    editorElementRef,\n    focused,\n    level,\n    path,\n    schemaType,\n    selected,\n    value\n  });\n}\nfunction RenderStyle({\n  renderStyle,\n  block,\n  children,\n  editorElementRef,\n  focused,\n  path,\n  schemaType,\n  selected,\n  value\n}) {\n  return renderStyle({\n    block,\n    children,\n    editorElementRef,\n    focused,\n    path,\n    schemaType,\n    selected,\n    value\n  });\n}\nfunction RenderElement(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(34), editorActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EditorActorContext), schema = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_23__.useSelector)(editorActor, _temp$3), legacySchema = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_23__.useSelector)(editorActor, _temp2$2), slateStatic = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSlateStatic)();\n  if (\"__inline\" in props.element && props.element.__inline === !0) {\n    let t02;\n    return $[0] !== legacySchema || $[1] !== props.attributes || $[2] !== props.children || $[3] !== props.element || $[4] !== props.readOnly || $[5] !== props.renderChild || $[6] !== schema ? (t02 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderInlineObject, { attributes: props.attributes, element: props.element, legacySchema, readOnly: props.readOnly, renderChild: props.renderChild, schema, children: props.children }), $[0] = legacySchema, $[1] = props.attributes, $[2] = props.children, $[3] = props.element, $[4] = props.readOnly, $[5] = props.renderChild, $[6] = schema, $[7] = t02) : t02 = $[7], t02;\n  }\n  let block, t0;\n  if ($[8] !== props.element._key || $[9] !== schema || $[10] !== slateStatic.blockIndexMap || $[11] !== slateStatic.value) {\n    const blockIndex = slateStatic.blockIndexMap.get(props.element._key);\n    block = blockIndex !== void 0 ? slateStatic.value.at(blockIndex) : void 0, t0 = (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)({\n      schema\n    }, block), $[8] = props.element._key, $[9] = schema, $[10] = slateStatic.blockIndexMap, $[11] = slateStatic.value, $[12] = block, $[13] = t0;\n  } else\n    block = $[12], t0 = $[13];\n  if (t0) {\n    let t12;\n    return $[14] !== block || $[15] !== legacySchema || $[16] !== props.attributes || $[17] !== props.children || $[18] !== props.element || $[19] !== props.readOnly || $[20] !== props.renderBlock || $[21] !== props.renderListItem || $[22] !== props.renderStyle || $[23] !== props.spellCheck ? (t12 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderTextBlock, { attributes: props.attributes, element: props.element, legacySchema, readOnly: props.readOnly, renderBlock: props.renderBlock, renderListItem: props.renderListItem, renderStyle: props.renderStyle, spellCheck: props.spellCheck, textBlock: block, children: props.children }), $[14] = block, $[15] = legacySchema, $[16] = props.attributes, $[17] = props.children, $[18] = props.element, $[19] = props.readOnly, $[20] = props.renderBlock, $[21] = props.renderListItem, $[22] = props.renderStyle, $[23] = props.spellCheck, $[24] = t12) : t12 = $[24], t12;\n  }\n  let t1;\n  return $[25] !== block || $[26] !== legacySchema || $[27] !== props.attributes || $[28] !== props.children || $[29] !== props.element || $[30] !== props.readOnly || $[31] !== props.renderBlock || $[32] !== schema ? (t1 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderBlockObject, { attributes: props.attributes, blockObject: block, element: props.element, legacySchema, readOnly: props.readOnly, renderBlock: props.renderBlock, schema, children: props.children }), $[25] = block, $[26] = legacySchema, $[27] = props.attributes, $[28] = props.children, $[29] = props.element, $[30] = props.readOnly, $[31] = props.renderBlock, $[32] = schema, $[33] = t1) : t1 = $[33], t1;\n}\nfunction _temp2$2(s_0) {\n  return s_0.context.getLegacySchema();\n}\nfunction _temp$3(s) {\n  return s.context.schema;\n}\nfunction defaultCompare(a, b) {\n  return a === b;\n}\nfunction useEditorSelector(editor, selector, t0) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(3), compare = t0 === void 0 ? defaultCompare : t0;\n  let t1;\n  return $[0] !== editor || $[1] !== selector ? (t1 = (editorActorSnapshot) => {\n    const snapshot = getEditorSnapshot({\n      editorActorSnapshot,\n      slateEditorInstance: editor._internal.slateEditor.instance\n    });\n    return selector(snapshot);\n  }, $[0] = editor, $[1] = selector, $[2] = t1) : t1 = $[2], (0,_xstate_react__WEBPACK_IMPORTED_MODULE_23__.useSelector)(editor._internal.editorActor, t1, compare);\n}\nfunction getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance\n}) {\n  const selection = slateEditorInstance.selection ? slateRangeToSelection({\n    schema: editorActorSnapshot.context.schema,\n    editor: slateEditorInstance,\n    range: slateEditorInstance.selection\n  }) : null;\n  return {\n    blockIndexMap: slateEditorInstance.blockIndexMap,\n    context: {\n      converters: [...editorActorSnapshot.context.converters],\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      readOnly: editorActorSnapshot.matches({\n        \"edit mode\": \"read only\"\n      }),\n      schema: editorActorSnapshot.context.schema,\n      selection,\n      value: slateEditorInstance.value\n    },\n    decoratorState: slateEditorInstance.decoratorState\n  };\n}\nfunction RenderSpan(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(40), slateEditor = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSlateStatic)(), editorActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EditorActorContext), legacySchema = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_23__.useSelector)(editorActor, _temp$2), spanRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n  let t0;\n  $[0] !== props.leaf._key || $[1] !== slateEditor ? (t0 = (editorActorSnapshot) => {\n    const snapshot = getEditorSnapshot({\n      editorActorSnapshot,\n      slateEditorInstance: slateEditor\n    });\n    if (!snapshot.context.selection || !(0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const focusedSpan = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusSpan)(snapshot);\n    return focusedSpan ? focusedSpan.node._key === props.leaf._key : !1;\n  }, $[0] = props.leaf._key, $[1] = slateEditor, $[2] = t0) : t0 = $[2];\n  const focused = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_23__.useSelector)(editorActor, t0);\n  let t1;\n  $[3] !== props.children.props.parent || $[4] !== props.leaf._key || $[5] !== props.leaf.text || $[6] !== slateEditor ? (t1 = (editorActorSnapshot_0) => {\n    const snapshot_0 = getEditorSnapshot({\n      editorActorSnapshot: editorActorSnapshot_0,\n      slateEditorInstance: slateEditor\n    });\n    if (!snapshot_0.context.selection)\n      return !1;\n    const parent = props.children.props.parent, block = parent && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(snapshot_0.context, parent) ? parent : void 0, spanSelection = block ? {\n      anchor: {\n        path: [{\n          _key: block._key\n        }, \"children\", {\n          _key: props.leaf._key\n        }],\n        offset: 0\n      },\n      focus: {\n        path: [{\n          _key: block._key\n        }, \"children\", {\n          _key: props.leaf._key\n        }],\n        offset: props.leaf.text.length\n      }\n    } : null;\n    return (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isOverlappingSelection)(spanSelection)(snapshot_0);\n  }, $[3] = props.children.props.parent, $[4] = props.leaf._key, $[5] = props.leaf.text, $[6] = slateEditor, $[7] = t1) : t1 = $[7];\n  const selected = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_23__.useSelector)(editorActor, t1), parent_0 = props.children.props.parent, block_0 = parent_0 && slateEditor.isTextBlock(parent_0) ? parent_0 : void 0;\n  let t2;\n  $[8] !== block_0 || $[9] !== props.leaf._key ? (t2 = block_0 ? [{\n    _key: block_0._key\n  }, \"children\", {\n    _key: props.leaf._key\n  }] : void 0, $[8] = block_0, $[9] = props.leaf._key, $[10] = t2) : t2 = $[10];\n  const path = t2;\n  let annotationMarkDefs, children;\n  if ($[11] !== block_0 || $[12] !== editorActor || $[13] !== focused || $[14] !== legacySchema || $[15] !== path || $[16] !== props.children || $[17] !== props.leaf.marks || $[18] !== props.renderAnnotation || $[19] !== props.renderDecorator || $[20] !== selected) {\n    const decoratorSchemaTypes = editorActor.getSnapshot().context.schema.decorators.map(_temp2$1), decorators = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_6__((props.leaf.marks ?? []).filter((mark) => decoratorSchemaTypes.includes(mark)));\n    annotationMarkDefs = (props.leaf.marks ?? []).flatMap((mark_0) => {\n      if (decoratorSchemaTypes.includes(mark_0))\n        return [];\n      const markDef_0 = block_0?.markDefs?.find((markDef) => markDef._key === mark_0);\n      return markDef_0 ? [markDef_0] : [];\n    }), children = props.children;\n    for (const mark_1 of decorators) {\n      const legacyDecoratorSchemaType = legacySchema.decorators.find((dec) => dec.value === mark_1);\n      path && legacyDecoratorSchemaType && props.renderDecorator && (children = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderDecorator, { renderDecorator: props.renderDecorator, editorElementRef: spanRef, focused, path, selected, schemaType: legacyDecoratorSchemaType, value: mark_1, type: legacyDecoratorSchemaType, children }));\n    }\n    for (const annotationMarkDef of annotationMarkDefs) {\n      const legacyAnnotationSchemaType = legacySchema.annotations.find((t) => t.name === annotationMarkDef._type);\n      legacyAnnotationSchemaType && (block_0 && path && props.renderAnnotation ? children = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { ref: spanRef, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderAnnotation, { renderAnnotation: props.renderAnnotation, block: block_0, editorElementRef: spanRef, focused, path, selected, schemaType: legacyAnnotationSchemaType, value: annotationMarkDef, type: legacyAnnotationSchemaType, children }) }) : children = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { ref: spanRef, children }));\n    }\n    $[11] = block_0, $[12] = editorActor, $[13] = focused, $[14] = legacySchema, $[15] = path, $[16] = props.children, $[17] = props.leaf.marks, $[18] = props.renderAnnotation, $[19] = props.renderDecorator, $[20] = selected, $[21] = annotationMarkDefs, $[22] = children;\n  } else\n    annotationMarkDefs = $[21], children = $[22];\n  if (block_0 && path && props.renderChild) {\n    let t32;\n    if ($[23] !== block_0.children || $[24] !== props.leaf) {\n      let t4;\n      $[26] !== props.leaf ? (t4 = (_child) => _child._key === props.leaf._key, $[26] = props.leaf, $[27] = t4) : t4 = $[27], t32 = block_0.children.find(t4), $[23] = block_0.children, $[24] = props.leaf, $[25] = t32;\n    } else\n      t32 = $[25];\n    const child = t32;\n    if (child) {\n      let t4;\n      $[28] !== annotationMarkDefs || $[29] !== child || $[30] !== children || $[31] !== focused || $[32] !== legacySchema.span || $[33] !== path || $[34] !== props.renderChild || $[35] !== selected ? (t4 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderChild, { renderChild: props.renderChild, annotations: annotationMarkDefs, editorElementRef: spanRef, focused, path, schemaType: legacySchema.span, selected, value: child, type: legacySchema.span, children }), $[28] = annotationMarkDefs, $[29] = child, $[30] = children, $[31] = focused, $[32] = legacySchema.span, $[33] = path, $[34] = props.renderChild, $[35] = selected, $[36] = t4) : t4 = $[36], children = t4;\n    }\n  }\n  let t3;\n  return $[37] !== children || $[38] !== props.attributes ? (t3 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { ...props.attributes, ref: spanRef, children }), $[37] = children, $[38] = props.attributes, $[39] = t3) : t3 = $[39], t3;\n}\nfunction _temp2$1(decorator) {\n  return decorator.name;\n}\nfunction _temp$2(s) {\n  return s.context.getLegacySchema();\n}\nfunction RenderAnnotation({\n  renderAnnotation,\n  block,\n  children,\n  editorElementRef,\n  focused,\n  path,\n  schemaType,\n  selected,\n  value,\n  type\n}) {\n  return renderAnnotation({\n    block,\n    children,\n    editorElementRef,\n    focused,\n    path,\n    schemaType,\n    selected,\n    value,\n    type\n  });\n}\nfunction RenderDecorator({\n  renderDecorator,\n  children,\n  editorElementRef,\n  focused,\n  path,\n  schemaType,\n  selected,\n  value,\n  type\n}) {\n  return renderDecorator({\n    children,\n    editorElementRef,\n    focused,\n    path,\n    schemaType,\n    selected,\n    value,\n    type\n  });\n}\nfunction RenderChild({\n  renderChild,\n  annotations,\n  children,\n  editorElementRef,\n  focused,\n  path,\n  schemaType,\n  selected,\n  value,\n  type\n}) {\n  return renderChild({\n    annotations,\n    children,\n    editorElementRef,\n    focused,\n    path,\n    schemaType,\n    selected,\n    value,\n    type\n  });\n}\nconst PLACEHOLDER_STYLE = {\n  position: \"absolute\",\n  userSelect: \"none\",\n  pointerEvents: \"none\",\n  left: 0,\n  right: 0\n};\nfunction RenderLeaf(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(12), editorActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EditorActorContext), schema = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_23__.useSelector)(editorActor, _temp$1);\n  if (props.leaf._type !== schema.span.name)\n    return props.children;\n  let t0;\n  $[0] !== props ? (t0 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderSpan, { ...props }), $[0] = props, $[1] = t0) : t0 = $[1];\n  let renderedSpan = t0;\n  if (props.renderPlaceholder && props.leaf.placeholder && props.text.text === \"\") {\n    let t1;\n    $[2] !== props.renderPlaceholder ? (t1 = props.renderPlaceholder(), $[2] = props.renderPlaceholder, $[3] = t1) : t1 = $[3];\n    let t2;\n    $[4] !== t1 ? (t2 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { style: PLACEHOLDER_STYLE, contentEditable: !1, children: t1 }), $[4] = t1, $[5] = t2) : t2 = $[5];\n    let t3;\n    return $[6] !== renderedSpan || $[7] !== t2 ? (t3 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [\n      t2,\n      renderedSpan\n    ] }), $[6] = renderedSpan, $[7] = t2, $[8] = t3) : t3 = $[8], t3;\n  }\n  const rangeDecoration = props.leaf.rangeDecoration;\n  if (rangeDecoration) {\n    let t1;\n    $[9] !== rangeDecoration || $[10] !== renderedSpan ? (t1 = rangeDecoration.component({\n      children: renderedSpan\n    }), $[9] = rangeDecoration, $[10] = renderedSpan, $[11] = t1) : t1 = $[11], renderedSpan = t1;\n  }\n  return renderedSpan;\n}\nfunction _temp$1(s) {\n  return s.context.schema;\n}\nfunction RenderText(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(5);\n  let t0;\n  return $[0] !== props.attributes || $[1] !== props.children || $[2] !== props.text._key || $[3] !== props.text._type ? (t0 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { ...props.attributes, \"data-child-key\": props.text._key, \"data-child-name\": props.text._type, \"data-child-type\": \"span\", children: props.children }), $[0] = props.attributes, $[1] = props.children, $[2] = props.text._key, $[3] = props.text._type, $[4] = t0) : t0 = $[4], t0;\n}\nconst PortableTextEditorContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null), usePortableTextEditor = () => {\n  const editor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(PortableTextEditorContext);\n  if (!editor)\n    throw new Error(\"The `usePortableTextEditor` hook must be used inside the <PortableTextEditor> component's context.\");\n  return editor;\n}, IS_MAC = typeof window < \"u\" && /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent), modifiers = {\n  alt: \"altKey\",\n  control: \"ctrlKey\",\n  meta: \"metaKey\",\n  shift: \"shiftKey\"\n}, aliases = {\n  add: \"+\",\n  break: \"pause\",\n  cmd: \"meta\",\n  command: \"meta\",\n  ctl: \"control\",\n  ctrl: \"control\",\n  del: \"delete\",\n  down: \"arrowdown\",\n  esc: \"escape\",\n  ins: \"insert\",\n  left: \"arrowleft\",\n  mod: IS_MAC ? \"meta\" : \"control\",\n  opt: \"alt\",\n  option: \"alt\",\n  return: \"enter\",\n  right: \"arrowright\",\n  space: \" \",\n  spacebar: \" \",\n  up: \"arrowup\",\n  win: \"meta\",\n  windows: \"meta\"\n}, keyCodes = {\n  backspace: 8,\n  tab: 9,\n  enter: 13,\n  shift: 16,\n  control: 17,\n  alt: 18,\n  pause: 19,\n  capslock: 20,\n  escape: 27,\n  \" \": 32,\n  pageup: 33,\n  pagedown: 34,\n  end: 35,\n  home: 36,\n  arrowleft: 37,\n  arrowup: 38,\n  arrowright: 39,\n  arrowdown: 40,\n  insert: 45,\n  delete: 46,\n  meta: 91,\n  numlock: 144,\n  scrolllock: 145,\n  \";\": 186,\n  \"=\": 187,\n  \",\": 188,\n  \"-\": 189,\n  \".\": 190,\n  \"/\": 191,\n  \"`\": 192,\n  \"[\": 219,\n  \"\\\\\": 220,\n  \"]\": 221,\n  \"'\": 222,\n  f1: 112,\n  f2: 113,\n  f3: 114,\n  f4: 115,\n  f5: 116,\n  f6: 117,\n  f7: 118,\n  f8: 119,\n  f9: 120,\n  f10: 121,\n  f11: 122,\n  f12: 123,\n  f13: 124,\n  f14: 125,\n  f15: 126,\n  f16: 127,\n  f17: 128,\n  f18: 129,\n  f19: 130,\n  f20: 131\n};\nfunction isHotkey(hotkey, event) {\n  return compareHotkey(parseHotkey(hotkey), event);\n}\nfunction parseHotkey(hotkey) {\n  const parsedHotkey = {\n    altKey: !1,\n    ctrlKey: !1,\n    metaKey: !1,\n    shiftKey: !1\n  }, hotkeySegments = hotkey.replace(\"++\", \"+add\").split(\"+\");\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional = rawHotkeySegment.endsWith(\"?\") && rawHotkeySegment.length > 1, hotkeySegment = optional ? rawHotkeySegment.slice(0, -1) : rawHotkeySegment, keyName = toKeyName(hotkeySegment), modifier = modifiers[keyName], alias = aliases[hotkeySegment], code2 = keyCodes[keyName];\n    if (hotkeySegment.length > 1 && modifier === void 0 && alias === void 0 && code2 === void 0)\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`);\n    (hotkeySegments.length === 1 || modifier === void 0) && (parsedHotkey.key = keyName, parsedHotkey.keyCode = toKeyCode(hotkeySegment)), modifier !== void 0 && (parsedHotkey[modifier] = optional ? null : !0);\n  }\n  return parsedHotkey;\n}\nfunction compareHotkey(parsedHotkey, event) {\n  return (parsedHotkey.altKey == null || parsedHotkey.altKey === event.altKey) && (parsedHotkey.ctrlKey == null || parsedHotkey.ctrlKey === event.ctrlKey) && (parsedHotkey.metaKey == null || parsedHotkey.metaKey === event.metaKey) && (parsedHotkey.shiftKey == null || parsedHotkey.shiftKey === event.shiftKey) ? parsedHotkey.keyCode !== void 0 && event.keyCode !== void 0 ? parsedHotkey.keyCode === 91 && event.keyCode === 93 ? !0 : parsedHotkey.keyCode === event.keyCode : parsedHotkey.keyCode === event.keyCode || parsedHotkey.key === event.key.toLowerCase() : !1;\n}\nfunction toKeyCode(name) {\n  const keyName = toKeyName(name);\n  return keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0);\n}\nfunction toKeyName(name) {\n  const keyName = name.toLowerCase();\n  return aliases[keyName] ?? keyName;\n}\nconst debug$f = debugWithName(\"plugin:withHotKeys\");\nfunction createWithHotkeys(editorActor, portableTextEditor, hotkeysFromOptions) {\n  const reservedHotkeys = [\"enter\", \"tab\", \"shift\", \"delete\", \"end\"], activeHotkeys = hotkeysFromOptions ?? {};\n  return function(editor) {\n    return editor.pteWithHotKeys = (event) => {\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === \"marks\")\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey))\n              throw new Error(`The hotkey ${hotkey} is reserved!`);\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault();\n              const possibleMark = activeHotkeys[cat];\n              if (possibleMark) {\n                const mark = possibleMark[hotkey];\n                debug$f(`HotKey ${hotkey} to toggle ${mark}`), editorActor.send({\n                  type: \"behavior event\",\n                  behaviorEvent: {\n                    type: \"decorator.toggle\",\n                    decorator: mark\n                  },\n                  editor\n                });\n              }\n            }\n          }\n        if (cat === \"custom\")\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey))\n              throw new Error(`The hotkey ${hotkey} is reserved!`);\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat];\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey];\n                command(event, portableTextEditor);\n              }\n            }\n          }\n      });\n    }, editor;\n  };\n}\nfunction moveRangeByOperation(range, operation) {\n  const anchor = slate__WEBPACK_IMPORTED_MODULE_14__.Point.transform(range.anchor, operation), focus = slate__WEBPACK_IMPORTED_MODULE_14__.Point.transform(range.focus, operation);\n  return anchor === null || focus === null ? null : slate__WEBPACK_IMPORTED_MODULE_14__.Point.equals(anchor, range.anchor) && slate__WEBPACK_IMPORTED_MODULE_14__.Point.equals(focus, range.focus) ? range : {\n    anchor,\n    focus\n  };\n}\nconst slateOperationCallback = ({\n  input,\n  sendBack\n}) => {\n  const originalApply = input.slateEditor.apply;\n  return input.slateEditor.apply = (op) => {\n    op.type !== \"set_selection\" && sendBack({\n      type: \"slate operation\",\n      operation: op\n    }), originalApply(op);\n  }, () => {\n    input.slateEditor.apply = originalApply;\n  };\n}, rangeDecorationsMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_24__.setup)({\n  types: {\n    context: {},\n    input: {},\n    events: {}\n  },\n  actions: {\n    \"update pending range decorations\": (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n      pendingRangeDecorations: ({\n        context,\n        event\n      }) => event.type !== \"range decorations updated\" ? context.pendingRangeDecorations : event.rangeDecorations\n    }),\n    \"set up initial range decorations\": ({\n      context\n    }) => {\n      const rangeDecorationState = [];\n      for (const rangeDecoration of context.pendingRangeDecorations) {\n        const slateRange = toSlateRange({\n          context: {\n            schema: context.schema,\n            value: context.slateEditor.value,\n            selection: rangeDecoration.selection\n          },\n          blockIndexMap: context.slateEditor.blockIndexMap\n        });\n        if (!slate__WEBPACK_IMPORTED_MODULE_14__.Range.isRange(slateRange)) {\n          rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration,\n            origin: \"local\"\n          });\n          continue;\n        }\n        rangeDecorationState.push({\n          rangeDecoration,\n          ...slateRange\n        });\n      }\n      context.slateEditor.decoratedRanges = rangeDecorationState;\n    },\n    \"update range decorations\": ({\n      context,\n      event\n    }) => {\n      if (event.type !== \"range decorations updated\")\n        return;\n      const rangeDecorationState = [];\n      for (const rangeDecoration of event.rangeDecorations) {\n        const slateRange = toSlateRange({\n          context: {\n            schema: context.schema,\n            value: context.slateEditor.value,\n            selection: rangeDecoration.selection\n          },\n          blockIndexMap: context.slateEditor.blockIndexMap\n        });\n        if (!slate__WEBPACK_IMPORTED_MODULE_14__.Range.isRange(slateRange)) {\n          rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration,\n            origin: \"local\"\n          });\n          continue;\n        }\n        rangeDecorationState.push({\n          rangeDecoration,\n          ...slateRange\n        });\n      }\n      context.slateEditor.decoratedRanges = rangeDecorationState;\n    },\n    \"move range decorations\": ({\n      context,\n      event\n    }) => {\n      if (event.type !== \"slate operation\")\n        return;\n      const rangeDecorationState = [];\n      for (const decoratedRange of context.slateEditor.decoratedRanges) {\n        const slateRange = toSlateRange({\n          context: {\n            schema: context.schema,\n            value: context.slateEditor.value,\n            selection: decoratedRange.rangeDecoration.selection\n          },\n          blockIndexMap: context.slateEditor.blockIndexMap\n        });\n        if (!slate__WEBPACK_IMPORTED_MODULE_14__.Range.isRange(slateRange)) {\n          decoratedRange.rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration: decoratedRange.rangeDecoration,\n            origin: \"local\"\n          });\n          continue;\n        }\n        let newRange;\n        if (newRange = moveRangeByOperation(slateRange, event.operation), newRange && newRange !== slateRange || newRange === null && slateRange) {\n          const newRangeSelection = newRange ? slateRangeToSelection({\n            schema: context.schema,\n            editor: context.slateEditor,\n            range: newRange\n          }) : null;\n          decoratedRange.rangeDecoration.onMoved?.({\n            newSelection: newRangeSelection,\n            rangeDecoration: decoratedRange.rangeDecoration,\n            origin: \"local\"\n          });\n        }\n        newRange !== null && rangeDecorationState.push({\n          ...newRange || slateRange,\n          rangeDecoration: {\n            ...decoratedRange.rangeDecoration,\n            selection: slateRangeToSelection({\n              schema: context.schema,\n              editor: context.slateEditor,\n              range: newRange\n            })\n          }\n        });\n      }\n      context.slateEditor.decoratedRanges = rangeDecorationState;\n    },\n    \"assign readOnly\": (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n      readOnly: ({\n        context,\n        event\n      }) => event.type !== \"update read only\" ? context.readOnly : event.readOnly\n    }),\n    \"update decorate\": (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n      decorate: ({\n        context\n      }) => ({\n        fn: createDecorate(context.schema, context.slateEditor)\n      })\n    })\n  },\n  actors: {\n    \"slate operation listener\": (0,xstate__WEBPACK_IMPORTED_MODULE_26__.fromCallback)(slateOperationCallback)\n  },\n  guards: {\n    \"has pending range decorations\": ({\n      context\n    }) => context.pendingRangeDecorations.length > 0,\n    \"has range decorations\": ({\n      context\n    }) => context.slateEditor.decoratedRanges.length > 0,\n    \"has different decorations\": ({\n      context,\n      event\n    }) => {\n      if (event.type !== \"range decorations updated\")\n        return !1;\n      const existingRangeDecorations = context.slateEditor.decoratedRanges.map((decoratedRange) => ({\n        anchor: decoratedRange.rangeDecoration.selection?.anchor,\n        focus: decoratedRange.rangeDecoration.selection?.focus,\n        payload: decoratedRange.rangeDecoration.payload\n      })), newRangeDecorations = event.rangeDecorations.map((rangeDecoration) => ({\n        anchor: rangeDecoration.selection?.anchor,\n        focus: rangeDecoration.selection?.focus,\n        payload: rangeDecoration.payload\n      }));\n      return !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(existingRangeDecorations, newRangeDecorations);\n    },\n    \"not read only\": ({\n      context\n    }) => !context.readOnly,\n    \"should skip setup\": ({\n      context\n    }) => context.skipSetup\n  }\n}).createMachine({\n  id: \"range decorations\",\n  context: ({\n    input\n  }) => ({\n    readOnly: input.readOnly,\n    pendingRangeDecorations: input.rangeDecorations,\n    decoratedRanges: [],\n    skipSetup: input.skipSetup,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n    decorate: {\n      fn: createDecorate(input.schema, input.slateEditor)\n    }\n  }),\n  invoke: {\n    src: \"slate operation listener\",\n    input: ({\n      context\n    }) => ({\n      slateEditor: context.slateEditor\n    })\n  },\n  on: {\n    \"update read only\": {\n      actions: [\"assign readOnly\"]\n    }\n  },\n  initial: \"setting up\",\n  states: {\n    \"setting up\": {\n      always: [{\n        guard: (0,xstate__WEBPACK_IMPORTED_MODULE_27__.d)([\"should skip setup\", \"has pending range decorations\"]),\n        target: \"ready\",\n        actions: [\"set up initial range decorations\", \"update decorate\"]\n      }, {\n        guard: \"should skip setup\",\n        target: \"ready\"\n      }],\n      on: {\n        \"range decorations updated\": {\n          actions: [\"update pending range decorations\"]\n        },\n        ready: [{\n          target: \"ready\",\n          guard: \"has pending range decorations\",\n          actions: [\"set up initial range decorations\", \"update decorate\"]\n        }, {\n          target: \"ready\"\n        }]\n      }\n    },\n    ready: {\n      initial: \"idle\",\n      on: {\n        \"range decorations updated\": {\n          target: \".idle\",\n          guard: \"has different decorations\",\n          actions: [\"update range decorations\", \"update decorate\"]\n        }\n      },\n      states: {\n        idle: {\n          on: {\n            \"slate operation\": {\n              target: \"moving range decorations\",\n              guard: (0,xstate__WEBPACK_IMPORTED_MODULE_27__.d)([\"has range decorations\", \"not read only\"])\n            }\n          }\n        },\n        \"moving range decorations\": {\n          entry: [\"move range decorations\"],\n          always: {\n            target: \"idle\"\n          }\n        }\n      }\n    }\n  }\n});\nfunction createDecorate(schema, slateEditor) {\n  return function([node, path]) {\n    if (isEqualToEmptyEditor(slateEditor.children, schema))\n      return [{\n        anchor: {\n          path: [0, 0],\n          offset: 0\n        },\n        focus: {\n          path: [0, 0],\n          offset: 0\n        },\n        placeholder: !0\n      }];\n    if (path.length === 0)\n      return [];\n    if (!slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(node) || node.children.length === 0)\n      return [];\n    const blockIndex = path.at(0);\n    return blockIndex === void 0 ? [] : slateEditor.decoratedRanges.filter((decoratedRange) => slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(decoratedRange) ? node.children.some((_, childIndex) => slate__WEBPACK_IMPORTED_MODULE_14__.Path.equals(decoratedRange.anchor.path, [blockIndex, childIndex]) && slate__WEBPACK_IMPORTED_MODULE_14__.Path.equals(decoratedRange.focus.path, [blockIndex, childIndex])) : slate__WEBPACK_IMPORTED_MODULE_14__.Range.intersection(decoratedRange, {\n      anchor: {\n        path,\n        offset: 0\n      },\n      focus: {\n        path,\n        offset: 0\n      }\n    }) || slate__WEBPACK_IMPORTED_MODULE_14__.Range.includes(decoratedRange, path));\n  };\n}\nconst RelayActorContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({}), debug$e = debugWithName(\"validate selection machine\"), validateSelectionSetup = (0,xstate__WEBPACK_IMPORTED_MODULE_24__.setup)({\n  types: {\n    context: {},\n    input: {},\n    events: {}\n  },\n  guards: {\n    \"pending operations\": ({\n      context\n    }) => context.slateEditor.operations.length > 0\n  }\n}), validateSelectionAction = validateSelectionSetup.createAction(({\n  context,\n  event\n}) => {\n  validateSelection(context.slateEditor, event.editorElement);\n}), validateSelectionMachine = validateSelectionSetup.createMachine({\n  id: \"validate selection\",\n  context: ({\n    input\n  }) => ({\n    slateEditor: input.slateEditor\n  }),\n  initial: \"idle\",\n  states: {\n    idle: {\n      on: {\n        \"validate selection\": [{\n          guard: \"pending operations\",\n          target: \"waiting\"\n        }, {\n          actions: [validateSelectionAction],\n          target: \"idle\"\n        }]\n      }\n    },\n    waiting: {\n      after: {\n        0: [{\n          guard: \"pending operations\",\n          target: \".\",\n          reenter: !0\n        }, {\n          target: \"idle\",\n          actions: [validateSelectionAction]\n        }]\n      },\n      on: {\n        \"validate selection\": {\n          target: \".\",\n          reenter: !0\n        }\n      }\n    }\n  }\n});\nfunction validateSelection(slateEditor, editorElement) {\n  if (!slateEditor.selection)\n    return;\n  let root;\n  try {\n    root = slate_react__WEBPACK_IMPORTED_MODULE_22__.ReactEditor.findDocumentOrShadowRoot(slateEditor);\n  } catch {\n  }\n  if (!root || editorElement !== root.activeElement)\n    return;\n  const domSelection = slate_react__WEBPACK_IMPORTED_MODULE_22__.ReactEditor.getWindow(slateEditor).getSelection();\n  if (!domSelection || domSelection.rangeCount === 0)\n    return;\n  const existingDOMRange = domSelection.getRangeAt(0);\n  try {\n    const newDOMRange = slate_react__WEBPACK_IMPORTED_MODULE_22__.ReactEditor.toDOMRange(slateEditor, slateEditor.selection);\n    (newDOMRange.startOffset !== existingDOMRange.startOffset || newDOMRange.endOffset !== existingDOMRange.endOffset) && (debug$e(\"DOM range out of sync, validating selection\"), domSelection?.removeAllRanges(), domSelection.addRange(newDOMRange));\n  } catch {\n    debug$e(\"Could not resolve selection, selecting top document\"), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(slateEditor), slateEditor.children.length > 0 && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(slateEditor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(slateEditor, [])), slateEditor.onChange();\n  }\n}\nconst IS_PROCESSING_REMOTE_CHANGES = /* @__PURE__ */ new WeakMap(), KEY_TO_SLATE_ELEMENT = /* @__PURE__ */ new WeakMap(), KEY_TO_VALUE_ELEMENT = /* @__PURE__ */ new WeakMap(), SLATE_TO_PORTABLE_TEXT_RANGE = /* @__PURE__ */ new WeakMap(), debug$d = debugWithName(\"component:Editable\"), PortableTextEditable = (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(props, forwardedRef) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(174);\n  let hotkeys, onBeforeInput, onBlur, onClick, onCopy, onCut, onDrag, onDragEnd, onDragEnter, onDragLeave, onDragOver, onDragStart, onDrop, onFocus, onPaste, propsSelection, rangeDecorations, renderAnnotation, renderBlock, renderChild, renderDecorator, renderListItem, renderPlaceholder, renderStyle, restProps, scrollSelectionIntoView, spellCheck;\n  $[0] !== props ? ({\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onCut,\n    onClick,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    onDragEnter,\n    onDragOver,\n    onDrop,\n    onDragLeave,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props, $[0] = props, $[1] = hotkeys, $[2] = onBeforeInput, $[3] = onBlur, $[4] = onClick, $[5] = onCopy, $[6] = onCut, $[7] = onDrag, $[8] = onDragEnd, $[9] = onDragEnter, $[10] = onDragLeave, $[11] = onDragOver, $[12] = onDragStart, $[13] = onDrop, $[14] = onFocus, $[15] = onPaste, $[16] = propsSelection, $[17] = rangeDecorations, $[18] = renderAnnotation, $[19] = renderBlock, $[20] = renderChild, $[21] = renderDecorator, $[22] = renderListItem, $[23] = renderPlaceholder, $[24] = renderStyle, $[25] = restProps, $[26] = scrollSelectionIntoView, $[27] = spellCheck) : (hotkeys = $[1], onBeforeInput = $[2], onBlur = $[3], onClick = $[4], onCopy = $[5], onCut = $[6], onDrag = $[7], onDragEnd = $[8], onDragEnter = $[9], onDragLeave = $[10], onDragOver = $[11], onDragStart = $[12], onDrop = $[13], onFocus = $[14], onPaste = $[15], propsSelection = $[16], rangeDecorations = $[17], renderAnnotation = $[18], renderBlock = $[19], renderChild = $[20], renderDecorator = $[21], renderListItem = $[22], renderPlaceholder = $[23], renderStyle = $[24], restProps = $[25], scrollSelectionIntoView = $[26], spellCheck = $[27]);\n  const portableTextEditor = usePortableTextEditor(), [hasInvalidValue, setHasInvalidValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1), editorActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EditorActorContext), relayActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(RelayActorContext), readOnly = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_23__.useSelector)(editorActor, _temp), slateEditor = (0,slate_react__WEBPACK_IMPORTED_MODULE_22__.useSlate)();\n  let t0;\n  $[28] !== slateEditor ? (t0 = {\n    input: {\n      slateEditor\n    }\n  }, $[28] = slateEditor, $[29] = t0) : t0 = $[29];\n  const validateSelectionActor = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_23__.useActorRef)(validateSelectionMachine, t0);\n  let t1;\n  $[30] !== rangeDecorations ? (t1 = rangeDecorations ?? [], $[30] = rangeDecorations, $[31] = t1) : t1 = $[31];\n  let t2;\n  $[32] !== editorActor ? (t2 = editorActor.getSnapshot(), $[32] = editorActor, $[33] = t2) : t2 = $[33];\n  const t3 = !editorActor.getSnapshot().matches({\n    setup: \"setting up\"\n  });\n  let t4;\n  $[34] !== readOnly || $[35] !== slateEditor || $[36] !== t1 || $[37] !== t2.context.schema || $[38] !== t3 ? (t4 = {\n    input: {\n      rangeDecorations: t1,\n      readOnly,\n      schema: t2.context.schema,\n      slateEditor,\n      skipSetup: t3\n    }\n  }, $[34] = readOnly, $[35] = slateEditor, $[36] = t1, $[37] = t2.context.schema, $[38] = t3, $[39] = t4) : t4 = $[39];\n  const rangeDecorationsActor = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_23__.useActorRef)(rangeDecorationsMachine, t4), decorate = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_23__.useSelector)(rangeDecorationsActor, _temp2);\n  let t5, t6;\n  $[40] !== rangeDecorationsActor || $[41] !== readOnly ? (t5 = () => {\n    rangeDecorationsActor.send({\n      type: \"update read only\",\n      readOnly\n    });\n  }, t6 = [rangeDecorationsActor, readOnly], $[40] = rangeDecorationsActor, $[41] = readOnly, $[42] = t5, $[43] = t6) : (t5 = $[42], t6 = $[43]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t5, t6);\n  let t7, t8;\n  $[44] !== rangeDecorations || $[45] !== rangeDecorationsActor ? (t7 = () => {\n    rangeDecorationsActor.send({\n      type: \"range decorations updated\",\n      rangeDecorations: rangeDecorations ?? []\n    });\n  }, t8 = [rangeDecorationsActor, rangeDecorations], $[44] = rangeDecorations, $[45] = rangeDecorationsActor, $[46] = t7, $[47] = t8) : (t7 = $[46], t8 = $[47]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t7, t8);\n  bb0: {\n    if (readOnly)\n      break bb0;\n    createWithHotkeys(editorActor, portableTextEditor, hotkeys)(slateEditor);\n  }\n  let t10;\n  $[48] !== readOnly || $[49] !== renderBlock || $[50] !== renderChild || $[51] !== renderListItem || $[52] !== renderStyle || $[53] !== spellCheck ? (t10 = (eProps) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderElement, { ...eProps, readOnly, renderBlock, renderChild, renderListItem, renderStyle, spellCheck }), $[48] = readOnly, $[49] = renderBlock, $[50] = renderChild, $[51] = renderListItem, $[52] = renderStyle, $[53] = spellCheck, $[54] = t10) : t10 = $[54];\n  const renderElement = t10;\n  let t11;\n  $[55] !== readOnly || $[56] !== renderAnnotation || $[57] !== renderChild || $[58] !== renderDecorator || $[59] !== renderPlaceholder ? (t11 = (leafProps) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderLeaf, { ...leafProps, readOnly, renderAnnotation, renderChild, renderDecorator, renderPlaceholder }), $[55] = readOnly, $[56] = renderAnnotation, $[57] = renderChild, $[58] = renderDecorator, $[59] = renderPlaceholder, $[60] = t11) : t11 = $[60];\n  const renderLeaf = t11, renderText = _temp3;\n  let t12;\n  $[61] !== editorActor || $[62] !== propsSelection || $[63] !== slateEditor ? (t12 = () => {\n    if (propsSelection) {\n      debug$d(`Selection from props ${JSON.stringify(propsSelection)}`);\n      const normalizedSelection = normalizeSelection(propsSelection, fromSlateValue(slateEditor.children, editorActor.getSnapshot().context.schema.block.name));\n      if (normalizedSelection !== null) {\n        debug$d(`Normalized selection from props ${JSON.stringify(normalizedSelection)}`);\n        const slateRange = toSlateRange({\n          context: {\n            schema: editorActor.getSnapshot().context.schema,\n            value: slateEditor.value,\n            selection: normalizedSelection\n          },\n          blockIndexMap: slateEditor.blockIndexMap\n        });\n        slateRange && (slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(slateEditor, slateRange), slateEditor.operations.some(_temp4) || editorActor.send({\n          type: \"update selection\",\n          selection: normalizedSelection\n        }), slateEditor.onChange());\n      }\n    }\n  }, $[61] = editorActor, $[62] = propsSelection, $[63] = slateEditor, $[64] = t12) : t12 = $[64];\n  const restoreSelectionFromProps = t12;\n  let t13, t14;\n  $[65] !== editorActor || $[66] !== rangeDecorationsActor || $[67] !== restoreSelectionFromProps ? (t13 = () => {\n    const onReady = editorActor.on(\"ready\", () => {\n      rangeDecorationsActor.send({\n        type: \"ready\"\n      }), restoreSelectionFromProps();\n    }), onInvalidValue = editorActor.on(\"invalid value\", () => {\n      setHasInvalidValue(!0);\n    }), onValueChanged = editorActor.on(\"value changed\", () => {\n      setHasInvalidValue(!1);\n    });\n    return () => {\n      onReady.unsubscribe(), onInvalidValue.unsubscribe(), onValueChanged.unsubscribe();\n    };\n  }, t14 = [rangeDecorationsActor, editorActor, restoreSelectionFromProps], $[65] = editorActor, $[66] = rangeDecorationsActor, $[67] = restoreSelectionFromProps, $[68] = t13, $[69] = t14) : (t13 = $[68], t14 = $[69]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t13, t14);\n  let t15, t16;\n  $[70] !== hasInvalidValue || $[71] !== propsSelection || $[72] !== restoreSelectionFromProps ? (t15 = () => {\n    propsSelection && !hasInvalidValue && restoreSelectionFromProps();\n  }, t16 = [hasInvalidValue, propsSelection, restoreSelectionFromProps], $[70] = hasInvalidValue, $[71] = propsSelection, $[72] = restoreSelectionFromProps, $[73] = t15, $[74] = t16) : (t15 = $[73], t16 = $[74]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t15, t16);\n  let t17;\n  $[75] !== editorActor || $[76] !== onCopy || $[77] !== slateEditor ? (t17 = (event) => {\n    if (onCopy)\n      onCopy(event) !== void 0 && event.preventDefault();\n    else if (event.nativeEvent.clipboardData) {\n      event.stopPropagation(), event.preventDefault();\n      const selection = slateEditor.selection ? slateRangeToSelection({\n        schema: editorActor.getSnapshot().context.schema,\n        editor: slateEditor,\n        range: slateEditor.selection\n      }) : void 0, position = selection ? {\n        selection\n      } : void 0;\n      if (!position) {\n        console.warn(\"Could not find position for copy event\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"clipboard.copy\",\n          originEvent: {\n            dataTransfer: event.nativeEvent.clipboardData\n          },\n          position\n        },\n        editor: slateEditor,\n        nativeEvent: event\n      });\n    }\n  }, $[75] = editorActor, $[76] = onCopy, $[77] = slateEditor, $[78] = t17) : t17 = $[78];\n  const handleCopy = t17;\n  let t18;\n  $[79] !== editorActor || $[80] !== onCut || $[81] !== slateEditor ? (t18 = (event_0) => {\n    if (onCut)\n      onCut(event_0) !== void 0 && event_0.preventDefault();\n    else if (event_0.nativeEvent.clipboardData) {\n      event_0.stopPropagation(), event_0.preventDefault();\n      const selection_0 = editorActor.getSnapshot().context.selection, position_0 = selection_0 ? {\n        selection: selection_0\n      } : void 0;\n      if (!position_0) {\n        console.warn(\"Could not find position for cut event\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"clipboard.cut\",\n          originEvent: {\n            dataTransfer: event_0.nativeEvent.clipboardData\n          },\n          position: position_0\n        },\n        editor: slateEditor,\n        nativeEvent: event_0\n      });\n    }\n  }, $[79] = editorActor, $[80] = onCut, $[81] = slateEditor, $[82] = t18) : t18 = $[82];\n  const handleCut = t18;\n  let t19;\n  $[83] !== editorActor || $[84] !== onPaste || $[85] !== portableTextEditor || $[86] !== relayActor || $[87] !== slateEditor ? (t19 = (event_1) => {\n    const value = fromSlateValue(slateEditor.children, editorActor.getSnapshot().context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(slateEditor)), path = (slateEditor.selection ? slateRangeToSelection({\n      schema: editorActor.getSnapshot().context.schema,\n      editor: slateEditor,\n      range: slateEditor.selection\n    }) : null)?.focus.path || [], onPasteResult = onPaste?.({\n      event: event_1,\n      value,\n      path,\n      schemaTypes: portableTextEditor.schemaTypes\n    });\n    if (onPasteResult || !slateEditor.selection)\n      event_1.preventDefault(), relayActor.send({\n        type: \"loading\"\n      }), Promise.resolve(onPasteResult).then((result_1) => {\n        if (debug$d(\"Custom paste function from client resolved\", result_1), !result_1 || !result_1.insert) {\n          debug$d(\"No result from custom paste handler, pasting normally\");\n          const selection_1 = editorActor.getSnapshot().context.selection, position_1 = selection_1 ? {\n            selection: selection_1\n          } : void 0;\n          if (!position_1) {\n            console.warn(\"Could not find position for paste event\");\n            return;\n          }\n          editorActor.send({\n            type: \"behavior event\",\n            behaviorEvent: {\n              type: \"clipboard.paste\",\n              originEvent: {\n                dataTransfer: event_1.clipboardData\n              },\n              position: position_1\n            },\n            editor: slateEditor,\n            nativeEvent: event_1\n          });\n        } else\n          result_1.insert ? editorActor.send({\n            type: \"behavior event\",\n            behaviorEvent: {\n              type: \"insert.blocks\",\n              blocks: (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.parseBlocks)({\n                context: {\n                  keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n                  schema: editorActor.getSnapshot().context.schema\n                },\n                blocks: result_1.insert,\n                options: {\n                  removeUnusedMarkDefs: !0,\n                  validateFields: !1\n                }\n              }),\n              placement: \"auto\"\n            },\n            editor: slateEditor\n          }) : console.warn(\"Your onPaste function returned something unexpected:\", result_1);\n      }).catch(_temp5).finally(() => {\n        relayActor.send({\n          type: \"done loading\"\n        });\n      });\n    else if (event_1.nativeEvent.clipboardData) {\n      event_1.preventDefault(), event_1.stopPropagation();\n      const selection_2 = editorActor.getSnapshot().context.selection, position_2 = selection_2 ? {\n        selection: selection_2\n      } : void 0;\n      if (!position_2) {\n        console.warn(\"Could not find position for paste event\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"clipboard.paste\",\n          originEvent: {\n            dataTransfer: event_1.nativeEvent.clipboardData\n          },\n          position: position_2\n        },\n        editor: slateEditor,\n        nativeEvent: event_1\n      });\n    }\n    debug$d(\"No result from custom paste handler, pasting normally\");\n  }, $[83] = editorActor, $[84] = onPaste, $[85] = portableTextEditor, $[86] = relayActor, $[87] = slateEditor, $[88] = t19) : t19 = $[88];\n  const handlePaste = t19;\n  let t20;\n  $[89] !== editorActor || $[90] !== onFocus || $[91] !== relayActor || $[92] !== slateEditor ? (t20 = (event_2) => {\n    onFocus && onFocus(event_2), event_2.isDefaultPrevented() || (relayActor.send({\n      type: \"focused\",\n      event: event_2\n    }), !slateEditor.selection && isEqualToEmptyEditor(slateEditor.children, editorActor.getSnapshot().context.schema) && (slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(slateEditor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(slateEditor, [])), slateEditor.onChange()));\n  }, $[89] = editorActor, $[90] = onFocus, $[91] = relayActor, $[92] = slateEditor, $[93] = t20) : t20 = $[93];\n  const handleOnFocus = t20;\n  let t21;\n  $[94] !== editorActor || $[95] !== onClick || $[96] !== slateEditor ? (t21 = (event_3) => {\n    if (onClick && onClick(event_3), event_3.isDefaultPrevented() || event_3.isPropagationStopped())\n      return;\n    const position_3 = getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_3.nativeEvent\n    });\n    position_3 && editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"mouse.click\",\n        position: position_3\n      },\n      editor: slateEditor,\n      nativeEvent: event_3\n    });\n  }, $[94] = editorActor, $[95] = onClick, $[96] = slateEditor, $[97] = t21) : t21 = $[97];\n  const handleClick = t21;\n  let t22;\n  $[98] !== onBlur || $[99] !== relayActor ? (t22 = (event_4) => {\n    onBlur && onBlur(event_4), event_4.isPropagationStopped() || relayActor.send({\n      type: \"blurred\",\n      event: event_4\n    });\n  }, $[98] = onBlur, $[99] = relayActor, $[100] = t22) : t22 = $[100];\n  const handleOnBlur = t22;\n  let t23;\n  $[101] !== onBeforeInput ? (t23 = (event_5) => {\n    onBeforeInput && onBeforeInput(event_5);\n  }, $[101] = onBeforeInput, $[102] = t23) : t23 = $[102];\n  const handleOnBeforeInput = t23;\n  let t24;\n  $[103] !== editorActor || $[104] !== props || $[105] !== slateEditor ? (t24 = (event_6) => {\n    props.onKeyDown && props.onKeyDown(event_6), event_6.isDefaultPrevented() || slateEditor.pteWithHotKeys(event_6), event_6.isDefaultPrevented() || editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"keyboard.keydown\",\n        originEvent: {\n          key: event_6.key,\n          code: event_6.code,\n          altKey: event_6.altKey,\n          ctrlKey: event_6.ctrlKey,\n          metaKey: event_6.metaKey,\n          shiftKey: event_6.shiftKey\n        }\n      },\n      editor: slateEditor,\n      nativeEvent: event_6\n    });\n  }, $[103] = editorActor, $[104] = props, $[105] = slateEditor, $[106] = t24) : t24 = $[106];\n  const handleKeyDown = t24;\n  let t25;\n  $[107] !== editorActor || $[108] !== props || $[109] !== slateEditor ? (t25 = (event_7) => {\n    props.onKeyUp && props.onKeyUp(event_7), event_7.isDefaultPrevented() || editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"keyboard.keyup\",\n        originEvent: {\n          key: event_7.key,\n          code: event_7.code,\n          altKey: event_7.altKey,\n          ctrlKey: event_7.ctrlKey,\n          metaKey: event_7.metaKey,\n          shiftKey: event_7.shiftKey\n        }\n      },\n      editor: slateEditor,\n      nativeEvent: event_7\n    });\n  }, $[107] = editorActor, $[108] = props, $[109] = slateEditor, $[110] = t25) : t25 = $[110];\n  const handleKeyUp = t25;\n  let t26;\n  bb1: {\n    if (scrollSelectionIntoView === void 0) {\n      t26 = void 0;\n      break bb1;\n    }\n    if (scrollSelectionIntoView === null) {\n      t26 = lodash_noop_js__WEBPACK_IMPORTED_MODULE_3__;\n      break bb1;\n    }\n    let t272;\n    $[111] !== portableTextEditor || $[112] !== scrollSelectionIntoView ? (t272 = (_editor, domRange) => {\n      scrollSelectionIntoView(portableTextEditor, domRange);\n    }, $[111] = portableTextEditor, $[112] = scrollSelectionIntoView, $[113] = t272) : t272 = $[113], t26 = t272;\n  }\n  const scrollSelectionIntoViewToSlate = t26;\n  let t27, t28;\n  $[114] !== editorActor || $[115] !== slateEditor ? (t27 = () => {\n    const window2 = slate_react__WEBPACK_IMPORTED_MODULE_22__.ReactEditor.getWindow(slateEditor), onDragEnd_0 = () => {\n      editorActor.send({\n        type: \"dragend\"\n      });\n    }, onDrop_0 = () => {\n      editorActor.send({\n        type: \"drop\"\n      });\n    };\n    return window2.document.addEventListener(\"dragend\", onDragEnd_0), window2.document.addEventListener(\"drop\", onDrop_0), () => {\n      window2.document.removeEventListener(\"dragend\", onDragEnd_0), window2.document.removeEventListener(\"drop\", onDrop_0);\n    };\n  }, t28 = [slateEditor, editorActor], $[114] = editorActor, $[115] = slateEditor, $[116] = t27, $[117] = t28) : (t27 = $[116], t28 = $[117]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t27, t28);\n  let t29;\n  $[118] !== editorActor || $[119] !== onDragStart || $[120] !== slateEditor ? (t29 = (event_8) => {\n    if (onDragStart?.(event_8), event_8.isDefaultPrevented() || event_8.isPropagationStopped())\n      return;\n    const position_4 = getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_8.nativeEvent\n    });\n    if (!position_4) {\n      console.warn(\"Could not find position for dragstart event\");\n      return;\n    }\n    return editorActor.send({\n      type: \"dragstart\",\n      origin: position_4\n    }), editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"drag.dragstart\",\n        originEvent: {\n          clientX: event_8.clientX,\n          clientY: event_8.clientY,\n          dataTransfer: event_8.dataTransfer\n        },\n        position: position_4\n      },\n      editor: slateEditor\n    }), !0;\n  }, $[118] = editorActor, $[119] = onDragStart, $[120] = slateEditor, $[121] = t29) : t29 = $[121];\n  const handleDragStart = t29;\n  let t30;\n  $[122] !== editorActor || $[123] !== onDrag || $[124] !== slateEditor ? (t30 = (event_9) => {\n    if (onDrag?.(event_9), !(event_9.isDefaultPrevented() || event_9.isPropagationStopped() || !getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_9.nativeEvent\n    })))\n      return editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"drag.drag\",\n          originEvent: {\n            dataTransfer: event_9.dataTransfer\n          }\n        },\n        editor: slateEditor\n      }), !0;\n  }, $[122] = editorActor, $[123] = onDrag, $[124] = slateEditor, $[125] = t30) : t30 = $[125];\n  const handleDrag = t30;\n  let t31;\n  $[126] !== editorActor || $[127] !== onDragEnd || $[128] !== slateEditor ? (t31 = (event_10) => {\n    if (onDragEnd?.(event_10), !(event_10.isDefaultPrevented() || event_10.isPropagationStopped()))\n      return editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"drag.dragend\",\n          originEvent: {\n            dataTransfer: event_10.dataTransfer\n          }\n        },\n        editor: slateEditor\n      }), !0;\n  }, $[126] = editorActor, $[127] = onDragEnd, $[128] = slateEditor, $[129] = t31) : t31 = $[129];\n  const handleDragEnd = t31;\n  let t32;\n  $[130] !== editorActor || $[131] !== onDragEnter || $[132] !== slateEditor ? (t32 = (event_11) => {\n    if (onDragEnter?.(event_11), event_11.isDefaultPrevented() || event_11.isPropagationStopped())\n      return;\n    const position_6 = getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_11.nativeEvent\n    });\n    if (position_6)\n      return editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"drag.dragenter\",\n          originEvent: {\n            dataTransfer: event_11.dataTransfer\n          },\n          position: position_6\n        },\n        editor: slateEditor\n      }), !0;\n  }, $[130] = editorActor, $[131] = onDragEnter, $[132] = slateEditor, $[133] = t32) : t32 = $[133];\n  const handleDragEnter = t32;\n  let t33;\n  $[134] !== editorActor || $[135] !== onDragOver || $[136] !== slateEditor ? (t33 = (event_12) => {\n    if (onDragOver?.(event_12), event_12.isDefaultPrevented() || event_12.isPropagationStopped())\n      return;\n    const position_7 = getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_12.nativeEvent\n    });\n    if (position_7)\n      return editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"drag.dragover\",\n          originEvent: {\n            dataTransfer: event_12.dataTransfer\n          },\n          dragOrigin: editorActor.getSnapshot().context.internalDrag?.origin,\n          position: position_7\n        },\n        editor: slateEditor,\n        nativeEvent: event_12\n      }), !0;\n  }, $[134] = editorActor, $[135] = onDragOver, $[136] = slateEditor, $[137] = t33) : t33 = $[137];\n  const handleDragOver = t33;\n  let t34;\n  $[138] !== editorActor || $[139] !== onDrop || $[140] !== slateEditor ? (t34 = (event_13) => {\n    if (onDrop?.(event_13), event_13.isDefaultPrevented() || event_13.isPropagationStopped())\n      return;\n    const position_8 = getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_13.nativeEvent\n    });\n    if (!position_8) {\n      console.warn(\"Could not find position for drop event\");\n      return;\n    }\n    return editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"drag.drop\",\n        originEvent: {\n          dataTransfer: event_13.dataTransfer\n        },\n        dragOrigin: editorActor.getSnapshot().context.internalDrag?.origin,\n        position: position_8\n      },\n      editor: slateEditor,\n      nativeEvent: event_13\n    }), !0;\n  }, $[138] = editorActor, $[139] = onDrop, $[140] = slateEditor, $[141] = t34) : t34 = $[141];\n  const handleDrop = t34;\n  let t35;\n  $[142] !== editorActor || $[143] !== onDragLeave || $[144] !== slateEditor ? (t35 = (event_14) => {\n    if (onDragLeave?.(event_14), !(event_14.isDefaultPrevented() || event_14.isPropagationStopped() || !getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_14.nativeEvent\n    })))\n      return editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"drag.dragleave\",\n          originEvent: {\n            dataTransfer: event_14.dataTransfer\n          }\n        },\n        editor: slateEditor\n      }), !0;\n  }, $[142] = editorActor, $[143] = onDragLeave, $[144] = slateEditor, $[145] = t35) : t35 = $[145];\n  const handleDragLeave = t35;\n  let t36;\n  $[146] !== forwardedRef || $[147] !== validateSelectionActor ? (t36 = (editorElement) => {\n    if (typeof forwardedRef == \"function\" ? forwardedRef(editorElement) : forwardedRef && (forwardedRef.current = editorElement), editorElement) {\n      const mutationObserver = new MutationObserver(() => {\n        validateSelectionActor.send({\n          type: \"validate selection\",\n          editorElement\n        });\n      });\n      return mutationObserver.observe(editorElement, {\n        attributeOldValue: !1,\n        attributes: !1,\n        characterData: !1,\n        childList: !0,\n        subtree: !0\n      }), () => {\n        mutationObserver.disconnect();\n      };\n    }\n  }, $[146] = forwardedRef, $[147] = validateSelectionActor, $[148] = t36) : t36 = $[148];\n  const callbackRef = t36;\n  if (!portableTextEditor)\n    return null;\n  let t37;\n  return $[149] !== callbackRef || $[150] !== decorate || $[151] !== handleClick || $[152] !== handleCopy || $[153] !== handleCut || $[154] !== handleDrag || $[155] !== handleDragEnd || $[156] !== handleDragEnter || $[157] !== handleDragLeave || $[158] !== handleDragOver || $[159] !== handleDragStart || $[160] !== handleDrop || $[161] !== handleKeyDown || $[162] !== handleKeyUp || $[163] !== handleOnBeforeInput || $[164] !== handleOnBlur || $[165] !== handleOnFocus || $[166] !== handlePaste || $[167] !== hasInvalidValue || $[168] !== readOnly || $[169] !== renderElement || $[170] !== renderLeaf || $[171] !== restProps || $[172] !== scrollSelectionIntoViewToSlate ? (t37 = hasInvalidValue ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(slate_react__WEBPACK_IMPORTED_MODULE_22__.Editable, { ...restProps, ref: callbackRef, \"data-read-only\": readOnly, autoFocus: !1, className: restProps.className || \"pt-editable\", decorate, onBlur: handleOnBlur, onCopy: handleCopy, onCut: handleCut, onClick: handleClick, onDOMBeforeInput: handleOnBeforeInput, onDragStart: handleDragStart, onDrag: handleDrag, onDragEnd: handleDragEnd, onDragEnter: handleDragEnter, onDragOver: handleDragOver, onDrop: handleDrop, onDragLeave: handleDragLeave, onFocus: handleOnFocus, onKeyDown: handleKeyDown, onKeyUp: handleKeyUp, onPaste: handlePaste, readOnly, renderPlaceholder: void 0, renderElement, renderLeaf, renderText, scrollSelectionIntoView: scrollSelectionIntoViewToSlate }), $[149] = callbackRef, $[150] = decorate, $[151] = handleClick, $[152] = handleCopy, $[153] = handleCut, $[154] = handleDrag, $[155] = handleDragEnd, $[156] = handleDragEnter, $[157] = handleDragLeave, $[158] = handleDragOver, $[159] = handleDragStart, $[160] = handleDrop, $[161] = handleKeyDown, $[162] = handleKeyUp, $[163] = handleOnBeforeInput, $[164] = handleOnBlur, $[165] = handleOnFocus, $[166] = handlePaste, $[167] = hasInvalidValue, $[168] = readOnly, $[169] = renderElement, $[170] = renderLeaf, $[171] = restProps, $[172] = scrollSelectionIntoViewToSlate, $[173] = t37) : t37 = $[173], t37;\n});\nPortableTextEditable.displayName = \"ForwardRef(PortableTextEditable)\";\nfunction _temp(s) {\n  return s.matches({\n    \"edit mode\": \"read only\"\n  });\n}\nfunction _temp2(s_0) {\n  return s_0.context.decorate?.fn;\n}\nfunction _temp3(props_0) {\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderText, { ...props_0 });\n}\nfunction _temp4(o) {\n  return o.type === \"set_selection\";\n}\nfunction _temp5(error) {\n  return console.warn(error), error;\n}\nconst forEachActor = (actorRef, callback) => {\n  callback(actorRef);\n  const children = actorRef.getSnapshot().children;\n  children && Object.values(children).forEach((child) => {\n    forEachActor(child, callback);\n  });\n};\nfunction stopActor(actorRef) {\n  const persistedSnapshots = [];\n  forEachActor(actorRef, (ref) => {\n    persistedSnapshots.push([ref, ref.getSnapshot()]), ref.observers = /* @__PURE__ */ new Set();\n  });\n  const systemSnapshot = actorRef.system.getSnapshot?.();\n  actorRef.stop(), actorRef.system._snapshot = systemSnapshot, persistedSnapshots.forEach(([ref, snapshot]) => {\n    ref._processingStatus = 0, ref._snapshot = snapshot;\n  });\n}\nconst converterJson = {\n  mimeType: \"application/json\",\n  serialize: ({\n    snapshot,\n    event\n  }) => {\n    const portableTextConverter = snapshot.context.converters.find((converter) => converter.mimeType === \"application/x-portable-text\");\n    return portableTextConverter ? {\n      ...portableTextConverter.serialize({\n        snapshot,\n        event\n      }),\n      mimeType: \"application/json\",\n      originEvent: event.originEvent\n    } : {\n      type: \"serialization.failure\",\n      mimeType: \"application/json\",\n      originEvent: event.originEvent,\n      reason: \"No application/x-portable-text Converter found\"\n    };\n  },\n  deserialize: ({\n    snapshot,\n    event\n  }) => {\n    const portableTextConverter = snapshot.context.converters.find((converter) => converter.mimeType === \"application/x-portable-text\");\n    return portableTextConverter ? {\n      ...portableTextConverter.deserialize({\n        snapshot,\n        event\n      }),\n      mimeType: \"application/json\"\n    } : {\n      type: \"deserialization.failure\",\n      mimeType: \"application/json\",\n      reason: \"No application/x-portable-text Converter found\"\n    };\n  }\n}, converterPortableText = {\n  mimeType: \"application/x-portable-text\",\n  serialize: ({\n    snapshot,\n    event\n  }) => {\n    if (!snapshot.context.selection)\n      return {\n        type: \"serialization.failure\",\n        mimeType: \"application/x-portable-text\",\n        originEvent: event.originEvent,\n        reason: \"No selection\"\n      };\n    const blocks = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getSelectedValue)(snapshot);\n    return blocks.length === 0 ? {\n      type: \"serialization.failure\",\n      mimeType: \"application/x-portable-text\",\n      reason: \"No blocks serialized\",\n      originEvent: event.originEvent\n    } : {\n      type: \"serialization.success\",\n      data: JSON.stringify(blocks),\n      mimeType: \"application/x-portable-text\",\n      originEvent: event.originEvent\n    };\n  },\n  deserialize: ({\n    snapshot,\n    event\n  }) => {\n    const blocks = JSON.parse(event.data);\n    if (!Array.isArray(blocks))\n      return {\n        type: \"deserialization.failure\",\n        mimeType: \"application/x-portable-text\",\n        reason: \"Data is not an array\"\n      };\n    const parsedBlocks = blocks.flatMap((block) => {\n      const parsedBlock = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.parseBlock)({\n        context: snapshot.context,\n        block,\n        options: {\n          removeUnusedMarkDefs: !0,\n          validateFields: !1\n        }\n      });\n      return parsedBlock ? [parsedBlock] : [];\n    });\n    return parsedBlocks.length === 0 && blocks.length > 0 ? {\n      type: \"deserialization.failure\",\n      mimeType: \"application/x-portable-text\",\n      reason: \"No blocks were parsed\"\n    } : {\n      type: \"deserialization.success\",\n      data: parsedBlocks,\n      mimeType: \"application/x-portable-text\"\n    };\n  }\n};\nfunction createConverterTextHtml(legacySchema) {\n  return {\n    mimeType: \"text/html\",\n    serialize: ({\n      snapshot,\n      event\n    }) => {\n      if (!snapshot.context.selection)\n        return {\n          type: \"serialization.failure\",\n          mimeType: \"text/html\",\n          originEvent: event.originEvent,\n          reason: \"No selection\"\n        };\n      const blocks = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getSelectedValue)(snapshot), html = (0,_portabletext_to_html__WEBPACK_IMPORTED_MODULE_28__.toHTML)(blocks, {\n        onMissingComponent: !1,\n        components: {\n          unknownType: ({\n            children\n          }) => children !== void 0 ? `${children}` : \"\"\n        }\n      });\n      return html === \"\" ? {\n        type: \"serialization.failure\",\n        mimeType: \"text/html\",\n        originEvent: event.originEvent,\n        reason: \"Serialized HTML is empty\"\n      } : {\n        type: \"serialization.success\",\n        data: html,\n        mimeType: \"text/html\",\n        originEvent: event.originEvent\n      };\n    },\n    deserialize: ({\n      snapshot,\n      event\n    }) => {\n      const parsedBlocks = (0,_portabletext_block_tools__WEBPACK_IMPORTED_MODULE_29__.htmlToBlocks)(event.data, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n        unstable_whitespaceOnPasteMode: legacySchema.block.options.unstable_whitespaceOnPasteMode\n      }).flatMap((block) => {\n        const parsedBlock = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.parseBlock)({\n          context: snapshot.context,\n          block,\n          options: {\n            removeUnusedMarkDefs: !0,\n            validateFields: !1\n          }\n        });\n        return parsedBlock ? [parsedBlock] : [];\n      });\n      return parsedBlocks.length === 0 ? {\n        type: \"deserialization.failure\",\n        mimeType: \"text/html\",\n        reason: \"No blocks deserialized\"\n      } : {\n        type: \"deserialization.success\",\n        data: parsedBlocks,\n        mimeType: \"text/html\"\n      };\n    }\n  };\n}\nfunction createConverterTextPlain(legacySchema) {\n  return {\n    mimeType: \"text/plain\",\n    serialize: ({\n      snapshot,\n      event\n    }) => snapshot.context.selection ? {\n      type: \"serialization.success\",\n      data: (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getSelectedValue)(snapshot).map((block) => (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(snapshot.context, block) ? block.children.map((child) => child._type === snapshot.context.schema.span.name ? child.text : event.originEvent === \"drag.dragstart\" ? `[${snapshot.context.schema.inlineObjects.find((inlineObjectType) => inlineObjectType.name === child._type)?.title ?? \"Object\"}]` : \"\").join(\"\") : event.originEvent === \"drag.dragstart\" ? `[${snapshot.context.schema.blockObjects.find((blockObjectType) => blockObjectType.name === block._type)?.title ?? \"Object\"}]` : \"\").filter((block) => block !== \"\").join(`\n\n`),\n      mimeType: \"text/plain\",\n      originEvent: event.originEvent\n    } : {\n      type: \"serialization.failure\",\n      mimeType: \"text/plain\",\n      originEvent: event.originEvent,\n      reason: \"No selection\"\n    },\n    deserialize: ({\n      snapshot,\n      event\n    }) => {\n      const textToHtml = `<html><body>${escapeHtml(event.data).split(/\\n{2,}/).map((line) => line ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, \"<br/>\")}</p>` : \"<p></p>\").join(\"\")}</body></html>`, parsedBlocks = (0,_portabletext_block_tools__WEBPACK_IMPORTED_MODULE_29__.htmlToBlocks)(textToHtml, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator\n      }).flatMap((block) => {\n        const parsedBlock = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.parseBlock)({\n          context: snapshot.context,\n          block,\n          options: {\n            removeUnusedMarkDefs: !0,\n            validateFields: !1\n          }\n        });\n        return parsedBlock ? [parsedBlock] : [];\n      });\n      return parsedBlocks.length === 0 ? {\n        type: \"deserialization.failure\",\n        mimeType: \"text/plain\",\n        reason: \"No blocks deserialized\"\n      } : {\n        type: \"deserialization.success\",\n        data: parsedBlocks,\n        mimeType: \"text/plain\"\n      };\n    }\n  };\n}\nconst entityMap = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\",\n  \"/\": \"&#x2F;\",\n  \"`\": \"&#x60;\",\n  \"=\": \"&#x3D;\"\n};\nfunction escapeHtml(str) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s) => entityMap[s]);\n}\nfunction createCoreConverters(legacySchema) {\n  return [converterJson, converterPortableText, createConverterTextHtml(legacySchema), createConverterTextPlain(legacySchema)];\n}\nfunction compileType(rawType) {\n  return _sanity_schema__WEBPACK_IMPORTED_MODULE_30__.Schema.compile({\n    name: \"blockTypeSchema\",\n    types: [rawType]\n  }).get(rawType.name);\n}\nconst levelIndexMaps = /* @__PURE__ */ new Map();\nfunction buildIndexMaps(context, {\n  blockIndexMap,\n  listIndexMap\n}) {\n  blockIndexMap.clear(), listIndexMap.clear(), levelIndexMaps.clear();\n  let previousListItem;\n  for (let blockIndex = 0; blockIndex < context.value.length; blockIndex++) {\n    const block = context.value.at(blockIndex);\n    if (block === void 0)\n      continue;\n    if (blockIndexMap.set(block._key, blockIndex), !(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(context, block)) {\n      levelIndexMaps.clear(), previousListItem = void 0;\n      continue;\n    }\n    if (block.listItem === void 0 || block.level === void 0) {\n      levelIndexMaps.clear(), previousListItem = void 0;\n      continue;\n    }\n    if (!previousListItem) {\n      const levelIndexMap2 = levelIndexMaps.get(block.listItem) ?? /* @__PURE__ */ new Map();\n      levelIndexMap2.set(block.level, 1), levelIndexMaps.set(block.listItem, levelIndexMap2), listIndexMap.set(block._key, 1), previousListItem = {\n        listItem: block.listItem,\n        level: block.level\n      };\n      continue;\n    }\n    if (previousListItem.listItem === block.listItem && previousListItem.level < block.level) {\n      const levelIndexMap2 = levelIndexMaps.get(block.listItem) ?? /* @__PURE__ */ new Map();\n      levelIndexMap2.set(block.level, 1), levelIndexMaps.set(block.listItem, levelIndexMap2), listIndexMap.set(block._key, 1), previousListItem = {\n        listItem: block.listItem,\n        level: block.level\n      };\n      continue;\n    }\n    levelIndexMaps.forEach((levelIndexMap2, listItem) => {\n      if (listItem === block.listItem)\n        return;\n      const levelsToDelete = [];\n      levelIndexMap2.forEach((_, level) => {\n        level >= block.level && levelsToDelete.push(level);\n      }), levelsToDelete.forEach((level) => {\n        levelIndexMap2.delete(level);\n      });\n    });\n    const levelIndexMap = levelIndexMaps.get(block.listItem) ?? /* @__PURE__ */ new Map(), levelCounter = levelIndexMap.get(block.level) ?? 0;\n    levelIndexMap.set(block.level, levelCounter + 1), levelIndexMaps.set(block.listItem, levelIndexMap), listIndexMap.set(block._key, levelCounter + 1), previousListItem = {\n      listItem: block.listItem,\n      level: block.level\n    };\n  }\n}\nfunction createPlaceholderBlock(context) {\n  return {\n    _type: context.schema.block.name,\n    _key: context.keyGenerator(),\n    style: context.schema.styles[0].name ?? \"normal\",\n    markDefs: [],\n    children: [{\n      _type: context.schema.span.name,\n      _key: context.keyGenerator(),\n      text: \"\",\n      marks: []\n    }]\n  };\n}\nfunction getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath\n}) {\n  let previousSpan;\n  for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, blockPath, {\n    reverse: !0\n  }))\n    if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_14__.Path.isBefore(childPath, spanPath)) {\n      previousSpan = child;\n      break;\n    }\n  return previousSpan;\n}\nfunction getNextSpan({\n  editor,\n  blockPath,\n  spanPath\n}) {\n  let nextSpan;\n  for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, blockPath))\n    if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_14__.Path.isAfter(childPath, spanPath)) {\n      nextSpan = child;\n      break;\n    }\n  return nextSpan;\n}\nfunction withRemoteChanges(editor, fn) {\n  const prev = isChangingRemotely(editor) || !1;\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, !0), fn(), IS_PROCESSING_REMOTE_CHANGES.set(editor, prev);\n}\nfunction isChangingRemotely(editor) {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor);\n}\nconst IS_UDOING = /* @__PURE__ */ new WeakMap(), IS_REDOING = /* @__PURE__ */ new WeakMap();\nfunction withUndoing(editor, fn) {\n  const prev = isUndoing(editor);\n  IS_UDOING.set(editor, !0), fn(), IS_UDOING.set(editor, prev);\n}\nfunction isUndoing(editor) {\n  return IS_UDOING.get(editor) ?? !1;\n}\nfunction setIsUndoing(editor, isUndoing2) {\n  IS_UDOING.set(editor, isUndoing2);\n}\nfunction withRedoing(editor, fn) {\n  const prev = isRedoing(editor);\n  IS_REDOING.set(editor, !0), fn(), IS_REDOING.set(editor, prev);\n}\nfunction isRedoing(editor) {\n  return IS_REDOING.get(editor) ?? !1;\n}\nfunction setIsRedoing(editor, isRedoing2) {\n  IS_REDOING.set(editor, isRedoing2);\n}\nconst debug$c = debugWithName(\"plugin:withPortableTextMarkModel\");\nfunction createWithPortableTextMarkModel(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2,\n      normalizeNode\n    } = editor, decorators = editorActor.getSnapshot().context.schema.decorators.map((t) => t.name);\n    return editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry;\n      if (editor.isTextBlock(node)) {\n        const children = slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, path);\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1];\n          if (editor.isTextSpan(child) && editor.isTextSpan(nextNode) && child.marks?.every((mark) => nextNode.marks?.includes(mark)) && nextNode.marks?.every((mark) => child.marks?.includes(mark))) {\n            debug$c(\"Merging spans\", JSON.stringify(child, null, 2), JSON.stringify(nextNode, null, 2)), editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: !0\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n        }\n      }\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug$c(\"Adding .markDefs to block node\"), editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          markDefs: []\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug$c(\"Adding .marks to span node\"), editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          marks: []\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (editor.isTextSpan(node)) {\n        const blockPath = slate__WEBPACK_IMPORTED_MODULE_14__.Path.parent(path), [block] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, blockPath), decorators2 = editorActor.getSnapshot().context.schema.decorators.map((decorator) => decorator.name), annotations = node.marks?.filter((mark) => !decorators2.includes(mark));\n        if (editor.isTextBlock(block) && node.text === \"\" && annotations && annotations.length > 0) {\n          debug$c(\"Removing annotations from empty span node\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n            marks: node.marks?.filter((mark) => decorators2.includes(mark))\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      if (editor.isTextBlock(node)) {\n        const decorators2 = editorActor.getSnapshot().context.schema.decorators.map((decorator) => decorator.name);\n        for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, path))\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? [], orphanedAnnotations = marks.filter((mark) => !decorators2.includes(mark) && !node.markDefs?.find((def) => def._key === mark));\n            if (orphanedAnnotations.length > 0) {\n              debug$c(\"Removing orphaned annotations from span node\"), editorActor.send({\n                type: \"normalizing\"\n              }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n                marks: marks.filter((mark) => !orphanedAnnotations.includes(mark))\n              }, {\n                at: childPath\n              }), editorActor.send({\n                type: \"done normalizing\"\n              });\n              return;\n            }\n          }\n      }\n      if (editor.isTextSpan(node)) {\n        const blockPath = slate__WEBPACK_IMPORTED_MODULE_14__.Path.parent(path), [block] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, blockPath);\n        if (editor.isTextBlock(block)) {\n          const decorators2 = editorActor.getSnapshot().context.schema.decorators.map((decorator) => decorator.name), marks = node.marks ?? [], orphanedAnnotations = marks.filter((mark) => !decorators2.includes(mark) && !block.markDefs?.find((def) => def._key === mark));\n          if (orphanedAnnotations.length > 0) {\n            debug$c(\"Removing orphaned annotations from span node\"), editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n              marks: marks.filter((mark) => !orphanedAnnotations.includes(mark))\n            }, {\n              at: path\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n        }\n      }\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? [], markDefKeys = /* @__PURE__ */ new Set(), newMarkDefs = [];\n        for (const markDef of markDefs)\n          markDefKeys.has(markDef._key) || (markDefKeys.add(markDef._key), newMarkDefs.push(markDef));\n        if (markDefs.length !== newMarkDefs.length) {\n          debug$c(\"Removing duplicate markDefs\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      if (editor.isTextBlock(node) && !editor.operations.some((op) => op.type === \"merge_node\" && \"markDefs\" in op.properties && op.path.length === 1)) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => node.children.find((child) => slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(child) && Array.isArray(child.marks) && child.marks.includes(def._key)));\n        if (node.markDefs && !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(newMarkDefs, node.markDefs)) {\n          debug$c(\"Removing markDef not in use\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      normalizeNode(nodeEntry);\n    }, editor.apply = (op) => {\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      if (op.type === \"set_selection\" && op.properties && op.newProperties && op.properties.anchor && op.properties.focus && op.newProperties.anchor && op.newProperties.focus) {\n        const previousSelectionIsCollapsed = slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed({\n          anchor: op.properties.anchor,\n          focus: op.properties.focus\n        }), newSelectionIsCollapsed = slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed({\n          anchor: op.newProperties.anchor,\n          focus: op.newProperties.focus\n        });\n        if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n          const focusSpan = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: op.properties.focus,\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0]?.[0], newFocusSpan = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: op.newProperties.focus,\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0]?.[0], movedToNextSpan = focusSpan && newFocusSpan && op.newProperties.focus.path[0] === op.properties.focus.path[0] && op.newProperties.focus.path[1] === op.properties.focus.path[1] + 1 && focusSpan.text.length === op.properties.focus.offset && op.newProperties.focus.offset === 0, movedToPreviousSpan = focusSpan && newFocusSpan && op.newProperties.focus.path[0] === op.properties.focus.path[0] && op.newProperties.focus.path[1] === op.properties.focus.path[1] - 1 && op.properties.focus.offset === 0 && newFocusSpan.text.length === op.newProperties.focus.offset;\n          !movedToNextSpan && !movedToPreviousSpan && (editor.decoratorState = {});\n        }\n      }\n      if (op.type === \"remove_text\") {\n        const {\n          selection\n        } = editor;\n        if (selection && slate__WEBPACK_IMPORTED_MODULE_14__.Range.isExpanded(selection)) {\n          const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, selection, {\n            depth: 1\n          }), [span, spanPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: {\n              path: op.path,\n              offset: op.offset\n            },\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0] ?? [void 0, void 0];\n          if (span && block && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(editorActor.getSnapshot().context, block)) {\n            const markDefs = block.markDefs ?? [], marks = span.marks ?? [], spanHasAnnotations = marks.some((mark) => markDefs.find((markDef) => markDef._key === mark)), deletingFromTheEnd = op.offset + op.text.length === span.text.length, deletingAllText = op.offset === 0 && deletingFromTheEnd, previousSpan = getPreviousSpan({\n              editor,\n              blockPath,\n              spanPath\n            }), nextSpan = getNextSpan({\n              editor,\n              blockPath,\n              spanPath\n            }), previousSpanHasSameAnnotation = previousSpan ? previousSpan.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1, nextSpanHasSameAnnotation = nextSpan ? nextSpan.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1;\n            if (spanHasAnnotations && deletingAllText && !previousSpanHasSameAnnotation && !nextSpanHasSameAnnotation) {\n              const snapshot = getEditorSnapshot({\n                editorActorSnapshot: editorActor.getSnapshot(),\n                slateEditorInstance: editor\n              });\n              slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(editor, () => {\n                apply2(op), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n                  marks: (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getActiveDecorators)(snapshot)\n                }, {\n                  at: op.path\n                });\n              }), editor.onChange();\n              return;\n            }\n          }\n        }\n      }\n      if (op.type === \"merge_node\" && op.path.length === 1 && \"markDefs\" in op.properties && op.properties._type === editorActor.getSnapshot().context.schema.block.name && Array.isArray(op.properties.markDefs) && op.properties.markDefs.length > 0 && op.path[0] - 1 >= 0) {\n        const [targetBlock, targetPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, [op.path[0] - 1]);\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs = Array.isArray(targetBlock.markDefs) && targetBlock.markDefs || [], newMarkDefs = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_6__([...oldDefs, ...op.properties.markDefs]);\n          debug$c(\"Copying markDefs over to merged block\", op), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: targetPath,\n            voids: !1\n          }), apply2(op);\n          return;\n        }\n      }\n      apply2(op);\n    }, editor;\n  };\n}\nconst removeDecoratorOperationImplementation = ({\n  operation\n}) => {\n  const editor = operation.editor, mark = operation.decorator, {\n    selection\n  } = editor;\n  if (selection) {\n    if (slate__WEBPACK_IMPORTED_MODULE_14__.Range.isExpanded(selection))\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {}, {\n        match: slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText,\n        split: !0,\n        hanging: !0\n      }), editor.selection && [...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n        at: editor.selection,\n        match: slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText\n      })].forEach(([node, path]) => {\n        const block = editor.children[path[0]];\n        slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(block) && block.children.includes(node) && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          marks: (Array.isArray(node.marks) ? node.marks : []).filter((eMark) => eMark !== mark),\n          _type: \"span\"\n        }, {\n          at: path\n        });\n      });\n    else {\n      const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, selection, {\n        depth: 1\n      }), lonelyEmptySpan = editor.isTextBlock(block) && block.children.length === 1 && editor.isTextSpan(block.children[0]) && block.children[0].text === \"\" ? block.children[0] : void 0;\n      if (lonelyEmptySpan) {\n        const existingMarksWithoutDecorator = (lonelyEmptySpan.marks ?? []).filter((existingMark) => existingMark !== mark);\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          marks: existingMarksWithoutDecorator\n        }, {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node)\n        });\n      } else\n        editor.decoratorState[mark] = !1;\n    }\n    if (editor.selection) {\n      const selection2 = editor.selection;\n      editor.selection = {\n        ...selection2\n      };\n    }\n  }\n};\nfunction cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0) return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2) return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1) return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0]) return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; ) text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1]) return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; ) text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++) v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); ) x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length) k1end += 2;\n      else if (y1 > text2Length) k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2) return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); ) x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length) k2end += 2;\n      else if (y2 > text2Length) k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2) return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, {\n    checkLines: !1,\n    deadline\n  }), diffsb = doDiff(text1b, text2b, {\n    checkLines: !1,\n    deadline\n  });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0) return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length) return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2) halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2) return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch) throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [bestLongTextA || \"\", bestLongTextB || \"\", bestShortTextA || \"\", bestShortTextB || \"\", bestCommon || \"\"] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++) text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return {\n    chars1,\n    chars2,\n    lineArray\n  };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--) diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1) return [[DIFF_INSERT, text2]];\n  if (!text2) return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1) return diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1) return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value\n}) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {})) __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2) for (var prop of __getOwnPropSymbols$2(b)) __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null) throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2) return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText2] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText2, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++) diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; ) diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two) return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; ) switch (diffs[pointer][0]) {\n    case DIFF_INSERT:\n      countInsert++, textInsert += diffs[pointer][1], pointer++;\n      break;\n    case DIFF_DELETE:\n      countDelete++, textDelete += diffs[pointer][1], pointer++;\n      break;\n    case DIFF_EQUAL:\n      countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(0, commonlength) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n      break;\n    default:\n      throw new Error(\"Unknown diff operation\");\n  }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; ) diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; ) diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value\n}) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {})) __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1) for (var prop of __getOwnPropSymbols$1(b)) __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1) throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; ) getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold) if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc) start = Math.max(1, 2 * loc - bestLoc);\n        else break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold) break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++) s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++) s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation, options = {}) {\n  if (text === null || pattern === null || searchLocation === null) throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern) return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern) return loc;\n  } else return -1;\n  return bitap(text, pattern, loc, options);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, location) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > location)); x++) lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (location - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\") throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\") return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target) throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches) adjusted.push({\n    diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n    start1: advanceTo(patch.start1),\n    start2: advanceTo(patch.start2),\n    utf8Start1: patch.utf8Start1,\n    utf8Start2: patch.utf8Start2,\n    length1: patch.length1,\n    length2: patch.length2,\n    utf8Length1: patch.utf8Length1,\n    utf8Length2: patch.utf8Length2\n  });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++) nullPadding += String.fromCharCode(x);\n  for (const p of patches) p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL) diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL) diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize) continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\") throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0) return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(text, text1.substring(text1.length - MAX_BITS), expectedLoc + text1.length - MAX_BITS), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1) results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2) text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, {\n          checkLines: !1\n        });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold) results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline) return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m) throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\") break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\") patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\") patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \") patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nconst CURRENT_UNDO_STEP = /* @__PURE__ */ new WeakMap();\nfunction getCurrentUndoStepId(editor) {\n  return CURRENT_UNDO_STEP.get(editor)?.undoStepId;\n}\nfunction createUndoStep(editor) {\n  CURRENT_UNDO_STEP.set(editor, {\n    undoStepId: (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.defaultKeyGenerator)()\n  });\n}\nfunction clearUndoStep(editor) {\n  CURRENT_UNDO_STEP.set(editor, void 0);\n}\nconst debug$b = debugWithName(\"plugin:withUndoRedo\"), SAVING = /* @__PURE__ */ new WeakMap(), REMOTE_PATCHES = /* @__PURE__ */ new WeakMap(), UNDO_STEP_LIMIT = 1e3, isSaving = (editor) => {\n  const state = SAVING.get(editor);\n  return state === void 0 ? !0 : state;\n}, getRemotePatches = (editor) => (REMOTE_PATCHES.get(editor) || REMOTE_PATCHES.set(editor, []), REMOTE_PATCHES.get(editor) || []);\nfunction createWithUndoRedo(options) {\n  const {\n    editorActor\n  } = options;\n  return (editor) => {\n    let previousSnapshot = fromSlateValue(editor.children, editorActor.getSnapshot().context.schema.block.name);\n    const remotePatches = getRemotePatches(editor);\n    let previousUndoStepId = getCurrentUndoStepId(editor);\n    options.subscriptions.push(() => {\n      debug$b(\"Subscribing to patches\");\n      const sub = editorActor.on(\"patches\", ({\n        patches,\n        snapshot\n      }) => {\n        let reset = !1;\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== \"local\" && remotePatches) {\n            if (patch.type === \"unset\" && patch.path.length === 0) {\n              debug$b(\"Someone else cleared the content, resetting undo/redo history\"), editor.history = {\n                undos: [],\n                redos: []\n              }, remotePatches.splice(0, remotePatches.length), SAVING.set(editor, !0), reset = !0;\n              return;\n            }\n            remotePatches.push({\n              patch,\n              time: /* @__PURE__ */ new Date(),\n              snapshot,\n              previousSnapshot\n            });\n          }\n        }), previousSnapshot = snapshot;\n      });\n      return () => {\n        debug$b(\"Unsubscribing to patches\"), sub.unsubscribe();\n      };\n    }), editor.history = {\n      undos: [],\n      redos: []\n    };\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(op);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      const {\n        operations,\n        history\n      } = editor, {\n        undos\n      } = history, step = undos[undos.length - 1], lastOp = step && step.operations && step.operations[step.operations.length - 1], overwrite = shouldOverwrite(op, lastOp), save = isSaving(editor), currentUndoStepId = getCurrentUndoStepId(editor);\n      let merge = currentUndoStepId === previousUndoStepId;\n      if (save) {\n        if (step ? operations.length === 0 && (merge = currentUndoStepId === void 0 && previousUndoStepId === void 0 ? shouldMerge(op, lastOp) || overwrite : merge) : merge = !1, step && merge)\n          step.operations.push(op);\n        else {\n          const newStep = {\n            operations: [...editor.selection === null ? [] : [createSelectOperation(editor)], op],\n            timestamp: /* @__PURE__ */ new Date()\n          };\n          undos.push(newStep), debug$b(\"Created new undo step\", step);\n        }\n        for (; undos.length > UNDO_STEP_LIMIT; )\n          undos.shift();\n        shouldClear(op) && (history.redos = []);\n      }\n      previousUndoStepId = currentUndoStepId, apply2(op);\n    }, editor;\n  };\n}\nconst historyUndoOperationImplementation = ({\n  operation\n}) => {\n  const editor = operation.editor, {\n    undos\n  } = editor.history, remotePatches = getRemotePatches(editor);\n  if (undos.length > 0) {\n    const step = undos[undos.length - 1];\n    if (debug$b(\"Undoing\", step), step.operations.length > 0) {\n      const otherPatches = remotePatches.filter((item) => item.time >= step.timestamp);\n      let transformedOperations = step.operations;\n      otherPatches.forEach((item) => {\n        transformedOperations = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_7__(transformedOperations.map((op) => transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot)));\n      });\n      const reversedOperations = transformedOperations.map(slate__WEBPACK_IMPORTED_MODULE_14__.Operation.inverse).reverse();\n      try {\n        slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(editor, () => {\n          withUndoing(editor, () => {\n            withoutSaving(editor, () => {\n              reversedOperations.forEach((op) => {\n                editor.apply(op);\n              });\n            });\n          });\n        });\n      } catch (err) {\n        debug$b(\"Could not perform undo step\", err), remotePatches.splice(0, remotePatches.length), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(editor), editor.history = {\n          undos: [],\n          redos: []\n        }, SAVING.set(editor, !0), setIsUndoing(editor, !1), editor.onChange();\n        return;\n      }\n      editor.history.redos.push(step), editor.history.undos.pop();\n    }\n  }\n}, historyRedoOperationImplementation = ({\n  operation\n}) => {\n  const editor = operation.editor, {\n    redos\n  } = editor.history, remotePatches = getRemotePatches(editor);\n  if (redos.length > 0) {\n    const step = redos[redos.length - 1];\n    if (debug$b(\"Redoing\", step), step.operations.length > 0) {\n      const otherPatches = remotePatches.filter((item) => item.time >= step.timestamp);\n      let transformedOperations = step.operations;\n      otherPatches.forEach((item) => {\n        transformedOperations = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_7__(transformedOperations.map((op) => transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot)));\n      });\n      try {\n        slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(editor, () => {\n          withRedoing(editor, () => {\n            withoutSaving(editor, () => {\n              transformedOperations.forEach((op) => {\n                editor.apply(op);\n              });\n            });\n          });\n        });\n      } catch (err) {\n        debug$b(\"Could not perform redo step\", err), remotePatches.splice(0, remotePatches.length), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(editor), editor.history = {\n          undos: [],\n          redos: []\n        }, SAVING.set(editor, !0), setIsRedoing(editor, !1), editor.onChange();\n        return;\n      }\n      editor.history.undos.push(step), editor.history.redos.pop();\n    }\n  }\n};\nfunction transformOperation(editor, patch, operation, snapshot, previousSnapshot) {\n  const transformedOperation = {\n    ...operation\n  };\n  if (patch.type === \"insert\" && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__({\n      _key: blk._key\n    }, patch.path[0]));\n    return debug$b(`Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`), [adjustBlockPath(transformedOperation, patch.items.length, insertBlockIndex)];\n  }\n  if (patch.type === \"unset\" && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__({\n      _key: blk._key\n    }, patch.path[0]));\n    return \"path\" in transformedOperation && Array.isArray(transformedOperation.path) && transformedOperation.path[0] === unsetBlockIndex ? (debug$b(\"Skipping transformation that targeted removed block\"), []) : [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)];\n  }\n  if (patch.type === \"unset\" && patch.path.length === 0)\n    return debug$b(`Adjusting selection for unset everything patch and ${operation.type} operation`), [];\n  if (patch.type === \"diffMatchPatch\") {\n    const operationTargetBlock = findOperationTargetBlock(editor, transformedOperation);\n    return !operationTargetBlock || !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__({\n      _key: operationTargetBlock._key\n    }, patch.path[0]) ? [transformedOperation] : (parse(patch.value).forEach((diffPatch) => {\n      let adjustOffsetBy = 0, changedOffset = diffPatch.utf8Start1;\n      const {\n        diffs\n      } = diffPatch;\n      if (diffs.forEach((diff2, index) => {\n        const [diffType, text] = diff2;\n        diffType === DIFF_INSERT ? (adjustOffsetBy += text.length, changedOffset += text.length) : diffType === DIFF_DELETE ? (adjustOffsetBy -= text.length, changedOffset -= text.length) : diffType === DIFF_EQUAL && (diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL) || (changedOffset += text.length));\n      }), transformedOperation.type === \"insert_text\" && changedOffset < transformedOperation.offset && (transformedOperation.offset += adjustOffsetBy), transformedOperation.type === \"remove_text\" && changedOffset <= transformedOperation.offset - transformedOperation.text.length && (transformedOperation.offset += adjustOffsetBy), transformedOperation.type === \"set_selection\") {\n        const currentFocus = transformedOperation.properties?.focus ? {\n          ...transformedOperation.properties.focus\n        } : void 0, currentAnchor = transformedOperation?.properties?.anchor ? {\n          ...transformedOperation.properties.anchor\n        } : void 0, newFocus = transformedOperation?.newProperties?.focus ? {\n          ...transformedOperation.newProperties.focus\n        } : void 0, newAnchor = transformedOperation?.newProperties?.anchor ? {\n          ...transformedOperation.newProperties.anchor\n        } : void 0;\n        (currentFocus && currentAnchor || newFocus && newAnchor) && ([currentFocus, currentAnchor, newFocus, newAnchor].forEach((point) => {\n          point && changedOffset < point.offset && (point.offset += adjustOffsetBy);\n        }), currentFocus && currentAnchor && (transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor\n        }), newFocus && newAnchor && (transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor\n        }));\n      }\n    }), [transformedOperation]);\n  }\n  return [transformedOperation];\n}\nfunction adjustBlockPath(operation, level, blockIndex) {\n  const transformedOperation = {\n    ...operation\n  };\n  if (blockIndex >= 0 && transformedOperation.type !== \"set_selection\" && Array.isArray(transformedOperation.path) && transformedOperation.path[0] >= blockIndex + level && transformedOperation.path[0] + level > -1) {\n    const newPath = [transformedOperation.path[0] + level, ...transformedOperation.path.slice(1)];\n    transformedOperation.path = newPath;\n  }\n  if (transformedOperation.type === \"set_selection\") {\n    const currentFocus = transformedOperation.properties?.focus ? {\n      ...transformedOperation.properties.focus\n    } : void 0, currentAnchor = transformedOperation?.properties?.anchor ? {\n      ...transformedOperation.properties.anchor\n    } : void 0, newFocus = transformedOperation?.newProperties?.focus ? {\n      ...transformedOperation.newProperties.focus\n    } : void 0, newAnchor = transformedOperation?.newProperties?.anchor ? {\n      ...transformedOperation.newProperties.anchor\n    } : void 0;\n    (currentFocus && currentAnchor || newFocus && newAnchor) && ([currentFocus, currentAnchor, newFocus, newAnchor].forEach((point) => {\n      point && point.path[0] >= blockIndex + level && point.path[0] + level > -1 && (point.path = [point.path[0] + level, ...point.path.slice(1)]);\n    }), currentFocus && currentAnchor && (transformedOperation.properties = {\n      focus: currentFocus,\n      anchor: currentAnchor\n    }), newFocus && newAnchor && (transformedOperation.newProperties = {\n      focus: newFocus,\n      anchor: newAnchor\n    }));\n  }\n  return transformedOperation;\n}\nconst shouldMerge = (op, prev) => !!(op.type === \"set_selection\" || prev && op.type === \"insert_text\" && prev.type === \"insert_text\" && op.offset === prev.offset + prev.text.length && slate__WEBPACK_IMPORTED_MODULE_14__.Path.equals(op.path, prev.path) && op.text !== \" \" || prev && op.type === \"remove_text\" && prev.type === \"remove_text\" && op.offset + op.text.length === prev.offset && slate__WEBPACK_IMPORTED_MODULE_14__.Path.equals(op.path, prev.path)), shouldOverwrite = (op, prev) => !!(prev && op.type === \"set_selection\" && prev.type === \"set_selection\"), shouldClear = (op) => op.type !== \"set_selection\";\nfunction withoutSaving(editor, fn) {\n  const prev = isSaving(editor);\n  SAVING.set(editor, !1), fn(), SAVING.set(editor, prev);\n}\nfunction createSelectOperation(editor) {\n  return {\n    type: \"set_selection\",\n    properties: {\n      ...editor.selection\n    },\n    newProperties: {\n      ...editor.selection\n    }\n  };\n}\nfunction findOperationTargetBlock(editor, operation) {\n  let block;\n  return operation.type === \"set_selection\" && editor.selection ? block = editor.children[editor.selection.focus.path[0]] : \"path\" in operation && (block = editor.children[operation.path[0]]), block;\n}\nconst addAnnotationOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const parsedAnnotation = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.parseAnnotation)({\n    annotation: {\n      _type: operation.annotation.name,\n      ...operation.annotation.value\n    },\n    context,\n    options: {\n      validateFields: !0\n    }\n  });\n  if (!parsedAnnotation)\n    throw new Error(`Failed to parse annotation ${JSON.stringify(operation.annotation)}`);\n  const editor = operation.editor;\n  if (!editor.selection || slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(editor.selection))\n    return;\n  const selectedBlocks = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node),\n    reverse: slate__WEBPACK_IMPORTED_MODULE_14__.Range.isBackward(editor.selection)\n  });\n  let blockIndex = 0;\n  for (const [block, blockPath] of selectedBlocks) {\n    if (block.children.length === 0 || block.children.length === 1 && block.children[0].text === \"\")\n      continue;\n    const annotationKey = blockIndex === 0 ? parsedAnnotation._key : context.keyGenerator(), markDefs = block.markDefs ?? [];\n    markDefs.find((markDef) => markDef._type === parsedAnnotation._type && markDef._key === annotationKey) === void 0 && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n      markDefs: [...markDefs, {\n        ...parsedAnnotation,\n        _key: annotationKey\n      }]\n    }, {\n      at: blockPath\n    }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {}, {\n      match: slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText,\n      split: !0\n    });\n    const children = slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, blockPath);\n    for (const [span, path] of children) {\n      if (!editor.isTextSpan(span) || !slate__WEBPACK_IMPORTED_MODULE_14__.Range.includes(editor.selection, path))\n        continue;\n      const marks = span.marks ?? [];\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n        marks: [...marks, annotationKey]\n      }, {\n        at: path\n      });\n    }\n    blockIndex++;\n  }\n}, removeAnnotationOperationImplementation = ({\n  operation\n}) => {\n  const editor = operation.editor;\n  if (editor.selection)\n    if (slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(editor.selection)) {\n      const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, editor.selection, {\n        depth: 1\n      });\n      if (!editor.isTextBlock(block))\n        return;\n      const potentialAnnotations = (block.markDefs ?? []).filter((markDef) => markDef._type === operation.annotation.name), [selectedChild, selectedChildPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, editor.selection, {\n        depth: 2\n      });\n      if (!editor.isTextSpan(selectedChild))\n        return;\n      const annotationToRemove = selectedChild.marks?.find((mark) => potentialAnnotations.some((markDef) => markDef._key === mark));\n      if (!annotationToRemove)\n        return;\n      const previousSpansWithSameAnnotation = [];\n      for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, blockPath, {\n        reverse: !0\n      }))\n        if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_14__.Path.isBefore(childPath, selectedChildPath))\n          if (child.marks?.includes(annotationToRemove))\n            previousSpansWithSameAnnotation.push([child, childPath]);\n          else\n            break;\n      const nextSpansWithSameAnnotation = [];\n      for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, blockPath))\n        if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_14__.Path.isAfter(childPath, selectedChildPath))\n          if (child.marks?.includes(annotationToRemove))\n            nextSpansWithSameAnnotation.push([child, childPath]);\n          else\n            break;\n      for (const [child, childPath] of [...previousSpansWithSameAnnotation, [selectedChild, selectedChildPath], ...nextSpansWithSameAnnotation])\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove)\n        }, {\n          at: childPath\n        });\n    } else {\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {}, {\n        match: (node) => editor.isTextSpan(node),\n        split: !0,\n        hanging: !0\n      });\n      const blocks = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => editor.isTextBlock(node)\n      });\n      for (const [block, blockPath] of blocks) {\n        const children = slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, blockPath);\n        for (const [child, childPath] of children) {\n          if (!editor.isTextSpan(child) || !slate__WEBPACK_IMPORTED_MODULE_14__.Range.includes(editor.selection, childPath))\n            continue;\n          const markDefs = block.markDefs ?? [], marks = child.marks ?? [], marksWithoutAnnotation = marks.filter((mark) => markDefs.find((markDef2) => markDef2._key === mark)?._type !== operation.annotation.name);\n          marksWithoutAnnotation.length !== marks.length && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n            marks: marksWithoutAnnotation\n          }, {\n            at: childPath\n          });\n        }\n      }\n    }\n}, blockSetOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const blockIndex = operation.editor.blockIndexMap.get(operation.at[0]._key);\n  if (blockIndex === void 0)\n    throw new Error(`Unable to find block index for block at ${JSON.stringify(operation.at)}`);\n  const block = operation.editor.value.at(blockIndex);\n  if (!block)\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`);\n  const {\n    _type,\n    ...filteredProps\n  } = operation.props, updatedBlock = {\n    ...block,\n    ...filteredProps\n  }, parsedBlock = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.parseBlock)({\n    context,\n    block: updatedBlock,\n    options: {\n      removeUnusedMarkDefs: !1,\n      validateFields: !0\n    }\n  });\n  if (!parsedBlock)\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`);\n  const slateBlock = toSlateValue([parsedBlock], {\n    schemaTypes: context.schema\n  })?.at(0);\n  if (!slateBlock)\n    throw new Error(\"Unable to convert block to Slate value\");\n  slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(operation.editor, slateBlock, {\n    at: [blockIndex]\n  });\n}, blockUnsetOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {\n          path: operation.at,\n          offset: 0\n        },\n        focus: {\n          path: operation.at,\n          offset: 0\n        }\n      }\n    },\n    blockIndexMap: operation.editor.blockIndexMap\n  });\n  if (!location)\n    throw new Error(`Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`);\n  const block = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(operation.editor, location, {\n    depth: 1\n  })?.[0];\n  if (!block)\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`);\n  const parsedBlock = fromSlateValue([block], context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(operation.editor)).at(0);\n  if (!parsedBlock)\n    throw new Error(`Unable to parse block at ${JSON.stringify(operation.at)}`);\n  if ((0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(context, parsedBlock)) {\n    const propsToRemove = operation.props.filter((prop) => prop !== \"_type\"), updatedTextBlock = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.parseBlock)({\n      context,\n      block: lodash_omit_js__WEBPACK_IMPORTED_MODULE_8__(parsedBlock, propsToRemove),\n      options: {\n        removeUnusedMarkDefs: !0,\n        validateFields: !0\n      }\n    });\n    if (!updatedTextBlock)\n      throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`);\n    const propsToSet = {};\n    for (const prop of propsToRemove)\n      prop in updatedTextBlock ? propsToSet[prop] = updatedTextBlock[prop] : propsToSet[prop] = void 0;\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(operation.editor, propsToSet, {\n      at: location\n    });\n    return;\n  }\n  const updatedBlockObject = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.parseBlock)({\n    context,\n    block: lodash_omit_js__WEBPACK_IMPORTED_MODULE_8__(parsedBlock, operation.props.filter((prop) => prop !== \"_type\")),\n    options: {\n      removeUnusedMarkDefs: !0,\n      validateFields: !0\n    }\n  });\n  if (!updatedBlockObject)\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`);\n  const {\n    _type,\n    _key,\n    ...props\n  } = updatedBlockObject;\n  slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(operation.editor, {\n    _type,\n    _key,\n    value: props\n  }, {\n    at: location\n  });\n}, childSetOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {\n          path: operation.at,\n          offset: 0\n        },\n        focus: {\n          path: operation.at,\n          offset: 0\n        }\n      }\n    },\n    blockIndexMap: operation.editor.blockIndexMap\n  });\n  if (!location)\n    throw new Error(`Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`);\n  const childEntry = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(operation.editor, location, {\n    depth: 2\n  }), child = childEntry?.[0], childPath = childEntry?.[1];\n  if (!child || !childPath)\n    throw new Error(`Unable to find child at ${JSON.stringify(operation.at)}`);\n  if (operation.editor.isTextSpan(child)) {\n    const {\n      _type,\n      text,\n      ...rest\n    } = operation.props;\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(operation.editor, {\n      ...child,\n      ...rest\n    }, {\n      at: childPath\n    }), typeof text == \"string\" && child.text !== text && (operation.editor.apply({\n      type: \"remove_text\",\n      path: childPath,\n      offset: 0,\n      text: child.text\n    }), operation.editor.apply({\n      type: \"insert_text\",\n      path: childPath,\n      offset: 0,\n      text\n    }));\n    return;\n  }\n  if (slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(child)) {\n    const definition = context.schema.inlineObjects.find((definition2) => definition2.name === child._type);\n    if (!definition)\n      throw new Error(`Unable to find schema definition for Inline Object type ${child._type}`);\n    const value = \"value\" in child && typeof child.value == \"object\" ? child.value : {}, {\n      _type,\n      _key,\n      ...rest\n    } = operation.props;\n    for (const prop in rest)\n      definition.fields.some((field) => field.name === prop) || delete rest[prop];\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(operation.editor, {\n      ...child,\n      _key: typeof _key == \"string\" ? _key : child._key,\n      value: {\n        ...value,\n        ...rest\n      }\n    }, {\n      at: childPath\n    });\n    return;\n  }\n  throw new Error(`Unable to determine the type of child at ${JSON.stringify(operation.at)}`);\n}, childUnsetOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {\n          path: operation.at,\n          offset: 0\n        },\n        focus: {\n          path: operation.at,\n          offset: 0\n        }\n      }\n    },\n    blockIndexMap: operation.editor.blockIndexMap\n  });\n  if (!location)\n    throw new Error(`Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`);\n  const childEntry = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(operation.editor, location, {\n    depth: 2\n  }), child = childEntry?.[0], childPath = childEntry?.[1];\n  if (!child || !childPath)\n    throw new Error(`Unable to find child at ${JSON.stringify(operation.at)}`);\n  if (operation.editor.isTextSpan(child)) {\n    operation.props.includes(\"text\") && operation.editor.apply({\n      type: \"remove_text\",\n      path: childPath,\n      offset: 0,\n      text: child.text\n    });\n    const newNode = {};\n    for (const prop of operation.props)\n      if (prop !== \"_type\") {\n        if (prop === \"_key\") {\n          newNode._key = context.keyGenerator();\n          continue;\n        }\n        newNode[prop] = null;\n      }\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(operation.editor, newNode, {\n      at: childPath\n    });\n    return;\n  }\n  if (slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(child)) {\n    const value = \"value\" in child && typeof child.value == \"object\" ? child.value : {}, patches = operation.props.map((prop) => ({\n      type: \"unset\",\n      path: [prop]\n    })), newValue = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.applyAll)(value, patches);\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(operation.editor, {\n      ...child,\n      _key: operation.props.includes(\"_key\") ? context.keyGenerator() : child._key,\n      value: newValue\n    }, {\n      at: childPath\n    });\n    return;\n  }\n  throw new Error(`Unable to determine the type of child at ${JSON.stringify(operation.at)}`);\n}, decoratorAddOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const editor = operation.editor, mark = operation.decorator, value = fromSlateValue(editor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), manualAnchor = operation.at?.anchor ? (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.blockOffsetToSpanSelectionPoint)({\n    context: {\n      ...context,\n      value\n    },\n    blockOffset: operation.at.anchor,\n    direction: \"backward\"\n  }) : void 0, manualFocus = operation.at?.focus ? (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.blockOffsetToSpanSelectionPoint)({\n    context: {\n      ...context,\n      value\n    },\n    blockOffset: operation.at.focus,\n    direction: \"forward\"\n  }) : void 0, manualSelection = manualAnchor && manualFocus ? {\n    anchor: manualAnchor,\n    focus: manualFocus\n  } : void 0, selection = manualSelection ? toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: manualSelection\n    },\n    blockIndexMap: operation.editor.blockIndexMap\n  }) ?? editor.selection : editor.selection;\n  if (!selection)\n    return;\n  const editorSelection = slateRangeToSelection({\n    schema: context.schema,\n    editor,\n    range: selection\n  }), anchorOffset = editorSelection ? (0,_chunks_es_util_slice_text_block_js__WEBPACK_IMPORTED_MODULE_32__.selectionPointToBlockOffset)({\n    context: {\n      ...context,\n      value\n    },\n    selectionPoint: editorSelection.anchor\n  }) : void 0, focusOffset = editorSelection ? (0,_chunks_es_util_slice_text_block_js__WEBPACK_IMPORTED_MODULE_32__.selectionPointToBlockOffset)({\n    context: {\n      ...context,\n      value\n    },\n    selectionPoint: editorSelection.focus\n  }) : void 0;\n  if (!anchorOffset || !focusOffset)\n    throw new Error(\"Unable to find anchor or focus offset\");\n  if (slate__WEBPACK_IMPORTED_MODULE_14__.Range.isExpanded(selection)) {\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {}, {\n      at: selection,\n      match: slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText,\n      split: !0,\n      hanging: !0\n    });\n    const newValue = fromSlateValue(editor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), newSelection = (0,_chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_33__.blockOffsetsToSelection)({\n      context: {\n        ...context,\n        value: newValue\n      },\n      offsets: {\n        anchor: anchorOffset,\n        focus: focusOffset\n      },\n      backward: editorSelection?.backward\n    }), trimmedSelection = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getTrimmedSelection)({\n      blockIndexMap: editor.blockIndexMap,\n      context: {\n        converters: [],\n        keyGenerator: context.keyGenerator,\n        readOnly: !1,\n        schema: context.schema,\n        selection: newSelection,\n        value: newValue\n      },\n      decoratorState: editor.decoratorState\n    });\n    if (!trimmedSelection)\n      throw new Error(\"Unable to find trimmed selection\");\n    const newRange = toSlateRange({\n      context: {\n        schema: context.schema,\n        value: operation.editor.value,\n        selection: trimmedSelection\n      },\n      blockIndexMap: operation.editor.blockIndexMap\n    });\n    if (!newRange)\n      throw new Error(\"Unable to find new selection\");\n    const splitTextNodes = slate__WEBPACK_IMPORTED_MODULE_14__.Range.isRange(newRange) ? [...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n      at: newRange,\n      match: (node) => slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(node)\n    })] : [];\n    for (const [node, path] of splitTextNodes) {\n      const marks = [...(Array.isArray(node.marks) ? node.marks : []).filter((eMark) => eMark !== mark), mark];\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n        marks\n      }, {\n        at: path,\n        match: slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText,\n        split: !0,\n        hanging: !0\n      });\n    }\n  } else {\n    if (!Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n      at: selection,\n      match: (node) => editor.isTextSpan(node)\n    }))?.at(0))\n      return;\n    const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, selection, {\n      depth: 1\n    }), lonelyEmptySpan = editor.isTextBlock(block) && block.children.length === 1 && editor.isTextSpan(block.children[0]) && block.children[0].text === \"\" ? block.children[0] : void 0;\n    if (lonelyEmptySpan) {\n      const existingMarks = lonelyEmptySpan.marks ?? [], existingMarksWithoutDecorator = existingMarks.filter((existingMark) => existingMark !== mark);\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n        marks: existingMarks.length === existingMarksWithoutDecorator.length ? [...existingMarks, mark] : existingMarksWithoutDecorator\n      }, {\n        at: blockPath,\n        match: (node) => editor.isTextSpan(node)\n      });\n    } else\n      editor.decoratorState[mark] = !0;\n  }\n  if (editor.selection) {\n    const selection2 = editor.selection;\n    editor.selection = {\n      ...selection2\n    };\n  }\n}, deleteOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const anchorBlockKey = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getBlockKeyFromSelectionPoint)(operation.at.anchor), focusBlockKey = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getBlockKeyFromSelectionPoint)(operation.at.focus), startBlockKey = operation.at.backward ? focusBlockKey : anchorBlockKey, endBlockKey = operation.at.backward ? anchorBlockKey : focusBlockKey, endOffset = operation.at.backward ? operation.at.focus.offset : operation.at.anchor.offset;\n  if (!startBlockKey)\n    throw new Error(\"Failed to get start block key\");\n  if (!endBlockKey)\n    throw new Error(\"Failed to get end block key\");\n  const startBlockIndex = operation.editor.blockIndexMap.get(startBlockKey);\n  if (startBlockIndex === void 0)\n    throw new Error(\"Failed to get start block index\");\n  const startBlock = operation.editor.value.at(startBlockIndex);\n  if (!startBlock)\n    throw new Error(\"Failed to get start block\");\n  const endBlockIndex = operation.editor.blockIndexMap.get(endBlockKey);\n  if (endBlockIndex === void 0)\n    throw new Error(\"Failed to get end block index\");\n  const endBlock = operation.editor.value.at(endBlockIndex);\n  if (!endBlock)\n    throw new Error(\"Failed to get end block\");\n  if (operation.unit === \"block\") {\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(operation.editor, {\n      at: {\n        anchor: {\n          path: [startBlockIndex],\n          offset: 0\n        },\n        focus: {\n          path: [endBlockIndex],\n          offset: 0\n        }\n      },\n      mode: \"highest\"\n    }), operation.editor.children.length === 0 && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(operation.editor, createPlaceholderBlock(context));\n    return;\n  }\n  const range = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: operation.at\n    },\n    blockIndexMap: operation.editor.blockIndexMap\n  });\n  if (!range)\n    throw new Error(`Failed to get Slate Range for selection ${JSON.stringify(operation.at)}`);\n  if (operation.direction === \"backward\" && operation.unit === \"line\") {\n    const parentBlockEntry = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.above(operation.editor, {\n      match: (n) => slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(n) && slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isBlock(operation.editor, n),\n      at: range\n    });\n    if (parentBlockEntry) {\n      const [, parentBlockPath] = parentBlockEntry, parentElementRange = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.range(operation.editor, parentBlockPath, range.anchor), currentLineRange = findCurrentLineRange(operation.editor, parentElementRange);\n      if (!slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(currentLineRange)) {\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.delete(operation.editor, {\n          at: currentLineRange\n        });\n        return;\n      }\n    }\n  }\n  const hanging = (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(context, endBlock) && endOffset === 0;\n  (0,slate__WEBPACK_IMPORTED_MODULE_14__.deleteText)(operation.editor, {\n    at: range,\n    reverse: operation.direction === \"backward\",\n    unit: operation.unit,\n    hanging\n  }), operation.editor.selection && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(context, startBlock) && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(context, endBlock) && (0,slate__WEBPACK_IMPORTED_MODULE_14__.setSelection)(operation.editor, {\n    anchor: operation.editor.selection.focus,\n    focus: operation.editor.selection.focus\n  });\n};\nfunction findCurrentLineRange(editor, parentRange) {\n  const parentRangeBoundary = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.range(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Range.end(parentRange)), positions = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.positions(editor, {\n    at: parentRange\n  }));\n  let left = 0, right = positions.length, middle = Math.floor(right / 2);\n  if (rangesAreOnSameLine(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.range(editor, positions[left]), parentRangeBoundary))\n    return slate__WEBPACK_IMPORTED_MODULE_14__.Editor.range(editor, positions[left], parentRangeBoundary);\n  if (positions.length < 2)\n    return slate__WEBPACK_IMPORTED_MODULE_14__.Editor.range(editor, positions[positions.length - 1], parentRangeBoundary);\n  for (; middle !== positions.length && middle !== left; )\n    rangesAreOnSameLine(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.range(editor, positions[middle]), parentRangeBoundary) ? right = middle : left = middle, middle = Math.floor((left + right) / 2);\n  return slate__WEBPACK_IMPORTED_MODULE_14__.Editor.range(editor, positions[left], parentRangeBoundary);\n}\nfunction rangesAreOnSameLine(editor, range1, range2) {\n  const rect1 = slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.toDOMRange(editor, range1).getBoundingClientRect(), rect2 = slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.toDOMRange(editor, range2).getBoundingClientRect();\n  return domRectsIntersect(rect1, rect2) && domRectsIntersect(rect2, rect1);\n}\nfunction domRectsIntersect(rect, compareRect) {\n  const middle = (compareRect.top + compareRect.bottom) / 2;\n  return rect.top <= middle && rect.bottom >= middle;\n}\nconst insertBlockOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const parsedBlock = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.parseBlock)({\n    block: operation.block,\n    context,\n    options: {\n      removeUnusedMarkDefs: !0,\n      validateFields: !0\n    }\n  });\n  if (!parsedBlock)\n    throw new Error(`Failed to parse block ${JSON.stringify(operation.block)}`);\n  const fragment = toSlateValue([parsedBlock], {\n    schemaTypes: context.schema\n  })[0];\n  if (!fragment)\n    throw new Error(`Failed to convert block to Slate fragment ${JSON.stringify(parsedBlock)}`);\n  insertBlock({\n    context,\n    block: fragment,\n    placement: operation.placement,\n    select: operation.select ?? \"start\",\n    editor: operation.editor\n  });\n};\nfunction insertBlock({\n  context,\n  block,\n  placement,\n  select,\n  editor\n}) {\n  const [startBlock, startBlockPath] = getSelectionStartBlock({\n    editor\n  }), [endBlock, endBlockPath] = getSelectionEndBlock({\n    editor\n  });\n  if (!editor.selection || !startBlock || !startBlockPath || !endBlock || !endBlockPath) {\n    select !== \"none\" && slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.focus(editor);\n    const [lastBlock, lastBlockPath] = getLastBlock({\n      editor\n    });\n    if (placement === \"before\")\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n        at: [0]\n      }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, [0])) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, [0]));\n    else if (placement === \"after\") {\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0];\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n        at: nextPath\n      }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, nextPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, nextPath));\n    } else {\n      if (lastBlock && isEqualToEmptyEditor([lastBlock], context.schema)) {\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n          at: lastBlockPath\n        }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n          at: lastBlockPath,\n          select: !1\n        }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(editor), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, lastBlockPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, lastBlockPath));\n        return;\n      }\n      if (editor.isTextBlock(block) && lastBlock && editor.isTextBlock(lastBlock)) {\n        const selectionBefore = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, lastBlockPath);\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertFragment(editor, [block], {\n          at: slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, lastBlockPath)\n        }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, selectionBefore) : select === \"none\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(editor);\n        return;\n      }\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0];\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n        at: nextPath,\n        select: !1\n      }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, nextPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, nextPath));\n    }\n  } else if (placement === \"before\") {\n    const currentSelection = editor.selection, selectionStartPoint = slate__WEBPACK_IMPORTED_MODULE_14__.Range.start(currentSelection);\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n      at: [selectionStartPoint.path[0]],\n      select: !1\n    }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, [selectionStartPoint.path[0]])) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, [selectionStartPoint.path[0]]));\n  } else if (placement === \"after\") {\n    const currentSelection = editor.selection, nextPath = [slate__WEBPACK_IMPORTED_MODULE_14__.Range.end(currentSelection).path[0] + 1];\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n      at: nextPath,\n      select: !1\n    }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, nextPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, nextPath));\n  } else {\n    const currentSelection = editor.selection, endBlockEndPoint = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, endBlockPath);\n    if (slate__WEBPACK_IMPORTED_MODULE_14__.Range.isExpanded(currentSelection) && !editor.isTextBlock(block)) {\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.delete(editor, {\n        at: currentSelection\n      });\n      const newSelection = editor.selection, [focusBlock, focusBlockPath] = getFocusBlock({\n        editor\n      });\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n        voids: !0\n      });\n      const adjustedSelection = newSelection.anchor.offset === 0 ? slate__WEBPACK_IMPORTED_MODULE_14__.Range.transform(newSelection, {\n        type: \"insert_node\",\n        node: block,\n        path: [newSelection.anchor.path[0]]\n      }) : newSelection;\n      select === \"none\" && adjustedSelection && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, adjustedSelection), focusBlock && isEqualToEmptyEditor([focusBlock], context.schema) && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n        at: focusBlockPath\n      });\n      return;\n    }\n    if (editor.isTextBlock(endBlock) && editor.isTextBlock(block)) {\n      const selectionStartPoint = slate__WEBPACK_IMPORTED_MODULE_14__.Range.start(currentSelection);\n      if (isEqualToEmptyEditor([endBlock], context.schema)) {\n        const currentSelection2 = editor.selection;\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n          at: endBlockPath,\n          select: !1\n        }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n          at: slate__WEBPACK_IMPORTED_MODULE_14__.Path.next(endBlockPath)\n        }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, selectionStartPoint) : select === \"end\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, endBlockPath)) : slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, currentSelection2);\n        return;\n      }\n      const endBlockChildKeys = endBlock.children.map((child) => child._key), endBlockMarkDefsKeys = endBlock.markDefs?.map((markDef) => markDef._key) ?? [], markDefKeyMap = /* @__PURE__ */ new Map(), adjustedMarkDefs = block.markDefs?.map((markDef) => {\n        if (endBlockMarkDefsKeys.includes(markDef._key)) {\n          const newKey = context.keyGenerator();\n          return markDefKeyMap.set(markDef._key, newKey), {\n            ...markDef,\n            _key: newKey\n          };\n        }\n        return markDef;\n      }), adjustedChildren = block.children.map((child) => {\n        if ((0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isSpan)(context, child)) {\n          const marks = child.marks?.map((mark) => markDefKeyMap.get(mark) || mark) ?? [];\n          if (!lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(child.marks, marks))\n            return {\n              ...child,\n              _key: endBlockChildKeys.includes(child._key) ? context.keyGenerator() : child._key,\n              marks\n            };\n        }\n        return endBlockChildKeys.includes(child._key) ? {\n          ...child,\n          _key: context.keyGenerator()\n        } : child;\n      });\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n        markDefs: [...endBlock.markDefs ?? [], ...adjustedMarkDefs ?? []]\n      }, {\n        at: endBlockPath\n      });\n      const adjustedBlock = lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(block.children, adjustedChildren) ? block : {\n        ...block,\n        children: adjustedChildren\n      };\n      if (select === \"end\") {\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertFragment(editor, [adjustedBlock], {\n          voids: !0\n        });\n        return;\n      }\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertFragment(editor, [adjustedBlock], {\n        at: currentSelection,\n        voids: !0\n      }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, selectionStartPoint) : slate__WEBPACK_IMPORTED_MODULE_14__.Point.equals(selectionStartPoint, endBlockEndPoint) || slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, selectionStartPoint);\n    } else if (editor.isTextBlock(endBlock)) {\n      const endBlockStartPoint = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, endBlockPath), endBlockEndPoint2 = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, endBlockPath), selectionStartPoint = slate__WEBPACK_IMPORTED_MODULE_14__.Range.start(currentSelection), selectionEndPoint = slate__WEBPACK_IMPORTED_MODULE_14__.Range.end(currentSelection);\n      if (slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(currentSelection) && slate__WEBPACK_IMPORTED_MODULE_14__.Point.equals(selectionStartPoint, endBlockStartPoint))\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n          at: endBlockPath,\n          select: !1\n        }), (select === \"start\" || select === \"end\") && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, endBlockPath)), (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isEmptyTextBlock)(context, endBlock) && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n          at: slate__WEBPACK_IMPORTED_MODULE_14__.Path.next(endBlockPath)\n        });\n      else if (slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(currentSelection) && slate__WEBPACK_IMPORTED_MODULE_14__.Point.equals(selectionEndPoint, endBlockEndPoint2)) {\n        const nextPath = [endBlockPath[0] + 1];\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n          at: nextPath,\n          select: !1\n        }), (select === \"start\" || select === \"end\") && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, nextPath));\n      } else if (slate__WEBPACK_IMPORTED_MODULE_14__.Range.isExpanded(currentSelection) && slate__WEBPACK_IMPORTED_MODULE_14__.Point.equals(selectionStartPoint, endBlockStartPoint) && slate__WEBPACK_IMPORTED_MODULE_14__.Point.equals(selectionEndPoint, endBlockEndPoint2))\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertFragment(editor, [block], {\n          at: currentSelection\n        }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, endBlockPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, endBlockPath));\n      else if (slate__WEBPACK_IMPORTED_MODULE_14__.Range.isExpanded(currentSelection) && slate__WEBPACK_IMPORTED_MODULE_14__.Point.equals(selectionStartPoint, endBlockStartPoint))\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertFragment(editor, [block], {\n          at: currentSelection\n        }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, endBlockPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, endBlockPath));\n      else if (slate__WEBPACK_IMPORTED_MODULE_14__.Range.isExpanded(currentSelection) && slate__WEBPACK_IMPORTED_MODULE_14__.Point.equals(selectionEndPoint, endBlockEndPoint2))\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertFragment(editor, [block], {\n          at: currentSelection\n        }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Path.next(endBlockPath))) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Path.next(endBlockPath)));\n      else {\n        const currentSelection2 = editor.selection, [focusChild] = getFocusChild({\n          editor\n        });\n        if (focusChild && editor.isTextSpan(focusChild))\n          slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.splitNodes(editor, {\n            at: currentSelection2\n          }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertFragment(editor, [block], {\n            at: currentSelection2\n          }), select === \"start\" || select === \"end\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, [endBlockPath[0] + 1]) : slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, currentSelection2);\n        else {\n          const nextPath = [endBlockPath[0] + 1];\n          slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n            at: nextPath,\n            select: !1\n          }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, currentSelection2), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, nextPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, nextPath));\n        }\n      }\n    } else {\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, [block], {\n        select: !1\n      });\n      const nextPath = [endBlockPath[0] + 1];\n      select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.start(editor, nextPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Editor.end(editor, nextPath));\n    }\n  }\n}\nconst insertChildOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const focus = operation.editor.selection?.focus, focusBlockIndex = focus?.path.at(0), focusChildIndex = focus?.path.at(1);\n  if (focusBlockIndex === void 0 || focusChildIndex === void 0)\n    throw new Error(\"Unable to insert child without a focus\");\n  const [focusBlock, focusBlockPath] = getFocusBlock({\n    editor: operation.editor\n  });\n  if (!focus || !focusBlock || !focusBlockPath)\n    throw new Error(\"Unable to insert child without a focus block\");\n  if (!(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(context, focusBlock))\n    throw new Error(\"Unable to insert child into a non-text block\");\n  const markDefs = focusBlock.markDefs ?? [], markDefKeyMap = /* @__PURE__ */ new Map();\n  for (const markDef of markDefs)\n    markDefKeyMap.set(markDef._key, markDef._key);\n  const span = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.parseSpan)({\n    span: operation.child,\n    context,\n    markDefKeyMap,\n    options: {\n      validateFields: !0\n    }\n  });\n  if (span) {\n    const [focusSpan] = getFocusSpan({\n      editor: operation.editor\n    });\n    focusSpan ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(operation.editor, span, {\n      at: focus,\n      select: !0\n    }) : slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(operation.editor, span, {\n      at: [focusBlockIndex, focusChildIndex + 1],\n      select: !0\n    }), slate_dom__WEBPACK_IMPORTED_MODULE_17__.EDITOR_TO_PENDING_SELECTION.set(operation.editor, operation.editor.selection);\n    return;\n  }\n  const inlineObject = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.parseInlineObject)({\n    inlineObject: operation.child,\n    context,\n    options: {\n      validateFields: !0\n    }\n  });\n  if (inlineObject) {\n    const {\n      _key,\n      _type,\n      ...rest\n    } = inlineObject;\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(operation.editor, {\n      _key,\n      _type,\n      children: [{\n        _key: VOID_CHILD_KEY,\n        _type: \"span\",\n        text: \"\",\n        marks: []\n      }],\n      value: rest,\n      __inline: !0\n    }, {\n      at: [focusBlockIndex, focusChildIndex + 1],\n      select: !0\n    });\n    return;\n  }\n  throw new Error(\"Unable to parse child\");\n}, insertTextOperationImplementation = ({\n  operation\n}) => {\n  slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertText(operation.editor, operation.text);\n}, moveBackwardOperationImplementation = ({\n  operation\n}) => {\n  slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.move(operation.editor, {\n    unit: \"character\",\n    distance: operation.distance,\n    reverse: !0\n  });\n}, moveBlockOperationImplementation = ({\n  operation\n}) => {\n  const originKey = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getBlockKeyFromSelectionPoint)({\n    path: operation.at\n  });\n  if (!originKey)\n    throw new Error(\"Failed to get block key from selection point\");\n  const originBlockIndex = operation.editor.blockIndexMap.get(originKey);\n  if (originBlockIndex === void 0)\n    throw new Error(\"Failed to get block index from block key\");\n  const destinationKey = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getBlockKeyFromSelectionPoint)({\n    path: operation.to\n  });\n  if (!destinationKey)\n    throw new Error(\"Failed to get block key from selection point\");\n  const destinationBlockIndex = operation.editor.blockIndexMap.get(destinationKey);\n  if (destinationBlockIndex === void 0)\n    throw new Error(\"Failed to get block index from block key\");\n  slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.moveNodes(operation.editor, {\n    at: [originBlockIndex],\n    to: [destinationBlockIndex],\n    mode: \"highest\"\n  });\n}, moveForwardOperationImplementation = ({\n  operation\n}) => {\n  slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.move(operation.editor, {\n    unit: \"character\",\n    distance: operation.distance\n  });\n}, selectOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const newSelection = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: operation.at\n    },\n    blockIndexMap: operation.editor.blockIndexMap\n  });\n  newSelection ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(operation.editor, newSelection) : slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(operation.editor), slate_dom__WEBPACK_IMPORTED_MODULE_17__.IS_FOCUSED.get(operation.editor) && slate_dom__WEBPACK_IMPORTED_MODULE_17__.IS_READ_ONLY.get(operation.editor) && slate_dom__WEBPACK_IMPORTED_MODULE_17__.IS_FOCUSED.set(operation.editor, !1);\n}, behaviorOperationImplementations = {\n  \"annotation.add\": addAnnotationOperationImplementation,\n  \"annotation.remove\": removeAnnotationOperationImplementation,\n  \"block.set\": blockSetOperationImplementation,\n  \"block.unset\": blockUnsetOperationImplementation,\n  \"child.set\": childSetOperationImplementation,\n  \"child.unset\": childUnsetOperationImplementation,\n  \"decorator.add\": decoratorAddOperationImplementation,\n  \"decorator.remove\": removeDecoratorOperationImplementation,\n  delete: deleteOperationImplementation,\n  \"history.redo\": historyRedoOperationImplementation,\n  \"history.undo\": historyUndoOperationImplementation,\n  \"insert.block\": insertBlockOperationImplementation,\n  \"insert.child\": insertChildOperationImplementation,\n  \"insert.text\": insertTextOperationImplementation,\n  \"move.backward\": moveBackwardOperationImplementation,\n  \"move.block\": moveBlockOperationImplementation,\n  \"move.forward\": moveForwardOperationImplementation,\n  select: selectOperationImplementation\n};\nfunction performOperation({\n  context,\n  operation\n}) {\n  slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(operation.editor, () => {\n    try {\n      switch (operation.type) {\n        case \"annotation.add\": {\n          behaviorOperationImplementations[\"annotation.add\"]({\n            context,\n            operation\n          });\n          break;\n        }\n        case \"annotation.remove\": {\n          behaviorOperationImplementations[\"annotation.remove\"]({\n            context,\n            operation\n          });\n          break;\n        }\n        case \"block.set\": {\n          behaviorOperationImplementations[\"block.set\"]({\n            context,\n            operation\n          });\n          break;\n        }\n        case \"block.unset\": {\n          behaviorOperationImplementations[\"block.unset\"]({\n            context,\n            operation\n          });\n          break;\n        }\n        case \"child.set\": {\n          behaviorOperationImplementations[\"child.set\"]({\n            context,\n            operation\n          });\n          break;\n        }\n        case \"child.unset\": {\n          behaviorOperationImplementations[\"child.unset\"]({\n            context,\n            operation\n          });\n          break;\n        }\n        case \"decorator.add\": {\n          behaviorOperationImplementations[\"decorator.add\"]({\n            context,\n            operation\n          });\n          break;\n        }\n        case \"decorator.remove\": {\n          behaviorOperationImplementations[\"decorator.remove\"]({\n            context,\n            operation\n          });\n          break;\n        }\n        case \"delete\": {\n          behaviorOperationImplementations.delete({\n            context,\n            operation\n          });\n          break;\n        }\n        case \"history.redo\": {\n          behaviorOperationImplementations[\"history.redo\"]({\n            context,\n            operation\n          });\n          break;\n        }\n        case \"history.undo\": {\n          behaviorOperationImplementations[\"history.undo\"]({\n            context,\n            operation\n          });\n          break;\n        }\n        case \"insert.block\": {\n          behaviorOperationImplementations[\"insert.block\"]({\n            context,\n            operation\n          });\n          break;\n        }\n        case \"insert.child\": {\n          behaviorOperationImplementations[\"insert.child\"]({\n            context,\n            operation\n          });\n          break;\n        }\n        case \"insert.text\": {\n          behaviorOperationImplementations[\"insert.text\"]({\n            context,\n            operation\n          });\n          break;\n        }\n        case \"move.backward\": {\n          behaviorOperationImplementations[\"move.backward\"]({\n            context,\n            operation\n          });\n          break;\n        }\n        case \"move.block\": {\n          behaviorOperationImplementations[\"move.block\"]({\n            context,\n            operation\n          });\n          break;\n        }\n        case \"move.forward\": {\n          behaviorOperationImplementations[\"move.forward\"]({\n            context,\n            operation\n          });\n          break;\n        }\n        default: {\n          behaviorOperationImplementations.select({\n            context,\n            operation\n          });\n          break;\n        }\n      }\n    } catch (error) {\n      console.error(new Error(`Executing \"${operation.type}\" failed due to: ${error.message}`));\n    }\n  });\n}\nconst IS_PERFORMING_OPERATION = /* @__PURE__ */ new WeakMap();\nfunction withPerformingBehaviorOperation(editor, fn) {\n  const prev = IS_PERFORMING_OPERATION.get(editor);\n  IS_PERFORMING_OPERATION.set(editor, !0), fn(), IS_PERFORMING_OPERATION.set(editor, prev);\n}\nfunction isPerformingBehaviorOperation(editor) {\n  return IS_PERFORMING_OPERATION.get(editor) ?? !1;\n}\nfunction createWithEventListeners(editorActor) {\n  return function(editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== void 0)\n      return editor;\n    const {\n      delete: editorDelete,\n      select\n    } = editor;\n    return editor.delete = (options) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        editorDelete(options);\n        return;\n      }\n      const at = options?.at ?? editor.selection;\n      if (!at) {\n        console.error(\"Unexpected call to .delete(...) without `at` option\");\n        return;\n      }\n      const range = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.range(editor, at), selection = slateRangeToSelection({\n        schema: editorActor.getSnapshot().context.schema,\n        editor,\n        range\n      });\n      if (!selection) {\n        console.error(\"Unexpected call to .delete(...) with invalid `at` option\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"delete\",\n          at: selection,\n          direction: options?.reverse ? \"backward\" : \"forward\",\n          unit: options?.unit\n        },\n        editor\n      });\n    }, editor.deleteBackward = (unit) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        console.error(\"Unexpected call to .deleteBackward(...)\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"delete.backward\",\n          unit\n        },\n        editor\n      });\n    }, editor.deleteForward = (unit) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        console.error(\"Unexpected call to .deleteForward(...)\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"delete.forward\",\n          unit\n        },\n        editor\n      });\n    }, editor.insertBreak = () => {\n      if (isPerformingBehaviorOperation(editor)) {\n        console.error(\"Unexpected call to .insertBreak(...)\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.break\"\n        },\n        editor\n      });\n    }, editor.insertData = (dataTransfer) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        console.error(\"Unexpected call to .insertData(...)\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"input.*\",\n          originEvent: {\n            dataTransfer\n          }\n        },\n        editor\n      });\n    }, editor.insertSoftBreak = () => {\n      if (isPerformingBehaviorOperation(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema\n          },\n          operation: {\n            type: \"insert.text\",\n            text: `\n`,\n            editor\n          }\n        });\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.soft break\"\n        },\n        editor\n      });\n    }, editor.insertText = (text) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema\n          },\n          operation: {\n            type: \"insert.text\",\n            text,\n            editor\n          }\n        });\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.text\",\n          text\n        },\n        editor\n      });\n    }, editor.redo = () => {\n      if (isPerformingBehaviorOperation(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema\n          },\n          operation: {\n            type: \"history.redo\",\n            editor\n          }\n        });\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"history.redo\"\n        },\n        editor\n      });\n    }, editor.select = (location) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        select(location);\n        return;\n      }\n      const range = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.range(editor, location);\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"select\",\n          at: slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range\n          })\n        },\n        editor\n      });\n    }, editor.setFragmentData = () => {\n      console.error(\"Unexpected call to .setFragmentData(...)\");\n    }, editor.undo = () => {\n      if (isPerformingBehaviorOperation(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema\n          },\n          operation: {\n            type: \"history.undo\",\n            editor\n          }\n        });\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"history.undo\"\n        },\n        editor\n      });\n    }, editor;\n  };\n}\nfunction createWithMaxBlocks(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(operation);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(operation);\n        return;\n      }\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1;\n      rows > 0 && editor.children.length >= rows && (operation.type === \"insert_node\" || operation.type === \"split_node\") && operation.path.length === 1 || apply2(operation);\n    }, editor;\n  };\n}\nfunction createWithObjectKeys(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2,\n      normalizeNode\n    } = editor;\n    return editor.apply = (operation) => {\n      if (isChangingRemotely(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (operation.type === \"split_node\") {\n        const existingKeys = [...slate__WEBPACK_IMPORTED_MODULE_14__.Node.descendants(editor)].map(([node]) => node._key);\n        apply2({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key: operation.properties._key === void 0 || existingKeys.includes(operation.properties._key) ? editorActor.getSnapshot().context.keyGenerator() : operation.properties._key\n          }\n        });\n        return;\n      }\n      if (operation.type === \"insert_node\" && !slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(operation.node)) {\n        const existingKeys = [...slate__WEBPACK_IMPORTED_MODULE_14__.Node.descendants(editor)].map(([node]) => node._key);\n        apply2({\n          ...operation,\n          node: {\n            ...operation.node,\n            _key: operation.node._key === void 0 || existingKeys.includes(operation.node._key) ? editorActor.getSnapshot().context.keyGenerator() : operation.node._key\n          }\n        });\n        return;\n      }\n      if (operation.type === \"merge_node\") {\n        const index = operation.path[operation.path.length - 1], prevPath = slate__WEBPACK_IMPORTED_MODULE_14__.Path.previous(operation.path), prevIndex = prevPath[prevPath.length - 1];\n        if (operation.path.length !== 1 || prevPath.length !== 1) {\n          apply2(operation);\n          return;\n        }\n        const block = editor.value.at(index), previousBlock = editor.value.at(prevIndex);\n        if (!block || !previousBlock) {\n          apply2(operation);\n          return;\n        }\n        if (!(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(editorActor.getSnapshot().context, block) || !(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(editorActor.getSnapshot().context, previousBlock)) {\n          apply2(operation);\n          return;\n        }\n        const previousBlockChildKeys = previousBlock.children.map((child) => child._key), previousBlockMarkDefKeys = previousBlock.markDefs?.map((markDef) => markDef._key) ?? [], markDefKeyMap = /* @__PURE__ */ new Map(), adjustedMarkDefs = block.markDefs?.map((markDef) => {\n          if (previousBlockMarkDefKeys.includes(markDef._key)) {\n            const newKey = editorActor.getSnapshot().context.keyGenerator();\n            return markDefKeyMap.set(markDef._key, newKey), {\n              ...markDef,\n              _key: newKey\n            };\n          }\n          return markDef;\n        });\n        let childIndex = 0;\n        for (const child of block.children) {\n          if ((0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isSpan)(editorActor.getSnapshot().context, child)) {\n            const marks = child.marks?.map((mark) => markDefKeyMap.get(mark) || mark) ?? [];\n            lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(child.marks, marks) || slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n              marks\n            }, {\n              at: [index, childIndex]\n            });\n          }\n          previousBlockChildKeys.includes(child._key) && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n            _key: editorActor.getSnapshot().context.keyGenerator()\n          }, {\n            at: [index, childIndex]\n          }), childIndex++;\n        }\n        apply2({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            // Make sure the adjusted markDefs are carried along for the merge\n            // operation\n            markDefs: adjustedMarkDefs\n          }\n        });\n        return;\n      }\n      apply2(operation);\n    }, editor.normalizeNode = (entry) => {\n      const [node, path] = entry;\n      if (slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(node) && node._type === editorActor.getSnapshot().context.schema.block.name) {\n        if (!node._key) {\n          editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n            _key: editorActor.getSnapshot().context.keyGenerator()\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n        for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, path))\n          if (!child._key) {\n            editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n              _key: editorActor.getSnapshot().context.keyGenerator()\n            }, {\n              at: childPath\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n      }\n      normalizeNode(entry);\n    }, editor;\n  };\n}\nfunction createApplyPatch(schema) {\n  return (editor, patch) => {\n    let changed = !1;\n    try {\n      switch (patch.type) {\n        case \"insert\":\n          changed = insertPatch(editor, patch, schema);\n          break;\n        case \"unset\":\n          changed = unsetPatch(editor, patch);\n          break;\n        case \"set\":\n          changed = setPatch(editor, patch);\n          break;\n        case \"diffMatchPatch\":\n          changed = diffMatchPatch(editor, patch);\n          break;\n      }\n    } catch (err) {\n      console.error(err);\n    }\n    return changed;\n  };\n}\nfunction diffMatchPatch(editor, patch) {\n  const block = findBlock(editor.children, patch.path);\n  if (!block)\n    return !1;\n  const child = findBlockChild(block, patch.path);\n  if (!child || !(block && editor.isTextBlock(block.node) && patch.path.length === 4 && patch.path[1] === \"children\" && patch.path[3] === \"text\") || !slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(child.node))\n    return !1;\n  const patches = parse(patch.value), [newValue] = apply(patches, child.node.text, {\n    allowExceedingIndices: !0\n  }), diff$1 = cleanupEfficiency(diff(child.node.text, newValue), 5);\n  let offset = 0;\n  for (const [op, text] of diff$1)\n    op === DIFF_INSERT ? (editor.apply({\n      type: \"insert_text\",\n      path: [block.index, child.index],\n      offset,\n      text\n    }), offset += text.length) : op === DIFF_DELETE ? editor.apply({\n      type: \"remove_text\",\n      path: [block.index, child.index],\n      offset,\n      text\n    }) : op === DIFF_EQUAL && (offset += text.length);\n  return !0;\n}\nfunction insertPatch(editor, patch, schema) {\n  const block = findBlock(editor.children, patch.path);\n  if (!block || patch.path.length > 1 && patch.path[1] !== \"children\")\n    return !1;\n  if (patch.path.length === 1) {\n    const {\n      items: items2,\n      position: position2\n    } = patch, blocksToInsert = toSlateValue(items2, {\n      schemaTypes: schema\n    }, KEY_TO_SLATE_ELEMENT.get(editor)), targetBlockIndex = block.index, normalizedIdx2 = position2 === \"after\" ? targetBlockIndex + 1 : targetBlockIndex, editorWasEmptyBefore = isEqualToEmptyEditor(editor.children, schema);\n    return slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, blocksToInsert, {\n      at: [normalizedIdx2]\n    }), editorWasEmptyBefore && typeof patch.path[0] == \"number\" && patch.path[0] === 0 && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n      at: [position2 === \"before\" ? targetBlockIndex + 1 : targetBlockIndex]\n    }), !0;\n  }\n  const {\n    items,\n    position\n  } = patch, targetChild = findBlockChild(block, patch.path);\n  if (!targetChild)\n    return !1;\n  const childrenToInsert = toSlateValue([{\n    ...block.node,\n    children: items\n  }], {\n    schemaTypes: schema\n  }, KEY_TO_SLATE_ELEMENT.get(editor)), normalizedIdx = position === \"after\" ? targetChild.index + 1 : targetChild.index, childInsertPath = [block.index, normalizedIdx];\n  return childrenToInsert && slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(childrenToInsert[0]) && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, childrenToInsert[0].children, {\n    at: childInsertPath\n  }), !0;\n}\nfunction setPatch(editor, patch) {\n  let value = patch.value;\n  typeof patch.path[3] == \"string\" && (value = {}, value[patch.path[3]] = patch.value);\n  const block = findBlock(editor.children, patch.path);\n  if (!block)\n    return !1;\n  const isTextBlock2 = editor.isTextBlock(block.node);\n  if (isTextBlock2 && patch.path.length > 1 && patch.path[1] !== \"children\")\n    return !1;\n  const child = findBlockChild(block, patch.path);\n  if (isTextBlock2 && child) {\n    if (slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(child.node))\n      if (slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(value)) {\n        const oldText = child.node.text, newText = value.text;\n        oldText !== newText && (editor.apply({\n          type: \"remove_text\",\n          path: [block.index, child.index],\n          offset: 0,\n          text: oldText\n        }), editor.apply({\n          type: \"insert_text\",\n          path: [block.index, child.index],\n          offset: 0,\n          text: newText\n        }), editor.onChange());\n      } else {\n        const propPath = patch.path.slice(3), propEntry = propPath.at(0);\n        if (propEntry === void 0 || typeof propEntry == \"string\" && [\"_key\", \"_type\", \"text\"].includes(propEntry))\n          return !1;\n        const newNode = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.applyAll)(child.node, [{\n          ...patch,\n          path: propPath\n        }]);\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, newNode, {\n          at: [block.index, child.index]\n        });\n      }\n    else {\n      const propPath = patch.path.slice(3), reservedProps = [\"_key\", \"_type\", \"children\", \"__inline\"], propEntry = propPath.at(0);\n      if (propEntry === void 0 || typeof propEntry == \"string\" && reservedProps.includes(propEntry))\n        return !1;\n      const value2 = \"value\" in child.node && typeof child.node.value == \"object\" ? child.node.value : {}, newValue = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.applyAll)(value2, [{\n        ...patch,\n        path: patch.path.slice(3)\n      }]);\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n        ...child.node,\n        value: newValue\n      }, {\n        at: [block.index, child.index]\n      });\n    }\n    return !0;\n  } else if (slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(block.node) && patch.path.length === 1) {\n    const {\n      children,\n      ...nextRest\n    } = value, {\n      children: _prevChildren,\n      ...prevRest\n    } = block.node || {\n      children: void 0\n    };\n    editor.apply({\n      type: \"set_node\",\n      path: [block.index],\n      properties: {\n        ...prevRest\n      },\n      newProperties: nextRest\n    });\n    const blockNode = block.node;\n    blockNode.children.forEach((child2, childIndex) => {\n      editor.apply({\n        type: \"remove_node\",\n        path: [block.index, blockNode.children.length - 1 - childIndex],\n        node: child2\n      });\n    }), Array.isArray(children) && children.forEach((child2, childIndex) => {\n      editor.apply({\n        type: \"insert_node\",\n        path: [block.index, childIndex],\n        node: child2\n      });\n    });\n  } else if (block && \"value\" in block.node)\n    if (patch.path.length > 1 && patch.path[1] !== \"children\") {\n      const newVal = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.applyAll)(block.node.value, [{\n        ...patch,\n        path: patch.path.slice(1)\n      }]);\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n        ...block.node,\n        value: newVal\n      }, {\n        at: [block.index]\n      });\n    } else\n      return !1;\n  return !0;\n}\nfunction unsetPatch(editor, patch) {\n  if (patch.path.length === 0) {\n    const previousSelection = editor.selection;\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(editor);\n    const children = slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, [], {\n      reverse: !0\n    });\n    for (const [_, path] of children)\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n        at: path\n      });\n    return slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, editor.pteCreateTextBlock({\n      decorators: []\n    })), previousSelection && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, {\n      anchor: {\n        path: [0, 0],\n        offset: 0\n      },\n      focus: {\n        path: [0, 0],\n        offset: 0\n      }\n    }), editor.onChange(), !0;\n  }\n  const block = findBlock(editor.children, patch.path);\n  if (!block)\n    return !1;\n  if (patch.path.length === 1) {\n    if (editor.children.length === 1) {\n      const previousSelection = editor.selection;\n      return slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(editor), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n        at: [block.index]\n      }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, editor.pteCreateTextBlock({\n        decorators: []\n      })), previousSelection && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, {\n        anchor: {\n          path: [0, 0],\n          offset: 0\n        },\n        focus: {\n          path: [0, 0],\n          offset: 0\n        }\n      }), editor.onChange(), !0;\n    }\n    return slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n      at: [block.index]\n    }), !0;\n  }\n  const child = findBlockChild(block, patch.path);\n  if (editor.isTextBlock(block.node) && child && patch.path[1] === \"children\" && patch.path.length === 3)\n    return slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n      at: [block.index, child.index]\n    }), !0;\n  if (child && !slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(child.node)) {\n    const propEntry = patch.path.slice(3).at(0);\n    if (propEntry === void 0 || typeof propEntry == \"string\" && [\"_key\", \"_type\", \"children\", \"__inline\"].includes(propEntry))\n      return !1;\n    const value = \"value\" in child.node && typeof child.node.value == \"object\" ? child.node.value : {}, newValue = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.applyAll)(value, [{\n      ...patch,\n      path: patch.path.slice(3)\n    }]);\n    return slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n      ...child.node,\n      value: newValue\n    }, {\n      at: [block.index, child.index]\n    }), !0;\n  }\n  if (child && slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(child.node)) {\n    const propPath = patch.path.slice(3), propEntry = propPath.at(0);\n    if (propEntry === void 0 || typeof propEntry == \"string\" && [\"_key\", \"_type\"].includes(propEntry))\n      return !1;\n    if (typeof propEntry == \"string\" && propEntry === \"text\")\n      return editor.apply({\n        type: \"remove_text\",\n        path: [block.index, child.index],\n        offset: 0,\n        text: child.node.text\n      }), !0;\n    const newNode = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.applyAll)(child.node, [{\n      ...patch,\n      path: propPath\n    }]), newKeys = Object.keys(newNode), removedProperties = Object.keys(child.node).filter((property) => !newKeys.includes(property));\n    return slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.unsetNodes(editor, removedProperties, {\n      at: [block.index, child.index]\n    }), !0;\n  }\n  if (!child) {\n    if (\"value\" in block.node) {\n      const newVal = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.applyAll)(block.node.value, [{\n        ...patch,\n        path: patch.path.slice(1)\n      }]);\n      return slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n        ...block.node,\n        value: newVal\n      }, {\n        at: [block.index]\n      }), !0;\n    }\n    return !1;\n  }\n  return !1;\n}\nfunction findBlock(children, path) {\n  let blockIndex = -1;\n  const block = children.find((node, index) => {\n    const isMatch = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.isKeyedSegment)(path[0]) ? node._key === path[0]._key : index === path[0];\n    return isMatch && (blockIndex = index), isMatch;\n  });\n  if (block)\n    return {\n      node: block,\n      index: blockIndex\n    };\n}\nfunction findBlockChild(block, path) {\n  const blockNode = block.node;\n  if (!slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(blockNode) || path[1] !== \"children\")\n    return;\n  let childIndex = -1;\n  const child = blockNode.children.find((node, index) => {\n    const isMatch = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.isKeyedSegment)(path[2]) ? node._key === path[2]._key : index === path[2];\n    return isMatch && (childIndex = index), isMatch;\n  });\n  if (child)\n    return {\n      node: child,\n      index: childIndex\n    };\n}\nfunction insertTextPatch(schema, children, operation, beforeValue) {\n  const block = (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)({\n    schema\n  }, children[operation.path[0]]) && children[operation.path[0]];\n  if (!block)\n    throw new Error(\"Could not find block\");\n  const textChild = (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)({\n    schema\n  }, block) && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isSpan)({\n    schema\n  }, block.children[operation.path[1]]) && block.children[operation.path[1]];\n  if (!textChild)\n    throw new Error(\"Could not find child\");\n  const path = [{\n    _key: block._key\n  }, \"children\", {\n    _key: textChild._key\n  }, \"text\"], prevBlock = beforeValue[operation.path[0]], prevChild = (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)({\n    schema\n  }, prevBlock) && prevBlock.children[operation.path[1]], prevText = (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isSpan)({\n    schema\n  }, prevChild) ? prevChild.text : \"\", patch = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.diffMatchPatch)(prevText, textChild.text, path);\n  return patch.value.length ? [patch] : [];\n}\nfunction removeTextPatch(schema, children, operation, beforeValue) {\n  const block = children[operation.path[0]];\n  if (!block)\n    throw new Error(\"Could not find block\");\n  const child = (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)({\n    schema\n  }, block) && block.children[operation.path[1]] || void 0, textChild = (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isSpan)({\n    schema\n  }, child) ? child : void 0;\n  if (child && !textChild)\n    throw new Error(\"Expected span\");\n  if (!textChild)\n    throw new Error(\"Could not find child\");\n  const path = [{\n    _key: block._key\n  }, \"children\", {\n    _key: textChild._key\n  }, \"text\"], beforeBlock = beforeValue[operation.path[0]], prevTextChild = (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)({\n    schema\n  }, beforeBlock) && beforeBlock.children[operation.path[1]], prevText = (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isSpan)({\n    schema\n  }, prevTextChild) && prevTextChild.text, patch = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.diffMatchPatch)(prevText || \"\", textChild.text, path);\n  return patch.value ? [patch] : [];\n}\nfunction setNodePatch(schema, children, operation) {\n  if (operation.path.length === 1) {\n    const block = children[operation.path[0]];\n    if (typeof block._key != \"string\")\n      throw new Error(\"Expected block to have a _key\");\n    const setNode = lodash_omitBy_js__WEBPACK_IMPORTED_MODULE_11__({\n      ...children[operation.path[0]],\n      ...operation.newProperties\n    }, lodash_isUndefined_js__WEBPACK_IMPORTED_MODULE_10__);\n    return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.set)(fromSlateValue([setNode], schema.block.name)[0], [{\n      _key: block._key\n    }])];\n  } else if (operation.path.length === 2) {\n    const block = children[operation.path[0]];\n    if ((0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)({\n      schema\n    }, block)) {\n      const child = block.children[operation.path[1]];\n      if (child) {\n        const blockKey = block._key, childKey = child._key, patches = [], keys = Object.keys(operation.newProperties);\n        return keys.forEach((keyName) => {\n          if (keys.length === 1 && keyName === \"_key\") {\n            const val = lodash_get_js__WEBPACK_IMPORTED_MODULE_9__(operation.newProperties, keyName);\n            patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.set)(val, [{\n              _key: blockKey\n            }, \"children\", block.children.indexOf(child), keyName]));\n          } else {\n            const val = lodash_get_js__WEBPACK_IMPORTED_MODULE_9__(operation.newProperties, keyName);\n            patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.set)(val, [{\n              _key: blockKey\n            }, \"children\", {\n              _key: childKey\n            }, keyName]));\n          }\n        }), patches;\n      }\n      throw new Error(\"Could not find a valid child\");\n    }\n    throw new Error(\"Could not find a valid block\");\n  } else\n    throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`);\n}\nfunction insertNodePatch(schema, children, operation, beforeValue) {\n  const block = beforeValue[operation.path[0]];\n  if (operation.path.length === 1) {\n    const position = operation.path[0] === 0 ? \"before\" : \"after\", beforeBlock = beforeValue[operation.path[0] - 1], targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key;\n    return targetKey ? [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.insert)([fromSlateValue([operation.node], schema.block.name)[0]], position, [{\n      _key: targetKey\n    }])] : [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.setIfMissing)(beforeValue, []), (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.insert)([fromSlateValue([operation.node], schema.block.name)[0]], \"before\", [operation.path[0]])];\n  } else if ((0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)({\n    schema\n  }, block) && operation.path.length === 2 && children[operation.path[0]]) {\n    const position = block.children.length === 0 || !block.children[operation.path[1] - 1] ? \"before\" : \"after\", node = {\n      ...operation.node\n    };\n    !node._type && slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(node) && (node._type = \"span\", node.marks = []);\n    const child = fromSlateValue([{\n      _key: \"bogus\",\n      _type: schema.block.name,\n      children: [node]\n    }], schema.block.name)[0].children[0];\n    return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.insert)([child], position, [{\n      _key: block._key\n    }, \"children\", block.children.length <= 1 || !block.children[operation.path[1] - 1] ? 0 : {\n      _key: block.children[operation.path[1] - 1]._key\n    }])];\n  }\n  return [];\n}\nfunction splitNodePatch(schema, children, operation, beforeValue) {\n  const patches = [], splitBlock = children[operation.path[0]];\n  if (!(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)({\n    schema\n  }, splitBlock))\n    throw new Error(`Block with path ${JSON.stringify(operation.path[0])} is not a text block and can't be split`);\n  if (operation.path.length === 1) {\n    const oldBlock = beforeValue[operation.path[0]];\n    if ((0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)({\n      schema\n    }, oldBlock)) {\n      const targetValue = fromSlateValue([children[operation.path[0] + 1]], schema.block.name)[0];\n      targetValue && (patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.insert)([targetValue], \"after\", [{\n        _key: splitBlock._key\n      }])), oldBlock.children.slice(operation.position).forEach((span) => {\n        const path = [{\n          _key: oldBlock._key\n        }, \"children\", {\n          _key: span._key\n        }];\n        patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.unset)(path));\n      }));\n    }\n    return patches;\n  }\n  if (operation.path.length === 2) {\n    const splitSpan = splitBlock.children[operation.path[1]];\n    if ((0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isSpan)({\n      schema\n    }, splitSpan)) {\n      const targetSpans = fromSlateValue([{\n        ...splitBlock,\n        children: splitBlock.children.slice(operation.path[1] + 1, operation.path[1] + 2)\n      }], schema.block.name)[0].children;\n      patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.insert)(targetSpans, \"after\", [{\n        _key: splitBlock._key\n      }, \"children\", {\n        _key: splitSpan._key\n      }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.set)(splitSpan.text, [{\n        _key: splitBlock._key\n      }, \"children\", {\n        _key: splitSpan._key\n      }, \"text\"]));\n    }\n    return patches;\n  }\n  return patches;\n}\nfunction removeNodePatch(schema, beforeValue, operation) {\n  const block = beforeValue[operation.path[0]];\n  if (operation.path.length === 1) {\n    if (block && block._key)\n      return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.unset)([{\n        _key: block._key\n      }])];\n    throw new Error(\"Block not found\");\n  } else if ((0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)({\n    schema\n  }, block) && operation.path.length === 2) {\n    const spanToRemove = block.children[operation.path[1]];\n    return spanToRemove ? block.children.filter((span) => span._key === operation.node._key).length > 1 ? (console.warn(`Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`, JSON.stringify(block, null, 2)), []) : [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.unset)([{\n      _key: block._key\n    }, \"children\", {\n      _key: spanToRemove._key\n    }])] : [];\n  } else\n    return [];\n}\nfunction mergeNodePatch(schema, children, operation, beforeValue) {\n  const patches = [], block = beforeValue[operation.path[0]], updatedBlock = children[operation.path[0]];\n  if (operation.path.length === 1)\n    if (block?._key) {\n      const newBlock = fromSlateValue([children[operation.path[0] - 1]], schema.block.name)[0];\n      patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.set)(newBlock, [{\n        _key: newBlock._key\n      }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.unset)([{\n        _key: block._key\n      }]));\n    } else\n      throw new Error(\"Target key not found!\");\n  else if ((0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)({\n    schema\n  }, block) && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)({\n    schema\n  }, updatedBlock) && operation.path.length === 2) {\n    const updatedSpan = updatedBlock.children[operation.path[1] - 1] && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isSpan)({\n      schema\n    }, updatedBlock.children[operation.path[1] - 1]) ? updatedBlock.children[operation.path[1] - 1] : void 0, removedSpan = block.children[operation.path[1]] && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isSpan)({\n      schema\n    }, block.children[operation.path[1]]) ? block.children[operation.path[1]] : void 0;\n    updatedSpan && (block.children.filter((span) => span._key === updatedSpan._key).length === 1 ? patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.set)(updatedSpan.text, [{\n      _key: block._key\n    }, \"children\", {\n      _key: updatedSpan._key\n    }, \"text\"])) : console.warn(`Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`, JSON.stringify(block, null, 2))), removedSpan && (block.children.filter((span) => span._key === removedSpan._key).length === 1 ? patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.unset)([{\n      _key: block._key\n    }, \"children\", {\n      _key: removedSpan._key\n    }])) : console.warn(`Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`, JSON.stringify(block, null, 2)));\n  }\n  return patches;\n}\nfunction moveNodePatch(schema, beforeValue, operation) {\n  const patches = [], block = beforeValue[operation.path[0]], targetBlock = beforeValue[operation.newPath[0]];\n  if (!targetBlock)\n    return patches;\n  if (operation.path.length === 1) {\n    const position = operation.path[0] > operation.newPath[0] ? \"before\" : \"after\";\n    patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.unset)([{\n      _key: block._key\n    }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.insert)([fromSlateValue([block], schema.block.name)[0]], position, [{\n      _key: targetBlock._key\n    }]));\n  } else if (operation.path.length === 2 && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)({\n    schema\n  }, block) && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)({\n    schema\n  }, targetBlock)) {\n    const child = block.children[operation.path[1]], targetChild = targetBlock.children[operation.newPath[1]], position = operation.newPath[1] === targetBlock.children.length ? \"after\" : \"before\", childToInsert = fromSlateValue([block], schema.block.name)[0].children[operation.path[1]];\n    patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.unset)([{\n      _key: block._key\n    }, \"children\", {\n      _key: child._key\n    }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.insert)([childToInsert], position, [{\n      _key: targetBlock._key\n    }, \"children\", {\n      _key: targetChild._key\n    }]));\n  }\n  return patches;\n}\nconst PATCHING = /* @__PURE__ */ new WeakMap();\nfunction withoutPatching(editor, fn) {\n  const prev = isPatching(editor);\n  PATCHING.set(editor, !1), fn(), PATCHING.set(editor, prev);\n}\nfunction isPatching(editor) {\n  return PATCHING.get(editor);\n}\nconst debug$a = debugWithName(\"plugin:withPatches\");\nfunction createWithPatches({\n  editorActor,\n  relayActor,\n  subscriptions\n}) {\n  let previousChildren;\n  const applyPatch = createApplyPatch(editorActor.getSnapshot().context.schema);\n  return function(editor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, !1), PATCHING.set(editor, !0), previousChildren = [...editor.children];\n    const {\n      apply: apply2\n    } = editor;\n    let bufferedPatches = [];\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0)\n        return;\n      const patches = bufferedPatches;\n      bufferedPatches = [];\n      let changed = !1;\n      withRemoteChanges(editor, () => {\n        slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              for (const patch of patches) {\n                debug$a.enabled && debug$a(`Handling remote patch ${JSON.stringify(patch)}`);\n                try {\n                  changed = applyPatch(editor, patch);\n                } catch (error) {\n                  console.error(`Applying patch ${JSON.stringify(patch)} failed due to: ${error.message}`);\n                }\n              }\n            });\n          });\n        }), changed && (editor.normalize(), editor.onChange());\n      });\n    }, handlePatches = ({\n      patches\n    }) => {\n      const remotePatches = patches.filter((p) => p.origin !== \"local\");\n      remotePatches.length !== 0 && (bufferedPatches = bufferedPatches.concat(remotePatches), handleBufferedRemotePatches());\n    };\n    return subscriptions.push(() => {\n      debug$a(\"Subscribing to remote patches\");\n      const sub = editorActor.on(\"patches\", handlePatches);\n      return () => {\n        debug$a(\"Unsubscribing to remote patches\"), sub.unsubscribe();\n      };\n    }), editor.apply = (operation) => {\n      let patches = [];\n      previousChildren = editor.children;\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, editorActor.getSnapshot().context.schema);\n      apply2(operation);\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, editorActor.getSnapshot().context.schema);\n      if (!isPatching(editor))\n        return editor;\n      switch (editorWasEmpty && !editorIsEmpty && operation.type !== \"set_selection\" && patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.insert)(previousChildren, \"before\", [0])), operation.type) {\n        case \"insert_text\":\n          patches = [...patches, ...insertTextPatch(editorActor.getSnapshot().context.schema, editor.children, operation, previousChildren)];\n          break;\n        case \"remove_text\":\n          patches = [...patches, ...removeTextPatch(editorActor.getSnapshot().context.schema, editor.children, operation, previousChildren)];\n          break;\n        case \"remove_node\":\n          patches = [...patches, ...removeNodePatch(editorActor.getSnapshot().context.schema, previousChildren, operation)];\n          break;\n        case \"split_node\":\n          patches = [...patches, ...splitNodePatch(editorActor.getSnapshot().context.schema, editor.children, operation, previousChildren)];\n          break;\n        case \"insert_node\":\n          patches = [...patches, ...insertNodePatch(editorActor.getSnapshot().context.schema, editor.children, operation, previousChildren)];\n          break;\n        case \"set_node\":\n          patches = [...patches, ...setNodePatch(editorActor.getSnapshot().context.schema, editor.children, operation)];\n          break;\n        case \"merge_node\":\n          patches = [...patches, ...mergeNodePatch(editorActor.getSnapshot().context.schema, editor.children, operation, previousChildren)];\n          break;\n        case \"move_node\":\n          patches = [...patches, ...moveNodePatch(editorActor.getSnapshot().context.schema, previousChildren, operation)];\n          break;\n      }\n      if (!editorWasEmpty && editorIsEmpty && [\"merge_node\", \"set_node\", \"remove_text\", \"remove_node\"].includes(operation.type) && (patches = [...patches, (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.unset)([])], relayActor.send({\n        type: \"unset\",\n        previousValue: fromSlateValue(previousChildren, editorActor.getSnapshot().context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor))\n      })), editorWasEmpty && patches.length > 0 && (patches = [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.setIfMissing)([], []), ...patches]), patches.length > 0)\n        for (const patch of patches)\n          editorActor.send({\n            type: \"internal.patch\",\n            patch: {\n              ...patch,\n              origin: \"local\"\n            },\n            operationId: getCurrentUndoStepId(editor),\n            value: editor.value\n          });\n      return editor;\n    }, editor;\n  };\n}\nconst debug$9 = debugWithName(\"plugin:withPlaceholderBlock\");\nfunction createWithPlaceholderBlock(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(op);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      if (op.type === \"remove_node\") {\n        const blockIndex = op.path.at(0), isLonelyBlock = op.path.length === 1 && blockIndex === 0 && editor.children.length === 1, isBlockObject = op.node._type !== editorActor.getSnapshot().context.schema.block.name;\n        isLonelyBlock && isBlockObject && (debug$9(\"Adding placeholder block\"), slate__WEBPACK_IMPORTED_MODULE_14__.Editor.insertNode(editor, editor.pteCreateTextBlock({\n          decorators: []\n        })));\n      }\n      apply2(op);\n    }, editor;\n  };\n}\nconst debug$8 = debugWithName(\"plugin:withSchemaTypes\");\nfunction createWithSchemaTypes({\n  editorActor\n}) {\n  return function(editor) {\n    editor.isTextBlock = (value) => slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(value) ? !1 : (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(editorActor.getSnapshot().context, value), editor.isTextSpan = (value) => slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(value) ? !1 : (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isSpan)(editorActor.getSnapshot().context, value), editor.isListBlock = (value) => slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(value) ? !1 : (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(editorActor.getSnapshot().context, value), editor.isVoid = (element) => slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(element) ? !1 : editorActor.getSnapshot().context.schema.block.name !== element._type && (editorActor.getSnapshot().context.schema.blockObjects.map((obj) => obj.name).includes(element._type) || editorActor.getSnapshot().context.schema.inlineObjects.map((obj) => obj.name).includes(element._type)), editor.isInline = (element) => slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(element) ? !1 : editorActor.getSnapshot().context.schema.inlineObjects.map((obj) => obj.name).includes(element._type) && \"__inline\" in element && element.__inline === !0;\n    const {\n      normalizeNode\n    } = editor;\n    return editor.normalizeNode = (entry) => {\n      const [node, path] = entry;\n      if (node._type === void 0 && path.length === 2) {\n        debug$8(\"Setting span type on text node without a type\");\n        const span = node, key = span._key || editorActor.getSnapshot().context.keyGenerator();\n        editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          ...span,\n          _type: editorActor.getSnapshot().context.schema.span.name,\n          _key: key\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (node._key === void 0 && (path.length === 1 || path.length === 2)) {\n        debug$8(\"Setting missing key on child node without a key\");\n        const key = editorActor.getSnapshot().context.keyGenerator();\n        editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          _key: key\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      normalizeNode(entry);\n    }, editor;\n  };\n}\nfunction createWithUtils({\n  editorActor\n}) {\n  return function(editor) {\n    return editor.pteCreateTextBlock = (options) => toSlateValue([{\n      _type: editorActor.getSnapshot().context.schema.block.name,\n      _key: editorActor.getSnapshot().context.keyGenerator(),\n      style: editorActor.getSnapshot().context.schema.styles[0].name || \"normal\",\n      ...options.listItem ? {\n        listItem: options.listItem\n      } : {},\n      ...options.level ? {\n        level: options.level\n      } : {},\n      markDefs: [],\n      children: [{\n        _type: \"span\",\n        _key: editorActor.getSnapshot().context.keyGenerator(),\n        text: \"\",\n        marks: options.decorators.filter((decorator) => editorActor.getSnapshot().context.schema.decorators.find(({\n          name\n        }) => name === decorator))\n      }]\n    }], {\n      schemaTypes: editorActor.getSnapshot().context.schema\n    })[0], editor;\n  };\n}\nfunction pluginUpdateSelection({\n  editor,\n  editorActor\n}) {\n  const updateSelection = () => {\n    if (editor.selection) {\n      const existingSelection = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);\n      if (existingSelection)\n        editorActor.send({\n          type: \"update selection\",\n          selection: existingSelection\n        });\n      else {\n        const selection = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection\n        });\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, selection), editorActor.send({\n          type: \"update selection\",\n          selection\n        });\n      }\n    } else\n      editorActor.send({\n        type: \"update selection\",\n        selection: null\n      });\n  }, {\n    onChange\n  } = editor;\n  return editor.onChange = () => {\n    onChange(), editorActor.getSnapshot().matches({\n      setup: \"setting up\"\n    }) || updateSelection();\n  }, editor;\n}\nfunction isEditorNode(node) {\n  return typeof node == \"object\" && node !== null ? !(\"_type\" in node) && \"children\" in node && Array.isArray(node.children) : !1;\n}\nfunction isTextBlockNode(context, node) {\n  return (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.isTypedObject)(node) && node._type === context.schema.block.name;\n}\nfunction isSpanNode(context, node) {\n  return typeof node != \"object\" || node === null || \"children\" in node ? !1 : \"_type\" in node ? node._type === context.schema.span.name : \"text\" in node;\n}\nfunction isPartialSpanNode(node) {\n  return typeof node == \"object\" && node !== null && \"text\" in node && typeof node.text == \"string\";\n}\nfunction isObjectNode(context, node) {\n  return !isEditorNode(node) && !isTextBlockNode(context, node) && !isSpanNode(context, node) && !isPartialSpanNode(node);\n}\nfunction getBlock(root, path) {\n  const index = path.at(0);\n  if (!(index === void 0 || path.length !== 1))\n    return root.children.at(index);\n}\nfunction getNode(context, root, path) {\n  if (path.length === 0)\n    return root;\n  if (path.length === 1)\n    return getBlock(root, path);\n  if (path.length === 2) {\n    const block = getBlock(root, path.slice(0, 1));\n    return !block || !isTextBlockNode(context, block) ? void 0 : block.children.at(path[1]) || void 0;\n  }\n}\nfunction getSpan(context, root, path) {\n  const node = getNode(context, root, path);\n  if (node && isSpanNode(context, node))\n    return node;\n}\nfunction getParent(context, root, path) {\n  if (path.length === 0)\n    return;\n  const parentPath = path.slice(0, -1);\n  if (parentPath.length === 0)\n    return root;\n  const blockIndex = parentPath.at(0);\n  if (blockIndex === void 0 || parentPath.length !== 1)\n    return;\n  const block = root.children.at(blockIndex);\n  if (block && isTextBlockNode(context, block))\n    return block;\n}\nfunction applyOperationToPortableText(context, value, operation) {\n  const draft = (0,immer__WEBPACK_IMPORTED_MODULE_34__.createDraft)({\n    children: value\n  });\n  try {\n    applyOperationToPortableTextDraft(context, draft, operation);\n  } catch (e) {\n    console.error(e);\n  }\n  return (0,immer__WEBPACK_IMPORTED_MODULE_34__.finishDraft)(draft).children;\n}\nfunction applyOperationToPortableTextDraft(context, root, operation) {\n  switch (operation.type) {\n    case \"insert_node\": {\n      const {\n        path,\n        node: insertedNode\n      } = operation, parent = getParent(context, root, path), index = path[path.length - 1];\n      if (!parent || index > parent.children.length)\n        break;\n      if (path.length === 1) {\n        if (isTextBlockNode(context, insertedNode)) {\n          parent.children.splice(index, 0, {\n            ...insertedNode,\n            children: insertedNode.children.map((child) => \"__inline\" in child ? {\n              _key: child._key,\n              _type: child._type,\n              ...\"value\" in child && typeof child.value == \"object\" ? child.value : {}\n            } : child)\n          });\n          break;\n        }\n        if (slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(insertedNode) && !(\"__inline\" in insertedNode)) {\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...\"value\" in insertedNode && typeof insertedNode.value == \"object\" ? insertedNode.value : {}\n          });\n          break;\n        }\n      }\n      if (path.length === 2) {\n        if (!isTextBlockNode(context, parent))\n          break;\n        if (isPartialSpanNode(insertedNode)) {\n          parent.children.splice(index, 0, insertedNode);\n          break;\n        }\n        if (\"__inline\" in insertedNode) {\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...\"value\" in insertedNode && typeof insertedNode.value == \"object\" ? insertedNode.value : {}\n          });\n          break;\n        }\n      }\n      break;\n    }\n    case \"insert_text\": {\n      const {\n        path,\n        offset,\n        text\n      } = operation;\n      if (text.length === 0) break;\n      const span = getSpan(context, root, path);\n      if (!span)\n        break;\n      const before = span.text.slice(0, offset), after = span.text.slice(offset);\n      span.text = before + text + after;\n      break;\n    }\n    case \"merge_node\": {\n      const {\n        path\n      } = operation, node = getNode(context, root, path), prevPath = slate__WEBPACK_IMPORTED_MODULE_14__.Path.previous(path), prev = getNode(context, root, prevPath), parent = getParent(context, root, path);\n      if (!node || !prev || !parent)\n        break;\n      const index = path[path.length - 1];\n      if (isPartialSpanNode(node) && isPartialSpanNode(prev))\n        prev.text += node.text;\n      else if (isTextBlockNode(context, node) && isTextBlockNode(context, prev))\n        prev.children.push(...node.children);\n      else\n        break;\n      parent.children.splice(index, 1);\n      break;\n    }\n    case \"move_node\": {\n      const {\n        path,\n        newPath\n      } = operation;\n      if (slate__WEBPACK_IMPORTED_MODULE_14__.Path.isAncestor(path, newPath))\n        break;\n      const node = getNode(context, root, path), parent = getParent(context, root, path), index = path[path.length - 1];\n      if (!node || !parent)\n        break;\n      parent.children.splice(index, 1);\n      const truePath = slate__WEBPACK_IMPORTED_MODULE_14__.Path.transform(path, operation), newParent = getNode(context, root, slate__WEBPACK_IMPORTED_MODULE_14__.Path.parent(truePath)), newIndex = truePath[truePath.length - 1];\n      if (!newParent || !(\"children\" in newParent) || !Array.isArray(newParent.children))\n        break;\n      newParent.children.splice(newIndex, 0, node);\n      break;\n    }\n    case \"remove_node\": {\n      const {\n        path\n      } = operation, index = path[path.length - 1];\n      getParent(context, root, path)?.children.splice(index, 1);\n      break;\n    }\n    case \"remove_text\": {\n      const {\n        path,\n        offset,\n        text\n      } = operation;\n      if (text.length === 0)\n        break;\n      const span = getSpan(context, root, path);\n      if (!span)\n        break;\n      const before = span.text.slice(0, offset), after = span.text.slice(offset + text.length);\n      span.text = before + after;\n      break;\n    }\n    case \"set_node\": {\n      const {\n        path,\n        properties,\n        newProperties\n      } = operation, node = getNode(context, root, path);\n      if (!node || isEditorNode(node))\n        break;\n      if (isObjectNode(context, node)) {\n        const valueBefore = \"value\" in properties && typeof properties.value == \"object\" ? properties.value : {}, valueAfter = \"value\" in newProperties && typeof newProperties.value == \"object\" ? newProperties.value : {};\n        for (const key in newProperties) {\n          if (key === \"value\")\n            continue;\n          const value = newProperties[key];\n          value == null ? delete node[key] : node[key] = value;\n        }\n        for (const key in properties)\n          key !== \"value\" && (newProperties.hasOwnProperty(key) || delete node[key]);\n        for (const key in valueAfter) {\n          const value = valueAfter[key];\n          value == null ? delete node[key] : node[key] = value;\n        }\n        for (const key in valueBefore)\n          valueAfter.hasOwnProperty(key) || delete node[key];\n        break;\n      }\n      if (isTextBlockNode(context, node)) {\n        for (const key in newProperties) {\n          if (key === \"children\" || key === \"text\")\n            break;\n          const value = newProperties[key];\n          value == null ? delete node[key] : node[key] = value;\n        }\n        for (const key in properties)\n          newProperties.hasOwnProperty(key) || delete node[key];\n        break;\n      }\n      if (isPartialSpanNode(node)) {\n        for (const key in newProperties) {\n          if (key === \"text\")\n            break;\n          const value = newProperties[key];\n          value == null ? delete node[key] : node[key] = value;\n        }\n        for (const key in properties)\n          newProperties.hasOwnProperty(key) || delete node[key];\n        break;\n      }\n      break;\n    }\n    case \"split_node\": {\n      const {\n        path,\n        position,\n        properties\n      } = operation;\n      if (path.length === 0)\n        break;\n      const parent = getParent(context, root, path), index = path[path.length - 1];\n      if (!parent)\n        break;\n      if (isEditorNode(parent)) {\n        const block = getBlock(root, path);\n        if (!block || !isTextBlockNode(context, block))\n          break;\n        const before = block.children.slice(0, position), after = block.children.slice(position);\n        block.children = before;\n        const newTextBlockNode = {\n          ...properties,\n          children: after,\n          _type: context.schema.block.name\n        };\n        parent.children.splice(index + 1, 0, newTextBlockNode);\n        break;\n      }\n      if (isTextBlockNode(context, parent)) {\n        const node = getNode(context, root, path);\n        if (!node || !isSpanNode(context, node))\n          break;\n        const before = node.text.slice(0, position), after = node.text.slice(position);\n        node.text = before;\n        const newSpanNode = {\n          ...properties,\n          text: after\n        };\n        parent.children.splice(index + 1, 0, newSpanNode);\n      }\n      break;\n    }\n  }\n  return root;\n}\nfunction pluginUpdateValue(context, editor) {\n  const {\n    apply: apply2\n  } = editor;\n  return editor.apply = (operation) => {\n    if (operation.type === \"set_selection\") {\n      apply2(operation);\n      return;\n    }\n    if (editor.value = applyOperationToPortableText(context, editor.value, operation), operation.type === \"insert_text\" || operation.type === \"remove_text\") {\n      apply2(operation);\n      return;\n    }\n    buildIndexMaps({\n      schema: context.schema,\n      value: editor.value\n    }, {\n      blockIndexMap: editor.blockIndexMap,\n      listIndexMap: editor.listIndexMap\n    }), apply2(operation);\n  }, editor;\n}\nconst withPlugins = (editor, options) => {\n  const e = editor, {\n    editorActor,\n    relayActor\n  } = options, withObjectKeys = createWithObjectKeys(editorActor), withSchemaTypes = createWithSchemaTypes({\n    editorActor\n  }), withPatches = createWithPatches({\n    editorActor,\n    relayActor,\n    subscriptions: options.subscriptions\n  }), withMaxBlocks = createWithMaxBlocks(editorActor), withUndoRedo = createWithUndoRedo({\n    editorActor,\n    subscriptions: options.subscriptions\n  }), withPortableTextMarkModel = createWithPortableTextMarkModel(editorActor), withPlaceholderBlock = createWithPlaceholderBlock(editorActor), withUtils = createWithUtils({\n    editorActor\n  });\n  return createWithEventListeners(editorActor)(withSchemaTypes(withObjectKeys(withPortableTextMarkModel(withPlaceholderBlock(withUtils(withMaxBlocks(withUndoRedo(withPatches(pluginUpdateValue(editorActor.getSnapshot().context, pluginUpdateSelection({\n    editorActor,\n    editor: e\n  })))))))))));\n}, debug$7 = debugWithName(\"setup\");\nfunction createSlateEditor(config) {\n  debug$7(\"Creating new Slate editor instance\");\n  const instance = withPlugins((0,slate_react__WEBPACK_IMPORTED_MODULE_22__.withReact)((0,slate__WEBPACK_IMPORTED_MODULE_14__.createEditor)()), {\n    editorActor: config.editorActor,\n    relayActor: config.relayActor,\n    subscriptions: config.subscriptions\n  });\n  KEY_TO_VALUE_ELEMENT.set(instance, {}), KEY_TO_SLATE_ELEMENT.set(instance, {}), instance.decoratedRanges = [], instance.decoratorState = {};\n  const placeholderBlock = createPlaceholderBlock(config.editorActor.getSnapshot().context);\n  instance.value = [placeholderBlock], instance.blockIndexMap = /* @__PURE__ */ new Map(), instance.listIndexMap = /* @__PURE__ */ new Map(), buildIndexMaps({\n    schema: config.editorActor.getSnapshot().context.schema,\n    value: instance.value\n  }, {\n    blockIndexMap: instance.blockIndexMap,\n    listIndexMap: instance.listIndexMap\n  });\n  const initialValue = toSlateValue(instance.value, {\n    schemaTypes: config.editorActor.getSnapshot().context.schema\n  });\n  return {\n    instance,\n    initialValue\n  };\n}\nfunction createEditorDom(sendBack, slateEditor) {\n  return {\n    getBlockNodes: (snapshot) => getBlockNodes(slateEditor, snapshot),\n    getChildNodes: (snapshot) => getChildNodes(slateEditor, snapshot),\n    setDragGhost: ({\n      event,\n      ghost\n    }) => setDragGhost({\n      sendBack,\n      event,\n      ghost\n    })\n  };\n}\nfunction getBlockNodes(slateEditor, snapshot) {\n  if (!snapshot.context.selection)\n    return [];\n  const range = toSlateRange(snapshot);\n  if (!range)\n    return [];\n  try {\n    return Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(slateEditor, {\n      at: range,\n      mode: \"highest\",\n      match: (n) => !slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(n)\n    })).map(([blockNode]) => slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.toDOMNode(slateEditor, blockNode));\n  } catch {\n    return [];\n  }\n}\nfunction getChildNodes(slateEditor, snapshot) {\n  if (!snapshot.context.selection)\n    return [];\n  const range = toSlateRange(snapshot);\n  if (!range)\n    return [];\n  try {\n    return Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(slateEditor, {\n      at: range,\n      mode: \"lowest\",\n      match: (n) => !slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(n)\n    })).map(([childNode]) => slate_dom__WEBPACK_IMPORTED_MODULE_17__.DOMEditor.toDOMNode(slateEditor, childNode));\n  } catch {\n    return [];\n  }\n}\nfunction setDragGhost({\n  sendBack,\n  event,\n  ghost\n}) {\n  event.originEvent.dataTransfer.setDragImage(ghost.element, ghost.x, ghost.y), sendBack({\n    type: \"set drag ghost\",\n    ghost: ghost.element\n  });\n}\nconst addAnnotationOnCollapsedSelection = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"annotation.add\",\n  guard: ({\n    snapshot\n  }) => {\n    if (!(0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const caretWordSelection = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getCaretWordSelection)(snapshot);\n    return !caretWordSelection || !(0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionExpanded)({\n      context: {\n        ...snapshot.context,\n        selection: caretWordSelection\n      }\n    }) ? !1 : {\n      caretWordSelection\n    };\n  },\n  actions: [({\n    event\n  }, {\n    caretWordSelection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: caretWordSelection\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"annotation.add\",\n    annotation: event.annotation\n  })]]\n}), preventOverlappingAnnotations = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  // Given an `annotation.add` event\n  on: \"annotation.add\",\n  // When the annotation is active in the selection\n  guard: ({\n    snapshot,\n    event\n  }) => (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isActiveAnnotation)(event.annotation.name, {\n    mode: \"partial\"\n  })(snapshot),\n  // Then the existing annotation is removed\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"annotation.remove\",\n    annotation: event.annotation\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)(event)]]\n}), coreAnnotationBehaviors = [addAnnotationOnCollapsedSelection, preventOverlappingAnnotations], defaultKeyboardShortcuts = {\n  arrowDown: (0,_portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_35__.createKeyboardShortcut)({\n    default: [{\n      key: \"ArrowDown\",\n      alt: !1,\n      ctrl: !1,\n      meta: !1,\n      shift: !1\n    }]\n  }),\n  arrowUp: (0,_portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_35__.createKeyboardShortcut)({\n    default: [{\n      key: \"ArrowUp\",\n      alt: !1,\n      ctrl: !1,\n      meta: !1,\n      shift: !1\n    }]\n  }),\n  backspace: (0,_portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_35__.createKeyboardShortcut)({\n    default: [{\n      key: \"Backspace\",\n      alt: !1,\n      ctrl: !1,\n      meta: !1,\n      shift: !1\n    }]\n  }),\n  break: (0,_portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_35__.createKeyboardShortcut)({\n    default: [{\n      key: \"Enter\",\n      shift: !1\n    }]\n  }),\n  lineBreak: (0,_portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_35__.createKeyboardShortcut)({\n    default: [{\n      key: \"Enter\",\n      shift: !0\n    }]\n  }),\n  decorators: {\n    strong: _portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_35__.bold,\n    em: _portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_35__.italic,\n    underline: _portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_35__.underline,\n    code: _portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_35__.code\n  },\n  delete: (0,_portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_35__.createKeyboardShortcut)({\n    default: [{\n      key: \"Delete\",\n      alt: !1,\n      ctrl: !1,\n      meta: !1,\n      shift: !1\n    }]\n  }),\n  history: {\n    undo: _portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_35__.undo,\n    redo: _portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_35__.redo\n  },\n  tab: (0,_portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_35__.createKeyboardShortcut)({\n    default: [{\n      key: \"Tab\",\n      alt: !1,\n      ctrl: !1,\n      meta: !1,\n      shift: !1\n    }]\n  }),\n  shiftTab: (0,_portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_35__.createKeyboardShortcut)({\n    default: [{\n      key: \"Tab\",\n      alt: !1,\n      ctrl: !1,\n      meta: !1,\n      shift: !0\n    }]\n  })\n}, arrowDownOnLonelyBlockObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"keyboard.keydown\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (!defaultKeyboardShortcuts.arrowDown.guard(event.originEvent) || !(0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const focusBlockObject = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getFocusBlockObject)(snapshot), nextBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getNextBlock)(snapshot);\n    return focusBlockObject && !nextBlock;\n  },\n  actions: [({\n    snapshot\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name\n    },\n    placement: \"after\"\n  })]]\n}), arrowUpOnLonelyBlockObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"keyboard.keydown\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (!defaultKeyboardShortcuts.arrowUp.guard(event.originEvent) || !(0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const focusBlockObject = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getFocusBlockObject)(snapshot), previousBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getPreviousBlock)(snapshot);\n    return focusBlockObject && !previousBlock;\n  },\n  actions: [({\n    snapshot\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name\n    },\n    placement: \"before\"\n  })]]\n}), breakingBlockObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusBlockObject = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getFocusBlockObject)(snapshot);\n    return (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionCollapsed)(snapshot) && focusBlockObject !== void 0;\n  },\n  actions: [({\n    snapshot\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name\n    },\n    placement: \"after\"\n  })]]\n}), clickingAboveLonelyBlockObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"mouse.click\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (snapshot.context.readOnly || snapshot.context.selection && !(0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const focusBlockObject = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getFocusBlockObject)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection\n      }\n    }), previousBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getPreviousBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection\n      }\n    });\n    return event.position.isEditor && event.position.block === \"start\" && focusBlockObject && !previousBlock;\n  },\n  actions: [({\n    snapshot,\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: event.position.selection\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name\n    },\n    placement: \"before\",\n    select: \"start\"\n  })]]\n}), clickingBelowLonelyBlockObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"mouse.click\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (snapshot.context.readOnly || snapshot.context.selection && !(0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const focusBlockObject = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getFocusBlockObject)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection\n      }\n    }), nextBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getNextBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection\n      }\n    });\n    return event.position.isEditor && event.position.block === \"end\" && focusBlockObject && !nextBlock;\n  },\n  actions: [({\n    snapshot,\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: event.position.selection\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name\n    },\n    placement: \"after\",\n    select: \"start\"\n  })]]\n}), deletingEmptyTextBlockAfterBlockObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete.backward\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusTextBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusTextBlock)(snapshot), selectionCollapsed = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionCollapsed)(snapshot), previousBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getPreviousBlock)(snapshot);\n    return !focusTextBlock || !selectionCollapsed || !previousBlock ? !1 : (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isEmptyTextBlock)(snapshot.context, focusTextBlock.node) && !(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(snapshot.context, previousBlock.node) ? {\n      focusTextBlock,\n      previousBlock\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    previousBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete.block\",\n    at: focusTextBlock.path\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: {\n      anchor: {\n        path: previousBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: previousBlock.path,\n        offset: 0\n      }\n    }\n  })]]\n}), deletingEmptyTextBlockBeforeBlockObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete.forward\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusTextBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusTextBlock)(snapshot), selectionCollapsed = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionCollapsed)(snapshot), nextBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getNextBlock)(snapshot);\n    return !focusTextBlock || !selectionCollapsed || !nextBlock ? !1 : (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isEmptyTextBlock)(snapshot.context, focusTextBlock.node) && !(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(snapshot.context, nextBlock.node) ? {\n      focusTextBlock,\n      nextBlock\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    nextBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete.block\",\n    at: focusTextBlock.path\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: {\n      anchor: {\n        path: nextBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: nextBlock.path,\n        offset: 0\n      }\n    }\n  })]]\n}), coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  clickingAboveLonelyBlockObject,\n  clickingBelowLonelyBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject\n}, coreDecoratorBehaviors = {\n  strongShortcut: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => defaultKeyboardShortcuts.decorators.strong.guard(event.originEvent) && snapshot.context.schema.decorators.some((decorator) => decorator.name === \"strong\"),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"decorator.toggle\",\n      decorator: \"strong\"\n    })]]\n  }),\n  emShortcut: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => defaultKeyboardShortcuts.decorators.em.guard(event.originEvent) && snapshot.context.schema.decorators.some((decorator) => decorator.name === \"em\"),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"decorator.toggle\",\n      decorator: \"em\"\n    })]]\n  }),\n  underlineShortcut: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => defaultKeyboardShortcuts.decorators.underline.guard(event.originEvent) && snapshot.context.schema.decorators.some((decorator) => decorator.name === \"underline\"),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"decorator.toggle\",\n      decorator: \"underline\"\n    })]]\n  }),\n  codeShortcut: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => defaultKeyboardShortcuts.decorators.code.guard(event.originEvent) && snapshot.context.schema.decorators.some((decorator) => decorator.name === \"code\"),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"decorator.toggle\",\n      decorator: \"code\"\n    })]]\n  })\n};\nfunction getCompoundClientRect(nodes) {\n  if (nodes.length === 0)\n    return new DOMRect(0, 0, 0, 0);\n  const elements = nodes.filter((node) => node instanceof Element), firstRect = elements.at(0)?.getBoundingClientRect();\n  if (!firstRect)\n    return new DOMRect(0, 0, 0, 0);\n  let left = firstRect.left, top = firstRect.top, right = firstRect.right, bottom = firstRect.bottom;\n  for (let i = 1; i < elements.length; i++) {\n    const rect = elements[i].getBoundingClientRect();\n    left = Math.min(left, rect.left), top = Math.min(top, rect.top), right = Math.max(right, rect.right), bottom = Math.max(bottom, rect.bottom);\n  }\n  return new DOMRect(left, top, right - left, bottom - top);\n}\nconst coreDndBehaviors = [\n  /**\n   * Core Behavior that:\n   * 1. Calculates and selects a \"drag selection\"\n   * 2. Constructs and sets a drag ghost element\n   * 3. Forwards the dragstart event\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"drag.dragstart\",\n    guard: ({\n      snapshot,\n      dom,\n      event\n    }) => {\n      const dragSelection = getDragSelection({\n        snapshot,\n        eventSelection: event.position.selection\n      }), selectingEntireBlocks = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isSelectingEntireBlocks)({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection\n        }\n      }), draggedDomNodes = {\n        blockNodes: dom.getBlockNodes({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection\n          }\n        }),\n        childNodes: dom.getChildNodes({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection\n          }\n        })\n      };\n      return {\n        dragSelection,\n        draggedDomNodes,\n        selectingEntireBlocks\n      };\n    },\n    actions: [({\n      dom,\n      event\n    }, {\n      dragSelection,\n      draggedDomNodes,\n      selectingEntireBlocks\n    }) => {\n      const dragGhost = document.createElement(\"div\");\n      if (selectingEntireBlocks) {\n        const clonedBlockNodes = draggedDomNodes.blockNodes.map((node) => node.cloneNode(!0));\n        for (const block of clonedBlockNodes)\n          block instanceof HTMLElement && (block.style.position = \"relative\"), dragGhost.appendChild(block);\n        const customGhost = dragGhost.querySelector(\"[data-pt-drag-ghost-element]\");\n        if (customGhost && dragGhost.replaceChildren(customGhost), dragGhost.setAttribute(\"data-dragged\", \"\"), dragGhost.style.position = \"absolute\", dragGhost.style.left = \"-99999px\", dragGhost.style.boxSizing = \"border-box\", document.body.appendChild(dragGhost), customGhost) {\n          const customGhostRect = customGhost.getBoundingClientRect(), x = event.originEvent.clientX - customGhostRect.left, y = event.originEvent.clientY - customGhostRect.top;\n          return dragGhost.style.width = `${customGhostRect.width}px`, dragGhost.style.height = `${customGhostRect.height}px`, [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n            type: \"select\",\n            at: dragSelection\n          }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.effect)(() => {\n            dom.setDragGhost({\n              event,\n              ghost: {\n                element: dragGhost,\n                x,\n                y\n              }\n            });\n          }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.forward)(event)];\n        } else {\n          const blocksDomRect = getCompoundClientRect(draggedDomNodes.blockNodes), x = event.originEvent.clientX - blocksDomRect.left, y = event.originEvent.clientY - blocksDomRect.top;\n          return dragGhost.style.width = `${blocksDomRect.width}px`, dragGhost.style.height = `${blocksDomRect.height}px`, [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n            type: \"select\",\n            at: dragSelection\n          }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.effect)(() => {\n            dom.setDragGhost({\n              event,\n              ghost: {\n                element: dragGhost,\n                x,\n                y\n              }\n            });\n          }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.forward)(event)];\n        }\n      } else {\n        const clonedChildNodes = draggedDomNodes.childNodes.map((node) => node.cloneNode(!0));\n        for (const child of clonedChildNodes)\n          dragGhost.appendChild(child);\n        dragGhost.style.position = \"absolute\", dragGhost.style.left = \"-99999px\", dragGhost.style.boxSizing = \"border-box\", document.body.appendChild(dragGhost);\n        const childrenDomRect = getCompoundClientRect(draggedDomNodes.childNodes), x = event.originEvent.clientX - childrenDomRect.left, y = event.originEvent.clientY - childrenDomRect.top;\n        return dragGhost.style.width = `${childrenDomRect.width}px`, dragGhost.style.height = `${childrenDomRect.height}px`, [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n          type: \"select\",\n          at: dragSelection\n        }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.effect)(() => {\n          dom.setDragGhost({\n            event,\n            ghost: {\n              element: dragGhost,\n              x,\n              y\n            }\n          });\n        }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.forward)(event)];\n      }\n    }]\n  }),\n  /**\n   * When dragging over the drag origin, we don't want to show the caret in the\n   * text.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"drag.dragover\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      const dragOrigin = event.dragOrigin;\n      return dragOrigin ? (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isOverlappingSelection)(event.position.selection)({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection\n        }\n      }) : !1;\n    },\n    actions: []\n  }),\n  /**\n   * If the drop position overlaps the drag origin, then the event should be\n   * cancelled.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"drag.drop\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      const dragOrigin = event.dragOrigin, dropPosition = event.position.selection;\n      return dragOrigin ? (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isOverlappingSelection)(dropPosition)({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection\n        }\n      }) : !1;\n    },\n    actions: []\n  }),\n  /**\n   * If we drop and have access to a drag origin, then we can deserialize\n   * without creating a new selection.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"drag.drop\",\n    guard: ({\n      event\n    }) => event.dragOrigin !== void 0,\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"deserialize\",\n      originEvent: event\n    })]]\n  }),\n  /**\n   * Otherwise, we should to create a new selection.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"drag.drop\",\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"select\",\n      at: event.position.selection\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"deserialize\",\n      originEvent: event\n    })]]\n  }),\n  /**\n   * Core Behavior that uses the drag origin to mimic a move operation during\n   * internal dragging.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"deserialization.success\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (event.originEvent.type !== \"drag.drop\" || event.originEvent.dragOrigin === void 0)\n        return !1;\n      const dragOrigin = event.originEvent.dragOrigin, dragSelection = getDragSelection({\n        eventSelection: dragOrigin.selection,\n        snapshot\n      }), dropPosition = event.originEvent.position.selection, droppingOnDragOrigin = dragOrigin ? (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isOverlappingSelection)(dropPosition)({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection\n        }\n      }) : !1, draggingEntireBlocks = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isSelectingEntireBlocks)({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection\n        }\n      }), draggedBlocks = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getSelectedBlocks)({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection\n        }\n      });\n      return droppingOnDragOrigin ? !1 : {\n        dropPosition,\n        draggingEntireBlocks,\n        draggedBlocks,\n        dragOrigin,\n        originEvent: event.originEvent\n      };\n    },\n    actions: [({\n      event\n    }, {\n      draggingEntireBlocks,\n      draggedBlocks,\n      dragOrigin,\n      dropPosition,\n      originEvent\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"select\",\n      at: dropPosition\n    }), ...draggingEntireBlocks ? draggedBlocks.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete.block\",\n      at: block.path\n    })) : [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete\",\n      at: dragOrigin.selection\n    })], (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"insert.blocks\",\n      blocks: event.data,\n      placement: draggingEntireBlocks ? originEvent.position.block === \"start\" ? \"before\" : originEvent.position.block === \"end\" ? \"after\" : \"auto\" : \"auto\"\n    })]]\n  })\n], coreInsertBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.text\",\n  guard: ({\n    snapshot\n  }) => {\n    if (!(0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusSpan)(snapshot))\n      return !1;\n    const markState = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getMarkState)(snapshot), activeDecorators = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getActiveDecorators)(snapshot), activeAnnotations = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getActiveAnnotationsMarks)(snapshot);\n    if (markState && markState.state === \"unchanged\") {\n      const markStateDecorators = (markState.marks ?? []).filter((mark) => snapshot.context.schema.decorators.map((decorator) => decorator.name).includes(mark));\n      if (markStateDecorators.length === activeDecorators.length && markStateDecorators.every((mark) => activeDecorators.includes(mark)))\n        return !1;\n    }\n    return {\n      activeDecorators,\n      activeAnnotations\n    };\n  },\n  actions: [({\n    snapshot,\n    event\n  }, {\n    activeDecorators,\n    activeAnnotations\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.child\",\n    child: {\n      _type: snapshot.context.schema.span.name,\n      text: event.text,\n      marks: [...activeDecorators, ...activeAnnotations]\n    }\n  })]]\n})], breakingAtTheEndOfTextBlock = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusTextBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusTextBlock)(snapshot), selectionCollapsed = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionCollapsed)(snapshot);\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed)\n      return !1;\n    const atTheEndOfBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isAtTheEndOfBlock)(focusTextBlock)(snapshot), focusListItem = focusTextBlock.node.listItem, focusLevel = focusTextBlock.node.level;\n    return atTheEndOfBlock ? {\n      focusListItem,\n      focusLevel\n    } : !1;\n  },\n  actions: [({\n    snapshot\n  }, {\n    focusListItem,\n    focusLevel\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name,\n      children: [{\n        _type: snapshot.context.schema.span.name,\n        text: \"\",\n        marks: []\n      }],\n      markDefs: [],\n      listItem: focusListItem,\n      level: focusLevel,\n      style: snapshot.context.schema.styles[0]?.name\n    },\n    placement: \"after\"\n  })]]\n}), breakingAtTheStartOfTextBlock = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusTextBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusTextBlock)(snapshot), selectionCollapsed = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionCollapsed)(snapshot);\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed)\n      return !1;\n    const focusSpan = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusSpan)(snapshot), focusDecorators = focusSpan?.node.marks?.filter((mark) => snapshot.context.schema.decorators.some((decorator) => decorator.name === mark) ?? []), focusAnnotations = focusSpan?.node.marks?.filter((mark) => !snapshot.context.schema.decorators.some((decorator) => decorator.name === mark)) ?? [], focusListItem = focusTextBlock.node.listItem, focusLevel = focusTextBlock.node.level;\n    return (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isAtTheStartOfBlock)(focusTextBlock)(snapshot) ? {\n      focusAnnotations,\n      focusDecorators,\n      focusListItem,\n      focusLevel\n    } : !1;\n  },\n  actions: [({\n    snapshot\n  }, {\n    focusAnnotations,\n    focusDecorators,\n    focusListItem,\n    focusLevel\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name,\n      children: [{\n        _type: snapshot.context.schema.span.name,\n        marks: focusAnnotations.length === 0 ? focusDecorators : [],\n        text: \"\"\n      }],\n      listItem: focusListItem,\n      level: focusLevel,\n      style: snapshot.context.schema.styles[0]?.name\n    },\n    placement: \"before\",\n    select: \"none\"\n  })]]\n}), breakingEntireDocument = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    if (!snapshot.context.selection || !(0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionExpanded)(snapshot))\n      return !1;\n    const firstBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getFirstBlock)(snapshot), lastBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getLastBlock)(snapshot);\n    if (!firstBlock || !lastBlock)\n      return !1;\n    const firstBlockStartPoint = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getBlockStartPoint)({\n      context: snapshot.context,\n      block: firstBlock\n    }), selectionStartPoint = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getSelectionStartPoint)(snapshot.context.selection), lastBlockEndPoint = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: lastBlock\n    }), selectionEndPoint = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getSelectionEndPoint)(snapshot.context.selection);\n    return (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isEqualSelectionPoints)(firstBlockStartPoint, selectionStartPoint) && (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isEqualSelectionPoints)(lastBlockEndPoint, selectionEndPoint) ? {\n      selection: snapshot.context.selection\n    } : !1;\n  },\n  actions: [(_, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete\",\n    at: selection\n  })]]\n}), breakingEntireBlocks = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    if (!snapshot.context.selection || !(0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionExpanded)(snapshot))\n      return !1;\n    const selectedBlocks = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getSelectedBlocks)(snapshot), selectionStartBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getSelectionStartBlock)(snapshot), selectionEndBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getSelectionEndBlock)(snapshot);\n    if (!selectionStartBlock || !selectionEndBlock)\n      return !1;\n    const startBlockStartPoint = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getBlockStartPoint)({\n      context: snapshot.context,\n      block: selectionStartBlock\n    }), selectionStartPoint = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getSelectionStartPoint)(snapshot.context.selection), endBlockEndPoint = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: selectionEndBlock\n    }), selectionEndPoint = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getSelectionEndPoint)(snapshot.context.selection);\n    return (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isEqualSelectionPoints)(selectionStartPoint, startBlockStartPoint) && (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isEqualSelectionPoints)(selectionEndPoint, endBlockEndPoint) ? {\n      selectedBlocks\n    } : !1;\n  },\n  actions: [({\n    snapshot\n  }, {\n    selectedBlocks\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name,\n      children: [{\n        _type: snapshot.context.schema.span.name,\n        text: \"\",\n        marks: []\n      }]\n    },\n    placement: \"before\",\n    select: \"start\"\n  }), ...selectedBlocks.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete.block\",\n    at: block.path\n  }))]]\n}), breakingInlineObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    const selectionCollapsed = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionCollapsed)(snapshot), focusInlineObject = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getFocusInlineObject)(snapshot);\n    return selectionCollapsed && focusInlineObject;\n  },\n  actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"move.forward\",\n    distance: 1\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"split\"\n  })]]\n}), coreInsertBreakBehaviors = {\n  breakingAtTheEndOfTextBlock,\n  breakingAtTheStartOfTextBlock,\n  breakingEntireDocument,\n  breakingEntireBlocks,\n  breakingInlineObject\n};\nfunction isAtTheBeginningOfBlock({\n  context,\n  block\n}) {\n  return !(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(context, block) || !context.selection || !(0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isSelectionCollapsed)(context.selection) ? !1 : (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getChildKeyFromSelectionPoint)(context.selection.focus) === block.children[0]._key && context.selection.focus.offset === 0;\n}\nconst MAX_LIST_LEVEL = 10, clearListOnBackspace = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete.backward\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusTextBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusTextBlock)(snapshot);\n    return !focusTextBlock || focusTextBlock.node.level !== 1 || !isAtTheBeginningOfBlock({\n      context: snapshot.context,\n      block: focusTextBlock.node\n    }) ? !1 : {\n      focusTextBlock\n    };\n  },\n  actions: [(_, {\n    focusTextBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"block.unset\",\n    props: [\"listItem\", \"level\"],\n    at: focusTextBlock.path\n  })]]\n}), unindentListOnBackspace = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete.backward\",\n  guard: ({\n    snapshot\n  }) => {\n    const selectionCollapsed = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionCollapsed)(snapshot), focusTextBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusTextBlock)(snapshot), focusSpan = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusSpan)(snapshot);\n    return !selectionCollapsed || !focusTextBlock || !focusSpan ? !1 : focusTextBlock.node.children[0]._key === focusSpan.node._key && snapshot.context.selection?.focus.offset === 0 && focusTextBlock.node.level !== void 0 && focusTextBlock.node.level > 1 ? {\n      focusTextBlock,\n      level: focusTextBlock.node.level - 1\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    level\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"block.set\",\n    props: {\n      level\n    },\n    at: focusTextBlock.path\n  })]]\n}), mergeTextIntoListOnDelete = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete.forward\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusListBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getFocusListBlock)(snapshot), nextBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getNextBlock)(snapshot);\n    return !focusListBlock || !nextBlock || !(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(snapshot.context, nextBlock.node) || !(0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isEmptyTextBlock)(snapshot.context, focusListBlock.node) ? !1 : {\n      focusListBlock,\n      nextBlock\n    };\n  },\n  actions: [(_, {\n    nextBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: nextBlock.node,\n    placement: \"auto\",\n    select: \"start\"\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete.block\",\n    at: nextBlock.path\n  })]]\n}), mergeTextIntoListOnBackspace = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete.backward\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusTextBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusTextBlock)(snapshot), previousBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getPreviousBlock)(snapshot);\n    if (!focusTextBlock || !previousBlock || !isAtTheBeginningOfBlock({\n      context: snapshot.context,\n      block: focusTextBlock.node\n    }) || !(0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(snapshot.context, previousBlock.node) || !(0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isEmptyTextBlock)(snapshot.context, previousBlock.node))\n      return !1;\n    const previousBlockEndPoint = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: previousBlock\n    });\n    return {\n      focusTextBlock,\n      previousBlockEndPoint\n    };\n  },\n  actions: [(_, {\n    focusTextBlock,\n    previousBlockEndPoint\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: {\n      anchor: previousBlockEndPoint,\n      focus: previousBlockEndPoint\n    }\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: focusTextBlock.node,\n    placement: \"auto\",\n    select: \"start\"\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete.block\",\n    at: focusTextBlock.path\n  })]]\n}), deletingListFromStart = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const blocksToDelete = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getSelectedBlocks)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.at\n      }\n    });\n    if (blocksToDelete.length < 2)\n      return !1;\n    const startBlock = blocksToDelete.at(0)?.node, middleBlocks = blocksToDelete.slice(1, -1), endBlock = blocksToDelete.at(-1)?.node;\n    if (!(0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(snapshot.context, startBlock) || !(0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(snapshot.context, endBlock))\n      return !1;\n    const deleteStartPoint = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getSelectionStartPoint)({\n      context: {\n        ...snapshot.context,\n        selection: event.at\n      }\n    }), deleteEndPoint = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getSelectionEndPoint)({\n      context: {\n        ...snapshot.context,\n        selection: event.at\n      }\n    });\n    if (!deleteStartPoint || !deleteEndPoint)\n      return !1;\n    const startBlockStartPoint = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getBlockStartPoint)({\n      context: snapshot.context,\n      block: {\n        node: startBlock,\n        path: [{\n          _key: startBlock._key\n        }]\n      }\n    });\n    if (!(0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isEqualSelectionPoints)(deleteStartPoint, startBlockStartPoint))\n      return !1;\n    const startBlockEndPoint = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: {\n        node: startBlock,\n        path: [{\n          _key: startBlock._key\n        }]\n      }\n    }), endBlockEndPoint = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: {\n        node: endBlock,\n        path: [{\n          _key: endBlock._key\n        }]\n      }\n    }), slicedEndBlock = (0,_chunks_es_util_slice_text_block_js__WEBPACK_IMPORTED_MODULE_32__.sliceTextBlock)({\n      context: {\n        schema: snapshot.context.schema,\n        selection: {\n          anchor: deleteEndPoint,\n          focus: endBlockEndPoint\n        }\n      },\n      block: endBlock\n    });\n    return {\n      startBlockStartPoint,\n      startBlockEndPoint,\n      middleBlocks,\n      endBlock,\n      slicedEndBlock\n    };\n  },\n  actions: [(_, {\n    startBlockStartPoint,\n    startBlockEndPoint,\n    middleBlocks,\n    endBlock,\n    slicedEndBlock\n  }) => [\n    // All block in between can safely be deleted.\n    ...middleBlocks.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete.block\",\n      at: block.path\n    })),\n    // The last block is deleted as well.\n    (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete.block\",\n      at: [{\n        _key: endBlock._key\n      }]\n    }),\n    // But in case the delete operation didn't reach all the way to the end\n    // of it, we first place the caret at the end of the start block...\n    (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"select\",\n      at: {\n        anchor: startBlockEndPoint,\n        focus: startBlockEndPoint\n      }\n    }),\n    // ...and insert the rest of the end block at the end of it.\n    (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"insert.block\",\n      block: slicedEndBlock,\n      placement: \"auto\",\n      select: \"none\"\n    }),\n    // And finally, we delete the original text of the start block.\n    (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete\",\n      at: {\n        anchor: startBlockStartPoint,\n        focus: startBlockEndPoint\n      }\n    })\n  ]]\n}), clearListOnEnter = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    const selectionCollapsed = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionCollapsed)(snapshot), focusListBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getFocusListBlock)(snapshot);\n    return !selectionCollapsed || !focusListBlock || !(0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isEmptyTextBlock)(snapshot.context, focusListBlock.node) ? !1 : {\n      focusListBlock\n    };\n  },\n  actions: [(_, {\n    focusListBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"block.unset\",\n    props: [\"listItem\", \"level\"],\n    at: focusListBlock.path\n  })]]\n}), indentListOnTab = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"keyboard.keydown\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (!defaultKeyboardShortcuts.tab.guard(event.originEvent))\n      return !1;\n    const selectedBlocks = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getSelectedBlocks)(snapshot), selectedListBlocks = selectedBlocks.flatMap((block) => (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(snapshot.context, block.node) ? [{\n      node: block.node,\n      path: block.path\n    }] : []);\n    return selectedListBlocks.length === selectedBlocks.length ? {\n      selectedListBlocks\n    } : !1;\n  },\n  actions: [(_, {\n    selectedListBlocks\n  }) => selectedListBlocks.map((selectedListBlock) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"block.set\",\n    props: {\n      level: Math.min(MAX_LIST_LEVEL, Math.max(1, selectedListBlock.node.level + 1))\n    },\n    at: selectedListBlock.path\n  }))]\n}), unindentListOnShiftTab = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"keyboard.keydown\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (!defaultKeyboardShortcuts.shiftTab.guard(event.originEvent))\n      return !1;\n    const selectedBlocks = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getSelectedBlocks)(snapshot), selectedListBlocks = selectedBlocks.flatMap((block) => (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(snapshot.context, block.node) ? [{\n      node: block.node,\n      path: block.path\n    }] : []);\n    return selectedListBlocks.length === selectedBlocks.length ? {\n      selectedListBlocks\n    } : !1;\n  },\n  actions: [(_, {\n    selectedListBlocks\n  }) => selectedListBlocks.map((selectedListBlock) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"block.set\",\n    props: {\n      level: Math.min(MAX_LIST_LEVEL, Math.max(1, selectedListBlock.node.level - 1))\n    },\n    at: selectedListBlock.path\n  }))]\n}), inheritListLevel = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const focusListBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getFocusListBlock)(snapshot);\n    if (!focusListBlock)\n      return !1;\n    const firstInsertedBlock = event.blocks.at(0), secondInsertedBlock = event.blocks.at(1), insertedListBlock = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(snapshot.context, firstInsertedBlock) ? firstInsertedBlock : (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(snapshot.context, secondInsertedBlock) ? secondInsertedBlock : void 0;\n    if (!insertedListBlock)\n      return !1;\n    const levelDifference = focusListBlock.node.level - insertedListBlock.level;\n    return levelDifference === 0 ? !1 : {\n      levelDifference,\n      insertedListBlock\n    };\n  },\n  actions: [({\n    snapshot,\n    event\n  }, {\n    levelDifference,\n    insertedListBlock\n  }) => {\n    let adjustLevel = !0, listStartBlockFound = !1;\n    return [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      ...event,\n      blocks: event.blocks.map((block) => (block._key === insertedListBlock._key && (listStartBlockFound = !0), adjustLevel ? listStartBlockFound && adjustLevel && (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(snapshot.context, block) ? {\n        ...block,\n        level: Math.min(MAX_LIST_LEVEL, Math.max(1, block.level + levelDifference))\n      } : (listStartBlockFound && (adjustLevel = !1), block) : block))\n    })];\n  }]\n}), inheritListItem = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const focusListBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getFocusListBlock)(snapshot);\n    if (!focusListBlock || (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isEmptyTextBlock)(snapshot.context, focusListBlock.node))\n      return !1;\n    const firstInsertedBlock = event.blocks.at(0), secondInsertedBlock = event.blocks.at(1), insertedListBlock = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(snapshot.context, firstInsertedBlock) ? firstInsertedBlock : (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(snapshot.context, secondInsertedBlock) ? secondInsertedBlock : void 0;\n    return !insertedListBlock || focusListBlock.node.level !== insertedListBlock.level || focusListBlock.node.listItem === insertedListBlock.listItem ? !1 : {\n      listItem: focusListBlock.node.listItem,\n      insertedListBlock\n    };\n  },\n  actions: [({\n    snapshot,\n    event\n  }, {\n    listItem,\n    insertedListBlock\n  }) => {\n    let adjustListItem = !0, listStartBlockFound = !1;\n    return [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      ...event,\n      blocks: event.blocks.map((block) => (block._key === insertedListBlock._key && (listStartBlockFound = !0), adjustListItem ? listStartBlockFound && adjustListItem && (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.isListBlock)(snapshot.context, block) ? {\n        ...block,\n        listItem: block.level === insertedListBlock.level ? listItem : block.listItem\n      } : (listStartBlockFound && (adjustListItem = !1), block) : block))\n    })];\n  }]\n}), inheritListProperties = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.block\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (event.placement !== \"auto\" || event.block._type !== snapshot.context.schema.block.name || event.block.listItem !== void 0)\n      return !1;\n    const focusListBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getFocusListBlock)(snapshot);\n    return !focusListBlock || !(0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isEmptyTextBlock)(snapshot.context, focusListBlock.node) ? !1 : {\n      level: focusListBlock.node.level,\n      listItem: focusListBlock.node.listItem\n    };\n  },\n  actions: [({\n    event\n  }, {\n    level,\n    listItem\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    ...event,\n    block: {\n      ...event.block,\n      level,\n      listItem\n    }\n  })]]\n}), coreListBehaviors = {\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  mergeTextIntoListOnDelete,\n  mergeTextIntoListOnBackspace,\n  deletingListFromStart,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab,\n  inheritListLevel,\n  inheritListItem,\n  inheritListProperties\n}, coreBehaviorsConfig = [...coreAnnotationBehaviors, coreDecoratorBehaviors.strongShortcut, coreDecoratorBehaviors.emShortcut, coreDecoratorBehaviors.underlineShortcut, coreDecoratorBehaviors.codeShortcut, ...coreDndBehaviors, coreBlockObjectBehaviors.clickingAboveLonelyBlockObject, coreBlockObjectBehaviors.clickingBelowLonelyBlockObject, coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject, coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject, coreBlockObjectBehaviors.breakingBlockObject, coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject, coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject, ...coreInsertBehaviors, coreListBehaviors.clearListOnBackspace, coreListBehaviors.unindentListOnBackspace, coreListBehaviors.mergeTextIntoListOnDelete, coreListBehaviors.mergeTextIntoListOnBackspace, coreListBehaviors.deletingListFromStart, coreListBehaviors.clearListOnEnter, coreListBehaviors.indentListOnTab, coreListBehaviors.unindentListOnShiftTab, coreListBehaviors.inheritListLevel, coreListBehaviors.inheritListItem, coreListBehaviors.inheritListProperties, coreInsertBreakBehaviors.breakingAtTheEndOfTextBlock, coreInsertBreakBehaviors.breakingAtTheStartOfTextBlock, coreInsertBreakBehaviors.breakingEntireDocument, coreInsertBreakBehaviors.breakingEntireBlocks, coreInsertBreakBehaviors.breakingInlineObject].map((behavior) => ({\n  behavior,\n  priority: corePriority\n}));\nfunction withoutNormalizingConditional(editor, predicate, fn) {\n  predicate() ? slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(editor, fn) : fn();\n}\nconst abstractAnnotationBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"annotation.set\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const blockKey = event.at[0]._key, markDefKey = event.at[2]._key, block = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusTextBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: {\n            path: [{\n              _key: blockKey\n            }],\n            offset: 0\n          },\n          focus: {\n            path: [{\n              _key: blockKey\n            }],\n            offset: 0\n          }\n        }\n      }\n    });\n    if (!block)\n      return !1;\n    const updatedMarkDefs = block.node.markDefs?.map((markDef) => markDef._key === markDefKey ? {\n      ...markDef,\n      ...event.props\n    } : markDef);\n    return {\n      blockKey,\n      updatedMarkDefs\n    };\n  },\n  actions: [(_, {\n    blockKey,\n    updatedMarkDefs\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"block.set\",\n    at: [{\n      _key: blockKey\n    }],\n    props: {\n      markDefs: updatedMarkDefs\n    }\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"annotation.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isActiveAnnotation)(event.annotation.name)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"annotation.remove\",\n    annotation: event.annotation\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"annotation.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => !(0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isActiveAnnotation)(event.annotation.name)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"annotation.add\",\n    annotation: event.annotation\n  })]]\n})], abstractDecoratorBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"decorator.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isActiveDecorator)(event.decorator)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"decorator.remove\",\n    decorator: event.decorator\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"decorator.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const manualSelection = event.at ? (0,_chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_33__.blockOffsetsToSelection)({\n      context: snapshot.context,\n      offsets: event.at\n    }) : null;\n    return manualSelection ? !(0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isActiveDecorator)(event.decorator)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: manualSelection\n      }\n    }) : !(0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isActiveDecorator)(event.decorator)(snapshot);\n  },\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    ...event,\n    type: \"decorator.add\"\n  })]]\n})], abstractDeleteBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete.backward\",\n  guard: ({\n    snapshot\n  }) => snapshot.context.selection ? {\n    selection: snapshot.context.selection\n  } : !1,\n  actions: [({\n    event\n  }, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete\",\n    direction: \"backward\",\n    unit: event.unit,\n    at: selection\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (event.direction !== \"backward\")\n      return !1;\n    const previousBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getPreviousBlock)(snapshot), focusTextBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusTextBlock)(snapshot);\n    if (!previousBlock || !focusTextBlock || !(0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isAtTheStartOfBlock)(focusTextBlock)(snapshot))\n      return !1;\n    const previousBlockEndPoint = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: previousBlock\n    });\n    return (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(snapshot.context, previousBlock.node) ? {\n      previousBlockEndPoint,\n      focusTextBlock\n    } : !1;\n  },\n  actions: [(_, {\n    previousBlockEndPoint,\n    focusTextBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete.block\",\n    at: focusTextBlock.path\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: {\n      anchor: previousBlockEndPoint,\n      focus: previousBlockEndPoint\n    }\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: focusTextBlock.node,\n    placement: \"auto\",\n    select: \"start\"\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete.forward\",\n  guard: ({\n    snapshot\n  }) => snapshot.context.selection ? {\n    selection: snapshot.context.selection\n  } : !1,\n  actions: [({\n    event\n  }, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete\",\n    direction: \"forward\",\n    unit: event.unit,\n    at: selection\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (event.direction !== \"forward\")\n      return !1;\n    const nextBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getNextBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.at\n      }\n    }), focusTextBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusTextBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.at\n      }\n    });\n    if (!nextBlock || !focusTextBlock || !(0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isEmptyTextBlock)(snapshot.context, focusTextBlock.node))\n      return !1;\n    const nextBlockStartPoint = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getBlockStartPoint)({\n      context: snapshot.context,\n      block: nextBlock\n    });\n    return {\n      focusTextBlock,\n      nextBlockStartPoint\n    };\n  },\n  actions: [(_, {\n    focusTextBlock,\n    nextBlockStartPoint\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete.block\",\n    at: focusTextBlock.path\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: {\n      anchor: nextBlockStartPoint,\n      focus: nextBlockStartPoint\n    }\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (event.direction !== \"forward\")\n      return !1;\n    const nextBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getNextBlock)(snapshot), focusTextBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusTextBlock)(snapshot);\n    return !nextBlock || !focusTextBlock || !(0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isAtTheEndOfBlock)(focusTextBlock)(snapshot) || !(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(snapshot.context, nextBlock.node) ? !1 : {\n      nextBlock\n    };\n  },\n  actions: [(_, {\n    nextBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete.block\",\n    at: nextBlock.path\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: nextBlock.node,\n    placement: \"auto\",\n    select: \"none\"\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete.block\",\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete\",\n    at: {\n      anchor: {\n        path: event.at,\n        offset: 0\n      },\n      focus: {\n        path: event.at,\n        offset: 0\n      }\n    },\n    unit: \"block\"\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete.child\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const focusChild = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusChild)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: {\n            path: event.at,\n            offset: 0\n          },\n          focus: {\n            path: event.at,\n            offset: 0\n          }\n        }\n      }\n    });\n    return focusChild ? (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isSpan)(snapshot.context, focusChild.node) ? {\n      selection: {\n        anchor: {\n          path: event.at,\n          offset: 0\n        },\n        focus: {\n          path: event.at,\n          offset: focusChild.node.text.length\n        }\n      }\n    } : {\n      selection: {\n        anchor: {\n          path: event.at,\n          offset: 0\n        },\n        focus: {\n          path: event.at,\n          offset: 0\n        }\n      }\n    } : !1;\n  },\n  actions: [(_, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete\",\n    at: selection\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"delete.text\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const selection = (0,_chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_33__.blockOffsetsToSelection)({\n      context: snapshot.context,\n      offsets: event.at\n    });\n    if (!selection)\n      return !1;\n    const trimmedSelection = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getTrimmedSelection)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        value: snapshot.context.value,\n        selection\n      }\n    });\n    return trimmedSelection ? {\n      selection: trimmedSelection\n    } : !1;\n  },\n  actions: [(_, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete\",\n    at: selection\n  })]]\n})], abstractDeserializeBehaviors = [\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"deserialize\",\n    guard: ({\n      event\n    }) => {\n      const portableText = event.originEvent.originEvent.dataTransfer.getData(\"application/x-portable-text\");\n      if (portableText)\n        return {\n          type: \"deserialize.data\",\n          mimeType: \"application/x-portable-text\",\n          data: portableText,\n          originEvent: event.originEvent\n        };\n      const json = event.originEvent.originEvent.dataTransfer.getData(\"application/json\");\n      if (json)\n        return {\n          type: \"deserialize.data\",\n          mimeType: \"application/json\",\n          data: json,\n          originEvent: event.originEvent\n        };\n      const html = event.originEvent.originEvent.dataTransfer.getData(\"text/html\");\n      if (html)\n        return {\n          type: \"deserialize.data\",\n          mimeType: \"text/html\",\n          data: html,\n          originEvent: event.originEvent\n        };\n      const text = event.originEvent.originEvent.dataTransfer.getData(\"text/plain\");\n      return text ? {\n        type: \"deserialize.data\",\n        mimeType: \"text/plain\",\n        data: text,\n        originEvent: event.originEvent\n      } : !1;\n    },\n    actions: [(_, deserializeEvent) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)(deserializeEvent)]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"deserialize\",\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"deserialization.failure\",\n      mimeType: \"*/*\",\n      reason: \"No Behavior was able to handle the incoming data\",\n      originEvent: event.originEvent\n    })]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"deserialize.data\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      const converter = snapshot.context.converters.find((converter2) => converter2.mimeType === event.mimeType);\n      return converter ? converter.deserialize({\n        snapshot,\n        event: {\n          type: \"deserialize\",\n          data: event.data\n        }\n      }) : !1;\n    },\n    actions: [({\n      event\n    }, deserializeEvent) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      ...deserializeEvent,\n      originEvent: event.originEvent\n    })]]\n  }),\n  /**\n   * If we are pasting text/plain into a text block then we can probably\n   * assume that the intended behavior is that the pasted text inherits\n   * formatting from the text it's pasted into.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"deserialization.success\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if ((0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusTextBlock)(snapshot) && event.mimeType === \"text/plain\" && event.originEvent.type === \"clipboard.paste\") {\n        const activeDecorators = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getActiveDecorators)(snapshot);\n        return {\n          activeAnnotations: (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getActiveAnnotations)(snapshot),\n          activeDecorators,\n          textRuns: event.data.flatMap((block) => (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(snapshot.context, block) ? [(0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getTextBlockText)(block)] : [])\n        };\n      }\n      return !1;\n    },\n    actions: [(_, {\n      activeAnnotations,\n      activeDecorators,\n      textRuns\n    }) => textRuns.flatMap((textRun, index) => index !== textRuns.length - 1 ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"insert.span\",\n      text: textRun,\n      decorators: activeDecorators,\n      annotations: activeAnnotations.map(({\n        _key,\n        _type,\n        ...value\n      }) => ({\n        name: _type,\n        value\n      }))\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"insert.break\"\n    })] : [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"insert.span\",\n      text: textRun,\n      decorators: activeDecorators,\n      annotations: activeAnnotations.map(({\n        _key,\n        _type,\n        ...value\n      }) => ({\n        name: _type,\n        value\n      }))\n    })])]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"deserialization.success\",\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"insert.blocks\",\n      blocks: event.data,\n      placement: \"auto\"\n    })]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"deserialization.failure\",\n    guard: ({\n      event\n    }) => {\n      if (event.mimeType === \"application/x-portable-text\") {\n        const json = event.originEvent.originEvent.dataTransfer.getData(\"application/json\");\n        if (json)\n          return {\n            type: \"deserialize.data\",\n            mimeType: \"application/json\",\n            data: json,\n            originEvent: event.originEvent\n          };\n      }\n      if (event.mimeType === \"application/json\") {\n        const html = event.originEvent.originEvent.dataTransfer.getData(\"text/html\");\n        if (html)\n          return {\n            type: \"deserialize.data\",\n            mimeType: \"text/html\",\n            data: html,\n            originEvent: event.originEvent\n          };\n      }\n      if (event.mimeType === \"text/html\") {\n        const text = event.originEvent.originEvent.dataTransfer.getData(\"text/plain\");\n        if (text)\n          return {\n            type: \"deserialize.data\",\n            mimeType: \"text/plain\",\n            data: text,\n            originEvent: event.originEvent\n          };\n      }\n      return !1;\n    },\n    actions: [(_, deserializeDataEvent) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)(deserializeDataEvent)]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"deserialization.failure\",\n    actions: [({\n      event\n    }) => [{\n      type: \"effect\",\n      effect: () => {\n        console.warn(`Deserialization of ${event.mimeType} failed with reason \"${event.reason}\"`);\n      }\n    }]]\n  })\n], abstractInsertBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    event\n  }) => {\n    const onlyBlock = event.blocks.length === 1 ? event.blocks.at(0) : void 0;\n    return onlyBlock ? {\n      onlyBlock\n    } : !1;\n  },\n  actions: [({\n    event\n  }, {\n    onlyBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: onlyBlock,\n    placement: event.placement,\n    select: event.select ?? \"end\"\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (event.placement !== \"before\")\n      return !1;\n    const firstBlockKey = event.blocks.at(0)?._key ?? snapshot.context.keyGenerator(), lastBlockKey = event.blocks.at(-1)?._key ?? snapshot.context.keyGenerator();\n    return {\n      firstBlockKey,\n      lastBlockKey\n    };\n  },\n  actions: [({\n    snapshot,\n    event\n  }, {\n    firstBlockKey,\n    lastBlockKey\n  }) => [...event.blocks.map((block, index) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: index === 0 ? \"before\" : \"after\",\n    select: index !== event.blocks.length - 1 ? \"end\" : \"none\"\n  })), ...event.select === \"none\" ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: snapshot.context.selection\n  })] : event.select === \"start\" ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select.block\",\n    at: [{\n      _key: firstBlockKey\n    }],\n    select: \"start\"\n  })] : [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select.block\",\n    at: [{\n      _key: lastBlockKey\n    }],\n    select: \"end\"\n  })]]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (event.placement !== \"after\")\n      return !1;\n    const firstBlockKey = event.blocks.at(0)?._key ?? snapshot.context.keyGenerator(), lastBlockKey = event.blocks.at(-1)?._key ?? snapshot.context.keyGenerator();\n    return {\n      firstBlockKey,\n      lastBlockKey\n    };\n  },\n  actions: [({\n    snapshot,\n    event\n  }, {\n    firstBlockKey,\n    lastBlockKey\n  }) => [...event.blocks.map((block, index) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: \"after\",\n    select: index !== event.blocks.length - 1 ? \"end\" : \"none\"\n  })), ...event.select === \"none\" ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: snapshot.context.selection\n  })] : event.select === \"start\" ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select.block\",\n    at: [{\n      _key: firstBlockKey\n    }],\n    select: \"start\"\n  })] : [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select.block\",\n    at: [{\n      _key: lastBlockKey\n    }],\n    select: \"end\"\n  })]]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (event.placement !== \"auto\")\n      return !1;\n    const focusTextBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusTextBlock)(snapshot);\n    if (!focusTextBlock || !(0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isEmptyTextBlock)(snapshot.context, focusTextBlock.node))\n      return !1;\n    const firstBlockKey = event.blocks.at(0)?._key ?? snapshot.context.keyGenerator(), lastBlockKey = event.blocks.at(-1)?._key ?? snapshot.context.keyGenerator();\n    return {\n      focusTextBlock,\n      firstBlockKey,\n      lastBlockKey\n    };\n  },\n  actions: [({\n    event\n  }, {\n    firstBlockKey,\n    lastBlockKey\n  }) => [...event.blocks.map((block, index) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: index === 0 ? \"auto\" : \"after\",\n    select: index !== event.blocks.length - 1 ? \"end\" : \"none\"\n  })), ...event.select === \"none\" || event.select === \"start\" ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select.block\",\n    at: [{\n      _key: firstBlockKey\n    }],\n    select: \"start\"\n  })] : [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select.block\",\n    at: [{\n      _key: lastBlockKey\n    }],\n    select: \"end\"\n  })]]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (event.placement !== \"auto\")\n      return !1;\n    const focusTextBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusTextBlock)(snapshot);\n    if (!focusTextBlock || !snapshot.context.selection)\n      return !1;\n    const focusBlockStartPoint = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getBlockStartPoint)({\n      context: snapshot.context,\n      block: focusTextBlock\n    }), focusBlockEndPoint = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: focusTextBlock\n    }), focusTextBlockAfter = (0,_chunks_es_util_slice_text_block_js__WEBPACK_IMPORTED_MODULE_32__.sliceTextBlock)({\n      context: {\n        schema: snapshot.context.schema,\n        selection: {\n          anchor: snapshot.context.selection.focus,\n          focus: focusBlockEndPoint\n        }\n      },\n      block: focusTextBlock.node\n    });\n    return {\n      firstBlockKey: event.blocks.at(0)?._key ?? snapshot.context.keyGenerator(),\n      focusBlockStartPoint,\n      focusBlockEndPoint,\n      focusTextBlockAfter,\n      selection: snapshot.context.selection\n    };\n  },\n  actions: [({\n    event\n  }, {\n    focusBlockEndPoint,\n    focusTextBlockAfter,\n    selection,\n    firstBlockKey,\n    focusBlockStartPoint\n  }) => [...event.blocks.flatMap((block, index) => index === 0 ? [...(0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isEqualSelectionPoints)(selection.focus, focusBlockEndPoint) ? [] : [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete\",\n    at: {\n      anchor: selection.focus,\n      focus: focusBlockEndPoint\n    }\n  })], (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: \"auto\",\n    select: \"end\"\n  })] : index === event.blocks.length - 1 ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: \"after\",\n    select: \"end\"\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: focusTextBlockAfter,\n    placement: \"auto\",\n    select: event.select === \"end\" ? \"none\" : \"end\"\n  })] : [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: \"after\",\n    select: \"end\"\n  })]), ...event.select === \"none\" ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: selection\n  })] : event.select === \"start\" ? [(0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isEqualSelectionPoints)(selection.focus, focusBlockStartPoint) ? (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select.block\",\n    at: [{\n      _key: firstBlockKey\n    }],\n    select: \"start\"\n  }) : (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: {\n      anchor: selection.focus,\n      focus: selection.focus\n    }\n  })] : []]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    event\n  }) => event.placement === \"auto\",\n  actions: [({\n    event\n  }) => event.blocks.map((block, index) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: index === 0 ? \"auto\" : \"after\",\n    select: event.select ?? \"end\"\n  }))]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.break\",\n  actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"split\"\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.child\",\n  guard: ({\n    snapshot\n  }) => {\n    const lastBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getLastBlock)(snapshot);\n    return !lastBlock || snapshot.context.selection ? !1 : {\n      lastBlockEndPoint: (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n        context: snapshot.context,\n        block: lastBlock\n      })\n    };\n  },\n  actions: [({\n    event\n  }, {\n    lastBlockEndPoint\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: {\n      anchor: lastBlockEndPoint,\n      focus: lastBlockEndPoint\n    }\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)(event)]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.child\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusTextBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusTextBlock)(snapshot);\n    return snapshot.context.selection && !focusTextBlock;\n  },\n  actions: [({\n    snapshot,\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name,\n      children: [{\n        _type: snapshot.context.schema.span.name,\n        text: \"\",\n        marks: []\n      }]\n    },\n    placement: \"auto\",\n    select: \"end\"\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)(event)]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.inline object\",\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.child\",\n    child: {\n      _type: event.inlineObject.name,\n      ...event.inlineObject.value\n    }\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.soft break\",\n  actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.text\",\n    text: `\n`\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.span\",\n  guard: ({\n    snapshot\n  }) => !(0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusTextBlock)(snapshot),\n  actions: [({\n    snapshot,\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name,\n      children: [{\n        _type: snapshot.context.schema.span.name,\n        text: \"\",\n        marks: []\n      }]\n    },\n    placement: \"auto\",\n    select: \"end\"\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)(event)]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"insert.span\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const focusTextBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusTextBlock)(snapshot);\n    return {\n      markDefs: event.annotations?.map((annotation) => ({\n        _type: annotation.name,\n        _key: snapshot.context.keyGenerator(),\n        ...annotation.value\n      })) ?? [],\n      focusTextBlock\n    };\n  },\n  actions: [({\n    snapshot,\n    event\n  }, {\n    markDefs,\n    focusTextBlock\n  }) => [...focusTextBlock ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"block.set\",\n    at: focusTextBlock.path,\n    props: {\n      markDefs: [...focusTextBlock.node.markDefs ?? [], ...markDefs]\n    }\n  })] : [], (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"insert.child\",\n    child: {\n      _type: snapshot.context.schema.span.name,\n      text: event.text,\n      marks: [...event.decorators ?? [], ...markDefs.map((markDef) => markDef._key)]\n    }\n  })]]\n})], shiftLeft = (0,_portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_35__.createKeyboardShortcut)({\n  default: [{\n    key: \"ArrowLeft\",\n    shift: !0,\n    meta: !1,\n    ctrl: !1,\n    alt: !1\n  }]\n}), abstractKeyboardBehaviors = [\n  /**\n   * When Backspace is pressed on an inline object, Slate will raise a\n   * `delete.backward` event with `unit: 'block'`. This is wrong and this\n   * Behavior adjusts that.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => defaultKeyboardShortcuts.backspace.guard(event.originEvent) && (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionCollapsed)(snapshot) && (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getFocusInlineObject)(snapshot),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete.backward\",\n      unit: \"character\"\n    })]]\n  }),\n  /**\n   * When Delete is pressed on an inline object, Slate will raise a\n   * `delete.forward` event with `unit: 'block'`. This is wrong and this\n   * Behavior adjusts that.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => defaultKeyboardShortcuts.delete.guard(event.originEvent) && (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionCollapsed)(snapshot) && (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getFocusInlineObject)(snapshot),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete.forward\",\n      unit: \"character\"\n    })]]\n  }),\n  /**\n   * Allow raising an `insert.break` event when pressing Enter on an inline\n   * object.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => defaultKeyboardShortcuts.break.guard(event.originEvent) && (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionCollapsed)(snapshot) && (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getFocusInlineObject)(snapshot),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"insert.break\"\n    })]]\n  }),\n  /**\n   * On Firefox, Enter might collapse the selection. To mitigate this, we\n   * `raise` an `insert.break` event manually.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => defaultKeyboardShortcuts.break.guard(event.originEvent) && (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionExpanded)(snapshot),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"insert.break\"\n    })]]\n  }),\n  /**\n   * On WebKit, Shift+Enter results in an `insertParagraph` input event rather\n   * than an `insertLineBreak` input event. This Behavior makes sure we catch\n   * that `keyboard.keydown` event beforehand and raise an `insert.soft break` manually.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      event\n    }) => defaultKeyboardShortcuts.lineBreak.guard(event.originEvent),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"insert.soft break\"\n    })]]\n  }),\n  /**\n   * Manual handling of undo shortcuts.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      event\n    }) => defaultKeyboardShortcuts.history.undo.guard(event.originEvent),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"history.undo\"\n    })]]\n  }),\n  /**\n   * Manual handling of redo shortcuts.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      event\n    }) => defaultKeyboardShortcuts.history.redo.guard(event.originEvent),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"history.redo\"\n    })]]\n  }),\n  /**\n   * Fix edge case where Shift+ArrowLeft didn't reduce a selection hanging\n   * onto an empty text block.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (!snapshot.context.selection || !shiftLeft.guard(event.originEvent))\n        return !1;\n      const focusBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusBlock)(snapshot);\n      if (!focusBlock)\n        return !1;\n      const previousBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getPreviousBlock)({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: focusBlock.path,\n              offset: 0\n            },\n            focus: {\n              path: focusBlock.path,\n              offset: 0\n            }\n          }\n        }\n      });\n      return previousBlock && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(snapshot.context, focusBlock.node) && snapshot.context.selection.focus.offset === 0 && (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isEmptyTextBlock)(snapshot.context, focusBlock.node) ? {\n        previousBlock,\n        selection: snapshot.context.selection\n      } : !1;\n    },\n    actions: [({\n      snapshot\n    }, {\n      previousBlock,\n      selection\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"select\",\n      at: {\n        anchor: selection.anchor,\n        focus: (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n          context: snapshot.context,\n          block: previousBlock\n        })\n      }\n    })]]\n  })\n], abstractListItemBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"list item.add\",\n  guard: ({\n    snapshot,\n    event\n  }) => snapshot.context.schema.lists.some((list) => list.name === event.listItem) ? {\n    selectedTextBlocks: (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getSelectedTextBlocks)(snapshot)\n  } : !1,\n  actions: [({\n    event\n  }, {\n    selectedTextBlocks\n  }) => selectedTextBlocks.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"block.set\",\n    at: block.path,\n    props: {\n      level: block.node.level ?? 1,\n      listItem: event.listItem\n    }\n  }))]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"list item.remove\",\n  guard: ({\n    snapshot\n  }) => ({\n    selectedTextBlocks: (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getSelectedTextBlocks)(snapshot)\n  }),\n  actions: [(_, {\n    selectedTextBlocks\n  }) => selectedTextBlocks.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"block.unset\",\n    at: block.path,\n    props: [\"level\", \"listItem\"]\n  }))]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"list item.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isActiveListItem)(event.listItem)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"list item.remove\",\n    listItem: event.listItem\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"list item.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => !(0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isActiveListItem)(event.listItem)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"list item.add\",\n    listItem: event.listItem\n  })]]\n})], abstractMoveBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"move.block up\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const previousBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getPreviousBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: {\n            path: event.at,\n            offset: 0\n          },\n          focus: {\n            path: event.at,\n            offset: 0\n          }\n        }\n      }\n    });\n    return previousBlock ? {\n      previousBlock\n    } : !1;\n  },\n  actions: [({\n    event\n  }, {\n    previousBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"move.block\",\n    at: event.at,\n    to: previousBlock.path\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"move.block down\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const nextBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getNextBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: {\n            path: event.at,\n            offset: 0\n          },\n          focus: {\n            path: event.at,\n            offset: 0\n          }\n        }\n      }\n    });\n    return nextBlock ? {\n      nextBlock\n    } : !1;\n  },\n  actions: [({\n    event\n  }, {\n    nextBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"move.block\",\n    at: event.at,\n    to: nextBlock.path\n  })]]\n})], abstractSelectBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"select.block\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (event.select !== \"end\")\n      return !1;\n    const block = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: {\n            path: event.at,\n            offset: 0\n          },\n          focus: {\n            path: event.at,\n            offset: 0\n          }\n        }\n      }\n    });\n    return block ? {\n      blockEndPoint: (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n        context: snapshot.context,\n        block\n      })\n    } : !1;\n  },\n  actions: [(_, {\n    blockEndPoint\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: {\n      anchor: blockEndPoint,\n      focus: blockEndPoint\n    }\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"select.block\",\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select\",\n    at: {\n      anchor: {\n        path: event.at,\n        offset: 0\n      },\n      focus: {\n        path: event.at,\n        offset: 0\n      }\n    }\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"select.previous block\",\n  guard: ({\n    snapshot\n  }) => {\n    const previousBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getPreviousBlock)(snapshot);\n    return previousBlock ? {\n      previousBlock\n    } : !1;\n  },\n  actions: [({\n    event\n  }, {\n    previousBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select.block\",\n    at: previousBlock.path,\n    select: event.select\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"select.next block\",\n  guard: ({\n    snapshot\n  }) => {\n    const nextBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getNextBlock)(snapshot);\n    return nextBlock ? {\n      nextBlock\n    } : !1;\n  },\n  actions: [({\n    event\n  }, {\n    nextBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"select.block\",\n    at: nextBlock.path,\n    select: event.select\n  })]]\n})], abstractSerializeBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"serialize\",\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"serialize.data\",\n    mimeType: \"application/x-portable-text\",\n    originEvent: event.originEvent\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"serialize.data\",\n    mimeType: \"application/json\",\n    originEvent: event.originEvent\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"serialize.data\",\n    mimeType: \"text/html\",\n    originEvent: event.originEvent\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"serialize.data\",\n    mimeType: \"text/plain\",\n    originEvent: event.originEvent\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"serialize.data\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const converter = snapshot.context.converters.find((converter2) => converter2.mimeType === event.mimeType);\n    return converter ? converter.serialize({\n      snapshot,\n      event: {\n        type: \"serialize\",\n        originEvent: event.originEvent.type\n      }\n    }) : !1;\n  },\n  actions: [({\n    event\n  }, serializeEvent) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    ...serializeEvent,\n    originEvent: event.originEvent\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"serialization.success\",\n  actions: [({\n    event\n  }) => [{\n    type: \"effect\",\n    effect: () => {\n      event.originEvent.originEvent.dataTransfer.setData(event.mimeType, event.data);\n    }\n  }]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"serialization.failure\",\n  actions: [({\n    event\n  }) => [{\n    type: \"effect\",\n    effect: () => {\n      console.warn(`Serialization of ${event.mimeType} failed with reason \"${event.reason}\"`);\n    }\n  }]]\n})], abstractSplitBehaviors = [\n  /**\n   * You can't split an inline object.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"split\",\n    guard: ({\n      snapshot\n    }) => (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isSelectionCollapsed)(snapshot.context.selection) && (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getFocusInlineObject)(snapshot),\n    actions: []\n  }),\n  /**\n   * You can't split a block object.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"split\",\n    guard: ({\n      snapshot\n    }) => (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isSelectionCollapsed)(snapshot.context.selection) && (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getFocusBlockObject)(snapshot),\n    actions: []\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"split\",\n    guard: ({\n      snapshot\n    }) => {\n      const selection = snapshot.context.selection;\n      if (!selection || (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isSelectionCollapsed)(selection))\n        return !1;\n      const selectionStartBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getSelectionStartBlock)(snapshot), selectionEndBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getSelectionEndBlock)(snapshot);\n      return !selectionStartBlock || !selectionEndBlock ? !1 : !(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(snapshot.context, selectionStartBlock.node) && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(snapshot.context, selectionEndBlock.node) ? {\n        selection\n      } : !1;\n    },\n    actions: [(_, {\n      selection\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete\",\n      at: selection\n    })]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"split\",\n    guard: ({\n      snapshot\n    }) => {\n      const selection = snapshot.context.selection;\n      if (!selection || (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isSelectionCollapsed)(selection))\n        return !1;\n      const selectionStartBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getSelectionStartBlock)(snapshot), selectionEndBlock = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getSelectionEndBlock)(snapshot);\n      if (!selectionStartBlock || !selectionEndBlock || selectionStartBlock.node._key === selectionEndBlock.node._key)\n        return !1;\n      const startPoint = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getSelectionStartPoint)(selection), startBlockEndPoint = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n        context: snapshot.context,\n        block: selectionStartBlock\n      }), endPoint = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getSelectionEndPoint)(selection), endBlockStartPoint = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getBlockStartPoint)({\n        context: snapshot.context,\n        block: selectionEndBlock\n      }), blocksInBetween = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getSelectedValue)(snapshot).filter((block) => block._key !== selectionStartBlock.node._key && block._key !== selectionEndBlock.node._key);\n      return {\n        startPoint,\n        startBlockEndPoint,\n        endPoint,\n        endBlockStartPoint,\n        blocksInBetween\n      };\n    },\n    actions: [(_, {\n      startPoint,\n      startBlockEndPoint,\n      endPoint,\n      endBlockStartPoint,\n      blocksInBetween\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete\",\n      at: {\n        anchor: startPoint,\n        focus: startBlockEndPoint\n      }\n    }), ...blocksInBetween.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete.block\",\n      at: [{\n        _key: block._key\n      }]\n    })), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete\",\n      at: {\n        anchor: endBlockStartPoint,\n        focus: endPoint\n      }\n    })]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"split\",\n    guard: ({\n      snapshot\n    }) => {\n      const selection = snapshot.context.selection;\n      return !selection || (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isSelectionCollapsed)(selection) ? !1 : {\n        selection\n      };\n    },\n    actions: [(_, {\n      selection\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete\",\n      at: selection\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"split\"\n    })]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n    on: \"split\",\n    guard: ({\n      snapshot\n    }) => {\n      const selection = snapshot.context.selection;\n      if (!selection || !(0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isSelectionCollapsed)(selection))\n        return !1;\n      const selectionStartPoint = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.getSelectionStartPoint)(selection), focusTextBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusTextBlock)(snapshot);\n      if (!focusTextBlock)\n        return !1;\n      const blockEndPoint = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.getBlockEndPoint)({\n        context: snapshot.context,\n        block: focusTextBlock\n      }), newTextBlockSelection = {\n        anchor: selectionStartPoint,\n        focus: blockEndPoint\n      }, newTextBlock = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.parseBlock)({\n        block: (0,_chunks_es_util_slice_text_block_js__WEBPACK_IMPORTED_MODULE_32__.sliceTextBlock)({\n          context: {\n            ...snapshot.context,\n            selection: newTextBlockSelection\n          },\n          block: focusTextBlock.node\n        }),\n        context: snapshot.context,\n        options: {\n          removeUnusedMarkDefs: !0,\n          validateFields: !1\n        }\n      });\n      return newTextBlock ? {\n        newTextBlock,\n        newTextBlockSelection\n      } : !1;\n    },\n    actions: [(_, {\n      newTextBlock,\n      newTextBlockSelection\n    }) => (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_16__.isSelectionCollapsed)(newTextBlockSelection) ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"insert.block\",\n      block: newTextBlock,\n      placement: \"after\",\n      select: \"start\"\n    })] : [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"delete\",\n      at: newTextBlockSelection\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n      type: \"insert.block\",\n      block: newTextBlock,\n      placement: \"after\",\n      select: \"start\"\n    })]]\n  })\n], abstractStyleBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"style.add\",\n  guard: ({\n    snapshot\n  }) => ({\n    selectedTextBlocks: (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getSelectedTextBlocks)(snapshot)\n  }),\n  actions: [({\n    event\n  }, {\n    selectedTextBlocks\n  }) => selectedTextBlocks.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"block.set\",\n    at: block.path,\n    props: {\n      style: event.style\n    }\n  }))]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"style.remove\",\n  guard: ({\n    snapshot\n  }) => ({\n    selectedTextBlocks: (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getSelectedTextBlocks)(snapshot)\n  }),\n  actions: [(_, {\n    selectedTextBlocks\n  }) => selectedTextBlocks.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"block.unset\",\n    at: block.path,\n    props: [\"style\"]\n  }))]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"style.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isActiveStyle)(event.style)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"style.remove\",\n    style: event.style\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"style.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => !(0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isActiveStyle)(event.style)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"style.add\",\n    style: event.style\n  })]]\n})], abstractBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"clipboard.copy\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusSpan = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusSpan)(snapshot), selectionCollapsed = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionCollapsed)(snapshot);\n    return focusSpan && selectionCollapsed;\n  },\n  actions: []\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"clipboard.copy\",\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"serialize\",\n    originEvent: event\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"clipboard.cut\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusSpan = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusSpan)(snapshot), selectionCollapsed = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionCollapsed)(snapshot);\n    return focusSpan && selectionCollapsed;\n  },\n  actions: []\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"clipboard.cut\",\n  guard: ({\n    snapshot\n  }) => snapshot.context.selection ? {\n    selection: snapshot.context.selection\n  } : !1,\n  actions: [({\n    event\n  }, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"serialize\",\n    originEvent: event\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete\",\n    at: selection\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"drag.dragstart\",\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"serialize\",\n    originEvent: event\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"clipboard.paste\",\n  guard: ({\n    snapshot\n  }) => snapshot.context.selection && (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.isSelectionExpanded)(snapshot) ? {\n    selection: snapshot.context.selection\n  } : !1,\n  actions: [({\n    event\n  }, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"delete\",\n    at: selection\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"deserialize\",\n    originEvent: event\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"clipboard.paste\",\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"deserialize\",\n    originEvent: event\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.defineBehavior)({\n  on: \"input.*\",\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_21__.raise)({\n    type: \"deserialize\",\n    originEvent: event\n  })]]\n}), ...abstractAnnotationBehaviors, ...abstractDecoratorBehaviors, ...abstractDeleteBehaviors, ...abstractDeserializeBehaviors, ...abstractInsertBehaviors, ...abstractKeyboardBehaviors, ...abstractListItemBehaviors, ...abstractMoveBehaviors, ...abstractStyleBehaviors, ...abstractSelectBehaviors, ...abstractSerializeBehaviors, ...abstractSplitBehaviors];\nfunction isSyntheticBehaviorEvent(event) {\n  return !isCustomBehaviorEvent(event) && !isNativeBehaviorEvent(event) && !isAbstractBehaviorEvent(event);\n}\nconst abstractBehaviorEventTypes = [\"annotation.set\", \"annotation.toggle\", \"decorator.toggle\", \"delete.backward\", \"delete.block\", \"delete.child\", \"delete.forward\", \"delete.text\", \"deserialize\", \"deserialize.data\", \"deserialization.success\", \"deserialization.failure\", \"insert.blocks\", \"insert.break\", \"insert.inline object\", \"insert.soft break\", \"insert.span\", \"list item.add\", \"list item.remove\", \"list item.toggle\", \"move.block down\", \"move.block up\", \"select.block\", \"select.previous block\", \"select.next block\", \"serialize\", \"serialize.data\", \"serialization.success\", \"serialization.failure\", \"split\", \"style.add\", \"style.remove\", \"style.toggle\"];\nfunction isAbstractBehaviorEvent(event) {\n  return abstractBehaviorEventTypes.includes(event.type);\n}\nconst nativeBehaviorEventTypes = [\"clipboard.copy\", \"clipboard.cut\", \"clipboard.paste\", \"drag.dragstart\", \"drag.drag\", \"drag.dragend\", \"drag.dragenter\", \"drag.dragover\", \"drag.dragleave\", \"drag.drop\", \"input.*\", \"keyboard.keydown\", \"keyboard.keyup\", \"mouse.click\"];\nfunction isNativeBehaviorEvent(event) {\n  return nativeBehaviorEventTypes.includes(event.type);\n}\nfunction isCustomBehaviorEvent(event) {\n  return event.type.startsWith(\"custom.\");\n}\nconst debug$6 = debugWithName(\"behaviors:event\");\nfunction eventCategory(event) {\n  return isNativeBehaviorEvent(event) ? \"native\" : isAbstractBehaviorEvent(event) ? \"synthetic\" : isCustomBehaviorEvent(event) ? \"custom\" : \"synthetic\";\n}\nfunction performEvent({\n  mode,\n  behaviors,\n  remainingEventBehaviors,\n  event,\n  editor,\n  keyGenerator,\n  schema,\n  getSnapshot,\n  nativeEvent,\n  sendBack\n}) {\n  mode === \"send\" && !isNativeBehaviorEvent(event) && createUndoStep(editor), debug$6(`(${mode}:${eventCategory(event)})`, JSON.stringify(event, null, 2));\n  const eventBehaviors = [...remainingEventBehaviors, ...abstractBehaviors].filter((behavior) => {\n    if (behavior.on === \"*\")\n      return !0;\n    const [listenedNamespace] = behavior.on.includes(\"*\") && behavior.on.includes(\".\") ? behavior.on.split(\".\") : [void 0], [eventNamespace] = event.type.includes(\".\") ? event.type.split(\".\") : [void 0];\n    return listenedNamespace !== void 0 && eventNamespace !== void 0 && listenedNamespace === eventNamespace || listenedNamespace !== void 0 && eventNamespace === void 0 && listenedNamespace === event.type ? !0 : behavior.on === event.type;\n  });\n  if (eventBehaviors.length === 0 && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault(), mode === \"send\" && clearUndoStep(editor), withPerformingBehaviorOperation(editor, () => {\n      debug$6(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2)), performOperation({\n        context: {\n          keyGenerator,\n          schema\n        },\n        operation: {\n          ...event,\n          editor\n        }\n      });\n    }), editor.onChange();\n    return;\n  }\n  const guardSnapshot = getSnapshot();\n  let nativeEventPrevented = !1, defaultBehaviorOverwritten = !1, eventBehaviorIndex = -1;\n  for (const eventBehavior of eventBehaviors) {\n    eventBehaviorIndex++;\n    let shouldRun = !1;\n    try {\n      shouldRun = eventBehavior.guard === void 0 || eventBehavior.guard({\n        snapshot: guardSnapshot,\n        event,\n        dom: createEditorDom(sendBack, editor)\n      });\n    } catch (error) {\n      console.error(new Error(`Evaluating guard for \"${event.type}\" failed due to: ${error.message}`));\n    }\n    if (!shouldRun)\n      continue;\n    defaultBehaviorOverwritten = !0, eventBehavior.actions.length === 0 && (nativeEventPrevented = !0);\n    let actionSetIndex = -1;\n    for (const actionSet of eventBehavior.actions) {\n      actionSetIndex++;\n      const actionsSnapshot = getSnapshot();\n      let actions = [];\n      try {\n        actions = actionSet({\n          snapshot: actionsSnapshot,\n          event,\n          dom: createEditorDom(sendBack, editor)\n        }, shouldRun);\n      } catch (error) {\n        console.error(new Error(`Evaluating actions for \"${event.type}\" failed due to: ${error.message}`));\n      }\n      if (actions.length === 0)\n        continue;\n      nativeEventPrevented = actions.some((action) => action.type === \"raise\" || action.type === \"execute\") || !actions.some((action) => action.type === \"forward\");\n      let undoStepCreated = !1;\n      actionSetIndex > 0 && (createUndoStep(editor), undoStepCreated = !0), !undoStepCreated && actions.some((action) => action.type === \"execute\") && (createUndoStep(editor), undoStepCreated = !0);\n      const actionTypes = actions.map((action) => action.type), uniqueActionTypes = new Set(actionTypes), raiseGroup = actionTypes.length > 1 && uniqueActionTypes.size === 1 && uniqueActionTypes.has(\"raise\"), executeGroup = actionTypes.length > 1 && uniqueActionTypes.size === 1 && uniqueActionTypes.has(\"execute\");\n      withoutNormalizingConditional(editor, () => raiseGroup || executeGroup, () => {\n        for (const action of actions) {\n          if (action.type === \"effect\") {\n            try {\n              action.effect({\n                send: sendBack\n              });\n            } catch (error) {\n              console.error(new Error(`Executing effect as a result of \"${event.type}\" failed due to: ${error.message}`));\n            }\n            continue;\n          }\n          if (action.type === \"forward\") {\n            const remainingEventBehaviors2 = eventBehaviors.slice(eventBehaviorIndex + 1);\n            performEvent({\n              mode: mode === \"execute\" ? \"execute\" : \"forward\",\n              behaviors,\n              remainingEventBehaviors: remainingEventBehaviors2,\n              event: action.event,\n              editor,\n              keyGenerator,\n              schema,\n              getSnapshot,\n              nativeEvent,\n              sendBack\n            });\n            continue;\n          }\n          if (action.type === \"raise\") {\n            performEvent({\n              mode: mode === \"execute\" ? \"execute\" : \"raise\",\n              behaviors,\n              remainingEventBehaviors: mode === \"execute\" ? remainingEventBehaviors : behaviors,\n              event: action.event,\n              editor,\n              keyGenerator,\n              schema,\n              getSnapshot,\n              nativeEvent,\n              sendBack\n            });\n            continue;\n          }\n          performEvent({\n            mode: \"execute\",\n            behaviors,\n            remainingEventBehaviors: [],\n            event: action.event,\n            editor,\n            keyGenerator,\n            schema,\n            getSnapshot,\n            nativeEvent: void 0,\n            sendBack\n          });\n        }\n      }), undoStepCreated && clearUndoStep(editor);\n    }\n    break;\n  }\n  !defaultBehaviorOverwritten && isSyntheticBehaviorEvent(event) ? (nativeEvent?.preventDefault(), mode === \"send\" && clearUndoStep(editor), withPerformingBehaviorOperation(editor, () => {\n    debug$6(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2)), performOperation({\n      context: {\n        keyGenerator,\n        schema\n      },\n      operation: {\n        ...event,\n        editor\n      }\n    });\n  }), editor.onChange()) : nativeEventPrevented && nativeEvent?.preventDefault();\n}\nfunction sortByPriority(items) {\n  if (items.length === 0)\n    return [];\n  const itemsWithPriority = items.filter((item) => item.priority !== void 0), itemsWithoutPriority = items.filter((item) => item.priority === void 0);\n  if (itemsWithPriority.length === 0)\n    return items;\n  const itemsByPriorityId = new Map(itemsWithPriority.map((item) => [item.priority.id, item])), graph = /* @__PURE__ */ new Map(), inDegree = /* @__PURE__ */ new Map();\n  function ensureNode(id) {\n    graph.has(id) || (graph.set(id, /* @__PURE__ */ new Set()), inDegree.set(id, 0));\n  }\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id;\n    ensureNode(id);\n  }\n  function addEdge(fromId, toId) {\n    !graph.has(fromId) || !graph.has(toId) || (graph.get(fromId)?.add(toId), inDegree.set(toId, (inDegree.get(toId) ?? 0) + 1));\n  }\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id, visited = /* @__PURE__ */ new Set();\n    let ref = item.priority.reference;\n    for (; ref; ) {\n      const refId = ref.priority.id;\n      if (ensureNode(refId), visited.has(refId))\n        throw new Error(\"Circular dependency detected in priorities\");\n      visited.add(refId), ref.importance === \"higher\" ? addEdge(id, refId) : addEdge(refId, id), ref = ref.priority.reference;\n    }\n  }\n  const queue = [];\n  for (const [id, degree] of inDegree)\n    degree === 0 && queue.push(id);\n  const result = [];\n  for (; queue.length > 0; ) {\n    const currentId = queue.shift(), currentItem = itemsByPriorityId.get(currentId);\n    currentItem && result.push(currentItem);\n    for (const neighborId of graph.get(currentId) ?? []) {\n      const newDegree = (inDegree.get(neighborId) ?? 0) - 1;\n      inDegree.set(neighborId, newDegree), newDegree === 0 && queue.push(neighborId);\n    }\n  }\n  for (const item of itemsWithPriority)\n    result.includes(item) || result.push(item);\n  return [...result, ...itemsWithoutPriority];\n}\nfunction createEditorSnapshot({\n  converters,\n  editor,\n  keyGenerator,\n  readOnly,\n  schema\n}) {\n  const selection = editor.selection ? slateRangeToSelection({\n    schema,\n    editor,\n    range: editor.selection\n  }) : null, context = {\n    converters,\n    keyGenerator,\n    readOnly,\n    schema,\n    selection,\n    value: editor.value\n  };\n  return {\n    blockIndexMap: editor.blockIndexMap,\n    context,\n    decoratorState: editor.decoratorState\n  };\n}\nconst debug$5 = debugWithName(\"editor machine\");\nfunction rerouteExternalBehaviorEvent({\n  event,\n  slateEditor\n}) {\n  switch (event.type) {\n    case \"blur\":\n      return {\n        type: \"blur\",\n        editor: slateEditor\n      };\n    case \"focus\":\n      return {\n        type: \"focus\",\n        editor: slateEditor\n      };\n    case \"insert.block object\":\n      return {\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.block\",\n          block: {\n            _type: event.blockObject.name,\n            ...event.blockObject.value ?? {}\n          },\n          placement: event.placement\n        },\n        editor: slateEditor\n      };\n    default:\n      return {\n        type: \"behavior event\",\n        behaviorEvent: event,\n        editor: slateEditor\n      };\n  }\n}\nconst editorMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_24__.setup)({\n  types: {\n    context: {},\n    events: {},\n    emitted: {},\n    input: {},\n    tags: {}\n  },\n  actions: {\n    \"add behavior to context\": (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n      behaviors: ({\n        context,\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_24__.assertEvent)(event, \"add behavior\"), /* @__PURE__ */ new Set([...context.behaviors, event.behaviorConfig])),\n      behaviorsSorted: !1\n    }),\n    \"remove behavior from context\": (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n      behaviors: ({\n        context,\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_24__.assertEvent)(event, \"remove behavior\"), context.behaviors.delete(event.behaviorConfig), /* @__PURE__ */ new Set([...context.behaviors]))\n    }),\n    \"emit patch event\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_24__.assertEvent)(event, \"internal.patch\"), event)),\n    \"emit mutation event\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_24__.assertEvent)(event, \"mutation\"), event)),\n    \"emit read only\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)({\n      type: \"read only\"\n    }),\n    \"emit editable\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)({\n      type: \"editable\"\n    }),\n    \"defer event\": (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n      pendingEvents: ({\n        context,\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_24__.assertEvent)(event, [\"internal.patch\", \"mutation\"]), [...context.pendingEvents, event])\n    }),\n    \"emit pending events\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.e)(({\n      context,\n      enqueue\n    }) => {\n      for (const event of context.pendingEvents)\n        enqueue.emit(event);\n    }),\n    \"emit ready\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)({\n      type: \"ready\"\n    }),\n    \"clear pending events\": (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n      pendingEvents: []\n    }),\n    \"defer incoming patches\": (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n      pendingIncomingPatchesEvents: ({\n        context,\n        event\n      }) => event.type === \"patches\" ? [...context.pendingIncomingPatchesEvents, event] : context.pendingIncomingPatchesEvents\n    }),\n    \"emit pending incoming patches\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.e)(({\n      context,\n      enqueue\n    }) => {\n      for (const event of context.pendingIncomingPatchesEvents)\n        enqueue.emit(event);\n    }),\n    \"clear pending incoming patches\": (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n      pendingIncomingPatchesEvents: []\n    }),\n    \"handle blur\": ({\n      event\n    }) => {\n      (0,xstate__WEBPACK_IMPORTED_MODULE_24__.assertEvent)(event, \"blur\");\n      try {\n        slate_react__WEBPACK_IMPORTED_MODULE_22__.ReactEditor.blur(event.editor);\n      } catch (error) {\n        console.error(new Error(`Failed to blur editor: ${error.message}`));\n      }\n    },\n    \"handle focus\": ({\n      context\n    }) => {\n      if (!context.slateEditor) {\n        console.error(\"No Slate editor found to focus\");\n        return;\n      }\n      try {\n        const currentSelection = context.slateEditor.selection;\n        slate_react__WEBPACK_IMPORTED_MODULE_22__.ReactEditor.focus(context.slateEditor), currentSelection && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(context.slateEditor, currentSelection);\n      } catch (error) {\n        console.error(new Error(`Failed to focus editor: ${error.message}`));\n      }\n    },\n    \"handle behavior event\": ({\n      context,\n      event,\n      self\n    }) => {\n      (0,xstate__WEBPACK_IMPORTED_MODULE_24__.assertEvent)(event, [\"behavior event\"]);\n      try {\n        const behaviors = [...context.behaviors.values()].map((config) => config.behavior);\n        performEvent({\n          mode: \"send\",\n          behaviors,\n          remainingEventBehaviors: behaviors,\n          event: event.behaviorEvent,\n          editor: event.editor,\n          keyGenerator: context.keyGenerator,\n          schema: context.schema,\n          getSnapshot: () => createEditorSnapshot({\n            converters: [...context.converters],\n            editor: event.editor,\n            keyGenerator: context.keyGenerator,\n            readOnly: self.getSnapshot().matches({\n              \"edit mode\": \"read only\"\n            }),\n            schema: context.schema\n          }),\n          nativeEvent: event.nativeEvent,\n          sendBack: (eventSentBack) => {\n            if (eventSentBack.type === \"set drag ghost\") {\n              self.send(eventSentBack);\n              return;\n            }\n            self.send(rerouteExternalBehaviorEvent({\n              event: eventSentBack,\n              slateEditor: event.editor\n            }));\n          }\n        });\n      } catch (error) {\n        console.error(new Error(`Raising \"${event.behaviorEvent.type}\" failed due to: ${error.message}`));\n      }\n    },\n    \"sort behaviors\": (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n      behaviors: ({\n        context\n      }) => context.behaviorsSorted ? context.behaviors : new Set(sortByPriority([...context.behaviors.values()])),\n      behaviorsSorted: !0\n    })\n  },\n  guards: {\n    \"slate is busy\": ({\n      context\n    }) => context.slateEditor ? context.slateEditor.operations.length > 0 : !1\n  }\n}).createMachine({\n  id: \"editor\",\n  context: ({\n    input\n  }) => ({\n    behaviors: new Set(coreBehaviorsConfig),\n    behaviorsSorted: !1,\n    converters: new Set(input.converters ?? []),\n    getLegacySchema: input.getLegacySchema,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    pendingIncomingPatchesEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? !1,\n    maxBlocks: input.maxBlocks,\n    initialValue: input.initialValue\n  }),\n  on: {\n    \"add behavior\": {\n      actions: \"add behavior to context\"\n    },\n    \"remove behavior\": {\n      actions: \"remove behavior from context\"\n    },\n    \"update maxBlocks\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n        maxBlocks: ({\n          event\n        }) => event.maxBlocks\n      })\n    },\n    \"update selection\": {\n      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n        selection: ({\n          event\n        }) => event.selection\n      }), (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n        event\n      }) => ({\n        ...event,\n        type: \"selection\"\n      }))]\n    },\n    \"set drag ghost\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n        dragGhost: ({\n          event\n        }) => event.ghost\n      })\n    }\n  },\n  type: \"parallel\",\n  states: {\n    \"edit mode\": {\n      initial: \"read only\",\n      states: {\n        \"read only\": {\n          initial: \"determine initial edit mode\",\n          on: {\n            \"behavior event\": {\n              actions: [\"sort behaviors\", \"handle behavior event\"],\n              guard: ({\n                event\n              }) => event.behaviorEvent.type === \"clipboard.copy\" || event.behaviorEvent.type === \"mouse.click\" || event.behaviorEvent.type === \"serialize\" || event.behaviorEvent.type === \"serialization.failure\" || event.behaviorEvent.type === \"serialization.success\" || event.behaviorEvent.type === \"select\"\n            }\n          },\n          states: {\n            \"determine initial edit mode\": {\n              entry: [() => {\n                debug$5(\"entry: edit mode->read only->determine initial edit mode\");\n              }],\n              exit: [() => {\n                debug$5(\"exit: edit mode->read only->determine initial edit mode\");\n              }],\n              on: {\n                \"done syncing value\": [{\n                  target: \"#editor.edit mode.read only.read only\",\n                  guard: ({\n                    context\n                  }) => context.initialReadOnly\n                }, {\n                  target: \"#editor.edit mode.editable\"\n                }]\n              }\n            },\n            \"read only\": {\n              entry: [() => {\n                debug$5(\"entry: edit mode->read only->read only\");\n              }],\n              exit: [() => {\n                debug$5(\"exit: edit mode->read only->read only\");\n              }],\n              on: {\n                \"update readOnly\": {\n                  guard: ({\n                    event\n                  }) => !event.readOnly,\n                  target: \"#editor.edit mode.editable\",\n                  actions: [\"emit editable\"]\n                }\n              }\n            }\n          }\n        },\n        editable: {\n          on: {\n            \"update readOnly\": {\n              guard: ({\n                event\n              }) => event.readOnly,\n              target: \"#editor.edit mode.read only.read only\",\n              actions: [\"emit read only\"]\n            },\n            \"behavior event\": {\n              actions: [\"sort behaviors\", \"handle behavior event\"]\n            },\n            blur: {\n              actions: \"handle blur\"\n            },\n            focus: {\n              target: \".focusing\",\n              actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n                slateEditor: ({\n                  event\n                }) => event.editor\n              })]\n            }\n          },\n          initial: \"idle\",\n          states: {\n            idle: {\n              entry: [() => {\n                debug$5(\"entry: edit mode->editable->idle\");\n              }],\n              exit: [() => {\n                debug$5(\"exit: edit mode->editable-idle\");\n              }],\n              on: {\n                dragstart: {\n                  actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n                    internalDrag: ({\n                      event\n                    }) => ({\n                      origin: event.origin\n                    })\n                  })],\n                  target: \"dragging internally\"\n                }\n              }\n            },\n            focusing: {\n              initial: \"checking if busy\",\n              states: {\n                \"checking if busy\": {\n                  entry: [() => {\n                    debug$5(\"entry: edit mode->editable->focusing->checking if busy\");\n                  }],\n                  exit: [() => {\n                    debug$5(\"exit: edit mode->editable->focusing->checking if busy\");\n                  }],\n                  always: [{\n                    guard: \"slate is busy\",\n                    target: \"busy\"\n                  }, {\n                    target: \"#editor.edit mode.editable.idle\",\n                    actions: [\"handle focus\"]\n                  }]\n                },\n                busy: {\n                  entry: [() => {\n                    debug$5(\"entry: edit mode->editable->focusing-busy\");\n                  }],\n                  exit: [() => {\n                    debug$5(\"exit: edit mode->editable->focusing->busy\");\n                  }],\n                  after: {\n                    10: {\n                      target: \"checking if busy\"\n                    }\n                  }\n                }\n              }\n            },\n            \"dragging internally\": {\n              entry: [() => {\n                debug$5(\"entry: edit mode->editable->dragging internally\");\n              }],\n              exit: [() => {\n                debug$5(\"exit: edit mode->editable->dragging internally\");\n              }, ({\n                context\n              }) => {\n                if (context.dragGhost)\n                  try {\n                    context.dragGhost.parentNode?.removeChild(context.dragGhost);\n                  } catch (error) {\n                    console.error(new Error(`Removing the drag ghost failed due to: ${error.message}`));\n                  }\n              }, (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n                dragGhost: void 0\n              }), (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n                internalDrag: void 0\n              })],\n              tags: [\"dragging internally\"],\n              on: {\n                dragend: {\n                  target: \"idle\"\n                },\n                drop: {\n                  target: \"idle\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    setup: {\n      initial: \"setting up\",\n      states: {\n        \"setting up\": {\n          entry: [() => {\n            debug$5(\"entry: setup->setting up\");\n          }],\n          exit: [() => {\n            debug$5(\"exit: setup->setting up\");\n          }, \"emit ready\", \"emit pending incoming patches\", \"clear pending incoming patches\"],\n          on: {\n            \"internal.patch\": {\n              actions: \"defer event\"\n            },\n            mutation: {\n              actions: \"defer event\"\n            },\n            \"done syncing value\": {\n              target: \"set up\"\n            },\n            patches: {\n              actions: [\"defer incoming patches\"]\n            }\n          }\n        },\n        \"set up\": {\n          type: \"parallel\",\n          states: {\n            \"value sync\": {\n              initial: \"idle\",\n              states: {\n                idle: {\n                  entry: [() => {\n                    debug$5(\"entry: setup->set up->value sync->idle\");\n                  }],\n                  exit: [() => {\n                    debug$5(\"exit: setup->set up->value sync->idle\");\n                  }],\n                  on: {\n                    patches: {\n                      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n                        event\n                      }) => event)]\n                    },\n                    \"syncing value\": {\n                      target: \"syncing value\"\n                    }\n                  }\n                },\n                \"syncing value\": {\n                  entry: [() => {\n                    debug$5(\"entry: setup->set up->value sync->syncing value\");\n                  }],\n                  exit: [() => {\n                    debug$5(\"exit: setup->set up->value sync->syncing value\");\n                  }, \"emit pending incoming patches\", \"clear pending incoming patches\"],\n                  on: {\n                    patches: {\n                      actions: [\"defer incoming patches\"]\n                    },\n                    \"done syncing value\": {\n                      target: \"idle\"\n                    }\n                  }\n                }\n              }\n            },\n            writing: {\n              initial: \"pristine\",\n              states: {\n                pristine: {\n                  initial: \"idle\",\n                  states: {\n                    idle: {\n                      entry: [() => {\n                        debug$5(\"entry: setup->set up->writing->pristine->idle\");\n                      }],\n                      exit: [() => {\n                        debug$5(\"exit: setup->set up->writing->pristine->idle\");\n                      }],\n                      on: {\n                        normalizing: {\n                          target: \"normalizing\"\n                        },\n                        \"internal.patch\": {\n                          actions: \"defer event\",\n                          target: \"#editor.setup.set up.writing.dirty\"\n                        },\n                        mutation: {\n                          actions: \"defer event\",\n                          target: \"#editor.setup.set up.writing.dirty\"\n                        }\n                      }\n                    },\n                    normalizing: {\n                      entry: [() => {\n                        debug$5(\"entry: setup->set up->writing->pristine->normalizing\");\n                      }],\n                      exit: [() => {\n                        debug$5(\"exit: setup->set up->writing->pristine->normalizing\");\n                      }],\n                      on: {\n                        \"done normalizing\": {\n                          target: \"idle\"\n                        },\n                        \"internal.patch\": {\n                          actions: \"defer event\"\n                        },\n                        mutation: {\n                          actions: \"defer event\"\n                        }\n                      }\n                    }\n                  }\n                },\n                dirty: {\n                  entry: [() => {\n                    debug$5(\"entry: setup->set up->writing->dirty\");\n                  }, \"emit pending events\", \"clear pending events\"],\n                  exit: [() => {\n                    debug$5(\"exit: setup->set up->writing->dirty\");\n                  }],\n                  on: {\n                    \"internal.patch\": {\n                      actions: \"emit patch event\"\n                    },\n                    mutation: {\n                      actions: \"emit mutation event\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}), debug$4 = debugWithName(\"mutation-machine\"), mutationMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_24__.setup)({\n  types: {\n    context: {},\n    events: {},\n    input: {},\n    emitted: {}\n  },\n  actions: {\n    \"assign readOnly\": (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n      readOnly: ({\n        context,\n        event\n      }) => event.type === \"update readOnly\" ? event.readOnly : context.readOnly\n    }),\n    \"emit patch\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_24__.assertEvent)(event, \"patch\"), {\n      type: \"patch\",\n      patch: event.patch\n    })),\n    \"emit has pending mutations\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)({\n      type: \"has pending mutations\"\n    }),\n    \"emit mutations\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.e)(({\n      context,\n      enqueue\n    }) => {\n      for (const bulk of context.pendingMutations)\n        enqueue.emit({\n          type: \"mutation\",\n          patches: bulk.patches,\n          snapshot: bulk.value\n        });\n    }),\n    \"clear pending mutations\": (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n      pendingMutations: []\n    }),\n    \"defer mutation\": (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n      pendingMutations: ({\n        context,\n        event\n      }) => {\n        if ((0,xstate__WEBPACK_IMPORTED_MODULE_24__.assertEvent)(event, \"patch\"), context.pendingMutations.length === 0)\n          return [{\n            operationId: event.operationId,\n            value: event.value,\n            patches: [event.patch]\n          }];\n        const lastBulk = context.pendingMutations.at(-1);\n        return lastBulk && lastBulk.operationId === event.operationId ? context.pendingMutations.slice(0, -1).concat({\n          value: event.value,\n          operationId: lastBulk.operationId,\n          patches: [...lastBulk.patches, event.patch]\n        }) : context.pendingMutations.concat({\n          value: event.value,\n          operationId: event.operationId,\n          patches: [event.patch]\n        });\n      }\n    }),\n    \"clear pending patch events\": (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n      pendingPatchEvents: []\n    }),\n    \"defer patch\": (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n      pendingPatchEvents: ({\n        context,\n        event\n      }) => event.type === \"patch\" ? [...context.pendingPatchEvents, event] : context.pendingPatchEvents\n    }),\n    \"emit pending patch events\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.e)(({\n      context,\n      enqueue\n    }) => {\n      for (const event of context.pendingPatchEvents)\n        enqueue.emit(event);\n    })\n  },\n  actors: {\n    \"type listener\": (0,xstate__WEBPACK_IMPORTED_MODULE_26__.fromCallback)(({\n      input,\n      sendBack\n    }) => {\n      const originalApply = input.slateEditor.apply;\n      return input.slateEditor.apply = (op) => {\n        op.type === \"insert_text\" || op.type === \"remove_text\" ? sendBack({\n          type: \"typing\"\n        }) : sendBack({\n          type: \"not typing\"\n        }), originalApply(op);\n      }, () => {\n        input.slateEditor.apply = originalApply;\n      };\n    }),\n    \"mutation interval\": (0,xstate__WEBPACK_IMPORTED_MODULE_26__.fromCallback)(({\n      sendBack\n    }) => {\n      const interval = setInterval(() => {\n        sendBack({\n          type: \"emit changes\"\n        });\n      },  false ? 0 : 1e3);\n      return () => {\n        clearInterval(interval);\n      };\n    })\n  },\n  guards: {\n    \"is read-only\": ({\n      context\n    }) => context.readOnly,\n    \"slate is normalizing\": ({\n      context\n    }) => slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isNormalizing(context.slateEditor)\n  },\n  delays: {\n    \"type debounce\": 250\n  }\n}).createMachine({\n  id: \"mutation\",\n  context: ({\n    input\n  }) => ({\n    pendingMutations: [],\n    pendingPatchEvents: [],\n    readOnly: input.readOnly,\n    schema: input.schema,\n    slateEditor: input.slateEditor\n  }),\n  on: {\n    \"update readOnly\": {\n      actions: [\"assign readOnly\"]\n    }\n  },\n  type: \"parallel\",\n  states: {\n    typing: {\n      initial: \"idle\",\n      invoke: {\n        src: \"type listener\",\n        input: ({\n          context\n        }) => ({\n          slateEditor: context.slateEditor\n        })\n      },\n      states: {\n        idle: {\n          entry: [() => {\n            debug$4(\"entry: typing->idle\");\n          }],\n          exit: [() => {\n            debug$4(\"exit: typing->idle\"), debug$4(\"entry: typing->typing\");\n          }],\n          on: {\n            typing: {\n              target: \"typing\"\n            }\n          }\n        },\n        typing: {\n          after: {\n            \"type debounce\": {\n              target: \"idle\",\n              actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_27__.r)({\n                type: \"emit changes\"\n              }), () => {\n                debug$4(\"exit: typing->typing\");\n              }]\n            }\n          },\n          on: {\n            \"not typing\": {\n              target: \"idle\",\n              actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_27__.r)({\n                type: \"emit changes\"\n              })]\n            },\n            typing: {\n              target: \"typing\",\n              reenter: !0\n            }\n          }\n        }\n      }\n    },\n    mutations: {\n      initial: \"idle\",\n      states: {\n        idle: {\n          entry: [() => {\n            debug$4(\"entry: mutations->idle\");\n          }],\n          exit: [() => {\n            debug$4(\"exit: mutations->idle\");\n          }],\n          on: {\n            patch: [{\n              guard: \"is read-only\",\n              actions: [\"defer patch\", \"defer mutation\"],\n              target: \"has pending mutations\"\n            }, {\n              actions: [\"emit patch\", \"defer mutation\"],\n              target: \"has pending mutations\"\n            }]\n          }\n        },\n        \"has pending mutations\": {\n          entry: [() => {\n            debug$4(\"entry: mutations->has pending mutations\");\n          }, \"emit has pending mutations\"],\n          exit: [() => {\n            debug$4(\"exit: mutations->has pending mutations\");\n          }],\n          invoke: {\n            src: \"mutation interval\"\n          },\n          on: {\n            \"emit changes\": {\n              guard: (0,xstate__WEBPACK_IMPORTED_MODULE_27__.d)([(0,xstate__WEBPACK_IMPORTED_MODULE_27__.n)(\"is read-only\"), \"slate is normalizing\"]),\n              target: \"idle\",\n              actions: [\"emit pending patch events\", \"clear pending patch events\", \"emit mutations\", \"clear pending mutations\"]\n            },\n            patch: [{\n              guard: \"is read-only\",\n              actions: [\"defer patch\", \"defer mutation\"]\n            }, {\n              actions: [\"emit patch\", \"defer mutation\"]\n            }]\n          }\n        }\n      }\n    }\n  }\n}), debug$3 = debugWithName(\"API:editable\");\nfunction createEditableAPI(editor, editorActor) {\n  const types = editorActor.getSnapshot().context.schema;\n  return {\n    focus: () => {\n      editorActor.send({\n        type: \"focus\",\n        editor\n      });\n    },\n    blur: () => {\n      editorActor.send({\n        type: \"blur\",\n        editor\n      });\n    },\n    toggleMark: (mark) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"decorator.toggle\",\n          decorator: mark\n        },\n        editor\n      });\n    },\n    toggleList: (listItem) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"list item.toggle\",\n          listItem\n        },\n        editor\n      });\n    },\n    toggleBlockStyle: (style) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"style.toggle\",\n          style\n        },\n        editor\n      });\n    },\n    isMarkActive: (mark) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor\n      });\n      return (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getActiveDecorators)(snapshot).includes(mark);\n    },\n    marks: () => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor\n      }), activeAnnotations = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getActiveAnnotationsMarks)(snapshot), activeDecorators = (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.getActiveDecorators)(snapshot);\n      return [...activeAnnotations, ...activeDecorators];\n    },\n    undo: () => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"history.undo\"\n        },\n        editor\n      });\n    },\n    redo: () => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"history.redo\"\n        },\n        editor\n      });\n    },\n    select: (selection) => {\n      const slateSelection = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection\n        },\n        blockIndexMap: editor.blockIndexMap\n      });\n      slateSelection ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slateSelection) : slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(editor), editor.onChange();\n    },\n    focusBlock: () => {\n      if (editor.selection) {\n        const block = slate__WEBPACK_IMPORTED_MODULE_14__.Node.descendant(editor, editor.selection.focus.path.slice(0, 1));\n        if (block)\n          return fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];\n      }\n    },\n    focusChild: () => {\n      if (editor.selection) {\n        const block = slate__WEBPACK_IMPORTED_MODULE_14__.Node.descendant(editor, editor.selection.focus.path.slice(0, 1));\n        if (block && editor.isTextBlock(block))\n          return fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0].children[editor.selection.focus.path[1]];\n      }\n    },\n    insertChild: (type, value) => {\n      if (type.name !== types.span.name)\n        return editorActor.send({\n          type: \"behavior event\",\n          behaviorEvent: {\n            type: \"insert.inline object\",\n            inlineObject: {\n              name: type.name,\n              value\n            }\n          },\n          editor\n        }), editor.selection ? slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection\n        })?.focus.path ?? [] : [];\n      if (!editor.selection)\n        throw new Error(\"The editor has no selection\");\n      const [focusBlock] = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n        at: editor.selection.focus.path.slice(0, 1),\n        match: (n) => n._type === types.block.name\n      }))[0] || [void 0];\n      if (!focusBlock)\n        throw new Error(\"No focused text block\");\n      if (type.name !== types.span.name && !types.inlineObjects.some((t) => t.name === type.name))\n        throw new Error(\"This type cannot be inserted as a child to a text block\");\n      const child = toSlateValue([{\n        _key: editorActor.getSnapshot().context.keyGenerator(),\n        _type: types.block.name,\n        children: [{\n          _key: editorActor.getSnapshot().context.keyGenerator(),\n          _type: type.name,\n          ...value || {}\n        }]\n      }], {\n        schemaTypes: editorActor.getSnapshot().context.schema\n      })[0].children[0], focusChildPath = editor.selection.focus.path.slice(0, 2), isSpanNode2 = child._type === types.span.name, focusNode = slate__WEBPACK_IMPORTED_MODULE_14__.Node.get(editor, focusChildPath);\n      return isSpanNode2 && focusNode._type !== types.span.name && (debug$3(\"Inserting span child next to inline object child, moving selection + 1\"), editor.move({\n        distance: 1,\n        unit: \"character\"\n      })), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, child, {\n        select: !0,\n        at: editor.selection\n      }), editor.onChange(), editor.selection ? slateRangeToSelection({\n        schema: editorActor.getSnapshot().context.schema,\n        editor,\n        range: editor.selection\n      })?.focus.path ?? [] : [];\n    },\n    insertBlock: (type, value) => (editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"insert.block\",\n        block: {\n          _type: type.name,\n          ...value || {}\n        },\n        placement: \"auto\"\n      },\n      editor\n    }), editor.selection ? slateRangeToSelection({\n      schema: editorActor.getSnapshot().context.schema,\n      editor,\n      range: editor.selection\n    })?.focus.path ?? [] : []),\n    hasBlockStyle: (style) => {\n      try {\n        return isStyleActive({\n          editor,\n          style\n        });\n      } catch {\n        return !1;\n      }\n    },\n    hasListStyle: (listItem) => {\n      try {\n        return isListItemActive({\n          editor,\n          listItem\n        });\n      } catch {\n        return !1;\n      }\n    },\n    isVoid: (element) => ![types.block.name, types.span.name].includes(element._type),\n    findByPath: (path) => {\n      const slatePath = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection: {\n            focus: {\n              path,\n              offset: 0\n            },\n            anchor: {\n              path,\n              offset: 0\n            }\n          }\n        },\n        blockIndexMap: editor.blockIndexMap\n      });\n      if (slatePath) {\n        const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, slatePath.focus.path.slice(0, 1));\n        if (block && blockPath && typeof block._key == \"string\") {\n          if (path.length === 1 && slatePath.focus.path.length === 1)\n            return [fromSlateValue([block], types.block.name)[0], [{\n              _key: block._key\n            }]];\n          const ptBlock = fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]];\n            if (ptChild)\n              return [ptChild, [{\n                _key: block._key\n              }, \"children\", {\n                _key: ptChild._key\n              }]];\n          }\n        }\n      }\n      return [void 0, void 0];\n    },\n    findDOMNode: (element) => {\n      let node;\n      try {\n        const [item] = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n          at: [],\n          match: (n) => n._key === element._key\n        }) || [])[0] || [void 0];\n        node = slate_react__WEBPACK_IMPORTED_MODULE_22__.ReactEditor.toDOMNode(editor, item);\n      } catch {\n      }\n      return node;\n    },\n    activeAnnotations: () => {\n      if (!editor.selection || editor.selection.focus.path.length < 2)\n        return [];\n      try {\n        const activeAnnotations = [], spans = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(node) && node.marks !== void 0 && Array.isArray(node.marks) && node.marks.length > 0\n        });\n        for (const [span, path] of spans) {\n          const [block] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, path, {\n            depth: 1\n          });\n          editor.isTextBlock(block) && block.markDefs?.forEach((def) => {\n            slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(span) && span.marks && Array.isArray(span.marks) && span.marks.includes(def._key) && activeAnnotations.push(def);\n          });\n        }\n        return activeAnnotations;\n      } catch {\n        return [];\n      }\n    },\n    isAnnotationActive: (annotationType) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor\n      });\n      return (0,_chunks_es_selector_is_active_style_js__WEBPACK_IMPORTED_MODULE_19__.isActiveAnnotation)(annotationType)(snapshot);\n    },\n    addAnnotation: (type, value) => {\n      const snapshotBefore = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor\n      }), selectedValueBefore = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getSelectedValue)(snapshotBefore), focusSpanBefore = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusSpan)(snapshotBefore), markDefsBefore = selectedValueBefore.flatMap((block) => (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(snapshotBefore.context, block) ? block.markDefs ?? [] : []);\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"annotation.add\",\n          annotation: {\n            name: type.name,\n            value: value ?? {}\n          }\n        },\n        editor\n      });\n      const snapshotAfter = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor\n      }), selectedValueAfter = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getSelectedValue)(snapshotAfter), focusBlockAfter = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusBlock)(snapshotAfter), focusSpanAfter = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_20__.getFocusSpan)(snapshotAfter), newMarkDefKeysOnFocusSpan = focusSpanAfter?.node.marks?.filter((mark) => !focusSpanBefore?.node.marks?.includes(mark) && !snapshotAfter.context.schema.decorators.map((decorator) => decorator.name).includes(mark)), markDefs = selectedValueAfter.flatMap((block) => (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)(snapshotAfter.context, block) ? block.markDefs?.map((markDef2) => ({\n        markDef: markDef2,\n        path: [{\n          _key: block._key\n        }, \"markDefs\", {\n          _key: markDef2._key\n        }]\n      })) ?? [] : []).filter((markDef2) => !markDefsBefore.some((markDefBefore) => markDefBefore._key === markDef2.markDef._key)), spanPath = focusSpanAfter?.path, markDef = markDefs.find((markDef2) => newMarkDefKeysOnFocusSpan?.some((mark) => mark === markDef2.markDef._key));\n      if (focusBlockAfter && spanPath && markDef)\n        return {\n          markDefPath: markDef.path,\n          markDefPaths: markDefs.map((markDef2) => markDef2.path),\n          spanPath\n        };\n    },\n    delete: (selection, options) => {\n      if (selection) {\n        const range = toSlateRange({\n          context: {\n            schema: editorActor.getSnapshot().context.schema,\n            value: editor.value,\n            selection\n          },\n          blockIndexMap: editor.blockIndexMap\n        });\n        if (!(range && range.anchor.path.length > 0 && range.focus.path.length > 0))\n          throw new Error(\"Invalid range\");\n        if (range) {\n          if (!options?.mode || options?.mode === \"selected\") {\n            debug$3(\"Deleting content in selection\"), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.delete(editor, {\n              at: range,\n              hanging: !0,\n              voids: !0\n            }), editor.onChange();\n            return;\n          }\n          if (options?.mode === \"blocks\" && (debug$3(\"Deleting blocks touched by selection\"), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n            at: range,\n            voids: !0,\n            match: (node) => editor.isTextBlock(node) || !editor.isTextBlock(node) && slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(node)\n          })), options?.mode === \"children\" && (debug$3(\"Deleting children touched by selection\"), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n            at: range,\n            voids: !0,\n            match: (node) => node._type === types.span.name || // Text children\n            !editor.isTextBlock(node) && slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(node)\n          })), editor.children.length === 0) {\n            const placeholderBlock = createPlaceholderBlock(editorActor.getSnapshot().context);\n            editor.children = [placeholderBlock], editor.value = [placeholderBlock], buildIndexMaps({\n              schema: editorActor.getSnapshot().context.schema,\n              value: editor.value\n            }, {\n              blockIndexMap: editor.blockIndexMap,\n              listIndexMap: editor.listIndexMap\n            });\n          }\n          editor.onChange();\n        }\n      }\n    },\n    removeAnnotation: (type) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"annotation.remove\",\n          annotation: {\n            name: type.name\n          }\n        },\n        editor\n      });\n    },\n    getSelection: () => {\n      let ptRange = null;\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);\n        if (existing)\n          return existing;\n        ptRange = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection\n        }), SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange);\n      }\n      return ptRange;\n    },\n    getValue: () => fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n    isCollapsedSelection: () => !!editor.selection && slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(editor.selection),\n    isExpandedSelection: () => !!editor.selection && slate__WEBPACK_IMPORTED_MODULE_14__.Range.isExpanded(editor.selection),\n    insertBreak: () => {\n      editor.insertBreak(), editor.onChange();\n    },\n    getFragment: () => fromSlateValue(editor.getFragment(), types.block.name),\n    isSelectionsOverlapping: (selectionA, selectionB) => {\n      const rangeA = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection: selectionA\n        },\n        blockIndexMap: editor.blockIndexMap\n      }), rangeB = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection: selectionB\n        },\n        blockIndexMap: editor.blockIndexMap\n      });\n      return slate__WEBPACK_IMPORTED_MODULE_14__.Range.isRange(rangeA) && slate__WEBPACK_IMPORTED_MODULE_14__.Range.isRange(rangeB) && slate__WEBPACK_IMPORTED_MODULE_14__.Range.includes(rangeA, rangeB);\n    }\n  };\n}\nconst relayMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_24__.setup)({\n  types: {\n    context: {},\n    events: {},\n    emitted: {}\n  }\n}).createMachine({\n  id: \"relay\",\n  context: {\n    prevSelection: null,\n    lastEventWasFocused: !1\n  },\n  on: {\n    focused: {\n      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n        lastEventWasFocused: !0\n      }), (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n        event\n      }) => event)]\n    },\n    selection: [{\n      guard: ({\n        context\n      }) => context.lastEventWasFocused,\n      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n        prevSelection: ({\n          event\n        }) => event.selection\n      }), (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n        event\n      }) => event), (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n        lastEventWasFocused: !1\n      })]\n    }, {\n      guard: ({\n        context,\n        event\n      }) => context.prevSelection !== event.selection,\n      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n        prevSelection: ({\n          event\n        }) => event.selection\n      }), (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n        event\n      }) => event), (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n        lastEventWasFocused: !1\n      })]\n    }],\n    \"*\": {\n      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n        event\n      }) => event), (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n        lastEventWasFocused: !1\n      })]\n    }\n  }\n});\nfunction validateValue(value, types, keyGenerator) {\n  let resolution = null, valid = !0;\n  const validChildTypes = [types.span.name, ...types.inlineObjects.map((t) => t.name)], validBlockTypes = [types.block.name, ...types.blockObjects.map((t) => t.name)];\n  return value === void 0 ? {\n    valid: !0,\n    resolution: null,\n    value\n  } : !Array.isArray(value) || value.length === 0 ? {\n    valid: !1,\n    resolution: {\n      patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.unset)([])],\n      description: \"Editor value must be an array of Portable Text blocks, or undefined.\",\n      action: \"Unset the value\",\n      item: value,\n      i18n: {\n        description: \"inputs.portable-text.invalid-value.not-an-array.description\",\n        action: \"inputs.portable-text.invalid-value.not-an-array.action\"\n      }\n    },\n    value\n  } : (value.some((blk, index) => {\n    if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_12__(blk))\n      return resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.unset)([index])],\n        description: `Block must be an object, got ${String(blk)}`,\n        action: \"Unset invalid item\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.not-an-object.description\",\n          action: \"inputs.portable-text.invalid-value.not-an-object.action\",\n          values: {\n            index\n          }\n        }\n      }, !0;\n    if (!blk._key || typeof blk._key != \"string\")\n      return resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.set)({\n          ...blk,\n          _key: keyGenerator()\n        }, [index])],\n        description: `Block at index ${index} is missing required _key.`,\n        action: \"Set the block with a random _key value\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-key.description\",\n          action: \"inputs.portable-text.invalid-value.missing-key.action\",\n          values: {\n            index\n          }\n        }\n      }, !0;\n    if (!blk._type || !validBlockTypes.includes(blk._type)) {\n      if (blk._type === \"block\") {\n        const currentBlockTypeName = types.block.name;\n        return resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.set)({\n            ...blk,\n            _type: currentBlockTypeName\n          }, [{\n            _key: blk._key\n          }])],\n          description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n          action: `Use type '${currentBlockTypeName}'`,\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.incorrect-block-type.description\",\n            action: \"inputs.portable-text.invalid-value.incorrect-block-type.action\",\n            values: {\n              key: blk._key,\n              expectedTypeName: currentBlockTypeName\n            }\n          }\n        }, !0;\n      }\n      return !blk._type && (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.isTextBlock)({\n        schema: types\n      }, {\n        ...blk,\n        _type: types.block.name\n      }) ? (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.set)({\n          ...blk,\n          _type: types.block.name\n        }, [{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n        action: `Use type '${types.block.name}'`,\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-block-type.description\",\n          action: \"inputs.portable-text.invalid-value.missing-block-type.action\",\n          values: {\n            key: blk._key,\n            expectedTypeName: types.block.name\n          }\n        }\n      }, !0) : blk._type ? (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.unset)([{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n        action: \"Remove the block\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.disallowed-type.description\",\n          action: \"inputs.portable-text.invalid-value.disallowed-type.action\",\n          values: {\n            key: blk._key,\n            typeName: blk._type\n          }\n        }\n      }, !0) : (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.unset)([{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' is missing an _type property`,\n        action: \"Remove the block\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-type.description\",\n          action: \"inputs.portable-text.invalid-value.missing-type.action\",\n          values: {\n            key: blk._key\n          }\n        }\n      }, !0);\n    }\n    if (blk._type === types.block.name) {\n      const textBlock = blk;\n      if (textBlock.children && !Array.isArray(textBlock.children))\n        return resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.set)({\n            children: []\n          }, [{\n            _key: textBlock._key\n          }])],\n          description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n          action: \"Reset the children property\",\n          item: textBlock,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.missing-or-invalid-children.description\",\n            action: \"inputs.portable-text.invalid-value.missing-or-invalid-children.action\",\n            values: {\n              key: textBlock._key\n            }\n          }\n        }, !0;\n      if (textBlock.children === void 0 || Array.isArray(textBlock.children) && textBlock.children.length === 0) {\n        const newSpan = {\n          _type: types.span.name,\n          _key: keyGenerator(),\n          text: \"\",\n          marks: []\n        };\n        return resolution = {\n          autoResolve: !0,\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.setIfMissing)([], [{\n            _key: blk._key\n          }, \"children\"]), (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.insert)([newSpan], \"after\", [{\n            _key: blk._key\n          }, \"children\", 0])],\n          description: `Children for text block with _key '${blk._key}' is empty.`,\n          action: \"Insert an empty text\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.empty-children.description\",\n            action: \"inputs.portable-text.invalid-value.empty-children.action\",\n            values: {\n              key: blk._key\n            }\n          }\n        }, !0;\n      }\n      const allUsedMarks = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_6__(lodash_flatten_js__WEBPACK_IMPORTED_MODULE_7__(textBlock.children.filter((cld) => cld._type === types.span.name).map((cld) => cld.marks || [])));\n      if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n        const unusedMarkDefs = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_6__(blk.markDefs.map((def) => def._key).filter((key) => !allUsedMarks.includes(key)));\n        if (unusedMarkDefs.length > 0)\n          return resolution = {\n            autoResolve: !0,\n            patches: unusedMarkDefs.map((markDefKey) => (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.unset)([{\n              _key: blk._key\n            }, \"markDefs\", {\n              _key: markDefKey\n            }])),\n            description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\", \")}.`,\n            action: \"Remove unused mark definition item\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.orphaned-mark-defs.description\",\n              action: \"inputs.portable-text.invalid-value.orphaned-mark-defs.action\",\n              values: {\n                key: blk._key,\n                unusedMarkDefs: unusedMarkDefs.map((m) => m.toString())\n              }\n            }\n          }, !0;\n      }\n      const orphanedMarks = allUsedMarks.filter((mark) => !types.decorators.map((dec) => dec.name).includes(mark)).filter((mark) => textBlock.markDefs === void 0 || !textBlock.markDefs.find((def) => def._key === mark));\n      if (orphanedMarks.length > 0) {\n        const spanChildren = textBlock.children.filter((cld) => cld._type === types.span.name && Array.isArray(cld.marks) && cld.marks.some((mark) => orphanedMarks.includes(mark)));\n        if (spanChildren) {\n          const orphaned = orphanedMarks.join(\", \");\n          return resolution = {\n            autoResolve: !0,\n            patches: spanChildren.map((child) => (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.set)((child.marks || []).filter((cMrk) => !orphanedMarks.includes(cMrk)), [{\n              _key: blk._key\n            }, \"children\", {\n              _key: child._key\n            }, \"marks\"])),\n            description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n            action: \"Remove invalid marks\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.orphaned-marks.description\",\n              action: \"inputs.portable-text.invalid-value.orphaned-marks.action\",\n              values: {\n                key: blk._key,\n                orphanedMarks: orphanedMarks.map((m) => m.toString())\n              }\n            }\n          }, !0;\n        }\n      }\n      textBlock.children.some((child, cIndex) => {\n        if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_12__(child))\n          return resolution = {\n            patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.unset)([{\n              _key: blk._key\n            }, \"children\", cIndex])],\n            description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n            action: \"Remove the item\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.non-object-child.description\",\n              action: \"inputs.portable-text.invalid-value.non-object-child.action\",\n              values: {\n                key: blk._key,\n                index: cIndex\n              }\n            }\n          }, !0;\n        if (!child._key || typeof child._key != \"string\") {\n          const newChild = {\n            ...child,\n            _key: keyGenerator()\n          };\n          return resolution = {\n            autoResolve: !0,\n            patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.set)(newChild, [{\n              _key: blk._key\n            }, \"children\", cIndex])],\n            description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n            action: \"Set a new random _key on the object\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.missing-child-key.description\",\n              action: \"inputs.portable-text.invalid-value.missing-child-key.action\",\n              values: {\n                key: blk._key,\n                index: cIndex\n              }\n            }\n          }, !0;\n        }\n        return child._type ? validChildTypes.includes(child._type) ? child._type === types.span.name && typeof child.text != \"string\" ? (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.set)({\n            ...child,\n            text: \"\"\n          }, [{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n          action: \"Write an empty text property to the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.invalid-span-text.description\",\n            action: \"inputs.portable-text.invalid-value.invalid-span-text.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key\n            }\n          }\n        }, !0) : !1 : (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.unset)([{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n          action: \"Remove the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.disallowed-child-type.description\",\n            action: \"inputs.portable-text.invalid-value.disallowed-child-type.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key,\n              childType: child._type\n            }\n          }\n        }, !0) : (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_31__.unset)([{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n          action: \"Remove the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.missing-child-type.description\",\n            action: \"inputs.portable-text.invalid-value.missing-child-type.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key\n            }\n          }\n        }, !0);\n      }) && (valid = !1);\n    }\n    return !1;\n  }) && (valid = !1), {\n    valid,\n    resolution,\n    value\n  });\n}\nconst debug$2 = debugWithName(\"sync machine\"), syncValueCallback = ({\n  sendBack,\n  input\n}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks\n  });\n}, syncValueLogic = (0,xstate__WEBPACK_IMPORTED_MODULE_26__.fromCallback)(syncValueCallback), syncMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_24__.setup)({\n  types: {\n    context: {},\n    input: {},\n    events: {},\n    emitted: {}\n  },\n  actions: {\n    \"assign initial value synced\": (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n      initialValueSynced: !0\n    }),\n    \"assign readOnly\": (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n      readOnly: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_24__.assertEvent)(event, \"update readOnly\"), event.readOnly)\n    }),\n    \"assign pending value\": (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n      pendingValue: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_24__.assertEvent)(event, \"update value\"), event.value)\n    }),\n    \"clear pending value\": (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n      pendingValue: void 0\n    }),\n    \"assign previous value\": (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n      previousValue: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_24__.assertEvent)(event, \"done syncing\"), event.value)\n    }),\n    \"emit done syncing value\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)({\n      type: \"done syncing value\"\n    }),\n    \"emit syncing value\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)({\n      type: \"syncing value\"\n    })\n  },\n  guards: {\n    \"initial value synced\": ({\n      context\n    }) => context.initialValueSynced,\n    \"is busy\": ({\n      context\n    }) => {\n      const isProcessingLocalChanges = context.isProcessingLocalChanges, isChanging = isChangingRemotely(context.slateEditor) ?? !1, isBusy = isProcessingLocalChanges || isChanging;\n      return debug$2(\"isBusy\", {\n        isBusy,\n        isProcessingLocalChanges,\n        isChanging\n      }), isBusy;\n    },\n    \"is empty value\": ({\n      event\n    }) => event.type === \"update value\" && event.value === void 0,\n    \"is empty array\": ({\n      event\n    }) => event.type === \"update value\" && Array.isArray(event.value) && event.value.length === 0,\n    \"is new value\": ({\n      context,\n      event\n    }) => event.type === \"update value\" && context.previousValue !== event.value,\n    \"value changed while syncing\": ({\n      context,\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_24__.assertEvent)(event, \"done syncing\"), context.pendingValue !== event.value),\n    \"pending value equals previous value\": ({\n      context\n    }) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(context.pendingValue, context.previousValue)\n  },\n  actors: {\n    \"sync value\": syncValueLogic\n  }\n}).createMachine({\n  id: \"sync\",\n  context: ({\n    input\n  }) => ({\n    initialValue: input.initialValue,\n    initialValueSynced: !1,\n    isProcessingLocalChanges: !1,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: void 0,\n    previousValue: void 0\n  }),\n  entry: [(0,xstate__WEBPACK_IMPORTED_MODULE_27__.r)(({\n    context\n  }) => ({\n    type: \"update value\",\n    value: context.initialValue\n  }))],\n  on: {\n    \"has pending mutations\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n        isProcessingLocalChanges: !0\n      })\n    },\n    mutation: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_25__.a)({\n        isProcessingLocalChanges: !1\n      })\n    },\n    \"update readOnly\": {\n      actions: [\"assign readOnly\"]\n    }\n  },\n  initial: \"idle\",\n  states: {\n    idle: {\n      entry: [() => {\n        debug$2(\"entry: syncing->idle\");\n      }],\n      exit: [() => {\n        debug$2(\"exit: syncing->idle\");\n      }],\n      on: {\n        \"update value\": [{\n          guard: (0,xstate__WEBPACK_IMPORTED_MODULE_27__.d)([\"is empty value\", (0,xstate__WEBPACK_IMPORTED_MODULE_27__.n)(\"initial value synced\")]),\n          actions: [\"assign initial value synced\", \"emit done syncing value\"]\n        }, {\n          guard: (0,xstate__WEBPACK_IMPORTED_MODULE_27__.d)([\"is empty array\", (0,xstate__WEBPACK_IMPORTED_MODULE_27__.n)(\"initial value synced\")]),\n          actions: [\"assign initial value synced\", (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)({\n            type: \"value changed\",\n            value: []\n          }), \"emit done syncing value\"]\n        }, {\n          guard: (0,xstate__WEBPACK_IMPORTED_MODULE_27__.d)([\"is busy\", \"is new value\"]),\n          target: \"busy\",\n          actions: [\"assign pending value\"]\n        }, {\n          guard: \"is new value\",\n          target: \"syncing\",\n          actions: [\"assign pending value\"]\n        }, {\n          guard: (0,xstate__WEBPACK_IMPORTED_MODULE_27__.n)(\"initial value synced\"),\n          actions: [() => {\n            debug$2(\"no new value \\u2013 setting initial value as synced\");\n          }, \"assign initial value synced\", \"emit done syncing value\"]\n        }, {\n          actions: [() => {\n            debug$2(\"no new value and initial value already synced\");\n          }]\n        }]\n      }\n    },\n    busy: {\n      entry: [() => {\n        debug$2(\"entry: syncing->busy\");\n      }],\n      exit: [() => {\n        debug$2(\"exit: syncing->busy\");\n      }],\n      after: {\n        1e3: [{\n          guard: \"is busy\",\n          target: \".\",\n          reenter: !0,\n          actions: [() => {\n            debug$2(\"reenter: syncing->busy\");\n          }]\n        }, {\n          target: \"syncing\"\n        }]\n      },\n      on: {\n        \"update value\": [{\n          guard: \"is new value\",\n          actions: [\"assign pending value\"]\n        }]\n      }\n    },\n    syncing: {\n      entry: [() => {\n        debug$2(\"entry: syncing->syncing\");\n      }, \"emit syncing value\"],\n      exit: [() => {\n        debug$2(\"exit: syncing->syncing\");\n      }, \"emit done syncing value\"],\n      invoke: {\n        src: \"sync value\",\n        id: \"sync value\",\n        input: ({\n          context\n        }) => ({\n          context: {\n            keyGenerator: context.keyGenerator,\n            previousValue: context.previousValue,\n            readOnly: context.readOnly,\n            schema: context.schema\n          },\n          slateEditor: context.slateEditor,\n          streamBlocks: !context.initialValueSynced,\n          value: context.pendingValue\n        })\n      },\n      on: {\n        \"update value\": {\n          guard: \"is new value\",\n          actions: [\"assign pending value\"]\n        },\n        patch: {\n          actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n            event\n          }) => event)]\n        },\n        \"invalid value\": {\n          actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n            event\n          }) => event)]\n        },\n        \"value changed\": {\n          actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n            event\n          }) => event)]\n        },\n        \"done syncing\": [{\n          guard: \"value changed while syncing\",\n          actions: [\"assign previous value\", \"assign initial value synced\"],\n          target: \"syncing\",\n          reenter: !0\n        }, {\n          target: \"idle\",\n          actions: [\"clear pending value\", \"assign previous value\", \"assign initial value synced\"]\n        }]\n      }\n    }\n  }\n});\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value\n}) {\n  let doneSyncing = !1, isChanged = !1, isValid = !0;\n  const hadSelection = !!slateEditor.selection;\n  if ((!value || value.length === 0) && (debug$2(\"Value is empty\"), slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(slateEditor, () => {\n    withoutSaving(slateEditor, () => {\n      withRemoteChanges(slateEditor, () => {\n        withoutPatching(slateEditor, () => {\n          if (doneSyncing)\n            return;\n          hadSelection && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(slateEditor);\n          const childrenLength = slateEditor.children.length;\n          slateEditor.children.forEach((_, index) => {\n            slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(slateEditor, {\n              at: [childrenLength - 1 - index]\n            });\n          }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(slateEditor, slateEditor.pteCreateTextBlock({\n            decorators: []\n          }), {\n            at: [0]\n          }), hadSelection && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(slateEditor, [0, 0]);\n        });\n      });\n    });\n  }), isChanged = !0), value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema\n    });\n    streamBlocks ? await new Promise((resolve) => {\n      slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            if (doneSyncing) {\n              resolve();\n              return;\n            }\n            isChanged = removeExtraBlocks({\n              slateEditor,\n              slateValueFromProps\n            }), (async () => {\n              for await (const [currentBlock, currentBlockIndex] of getStreamedBlocks({\n                slateValue: slateValueFromProps\n              })) {\n                const {\n                  blockChanged,\n                  blockValid\n                } = syncBlock({\n                  context,\n                  sendBack,\n                  block: currentBlock,\n                  index: currentBlockIndex,\n                  slateEditor,\n                  value\n                });\n                if (isChanged = blockChanged || isChanged, isValid = isValid && blockValid, !isValid)\n                  break;\n              }\n              resolve();\n            })();\n          });\n        });\n      });\n    }) : slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(slateEditor, () => {\n      withRemoteChanges(slateEditor, () => {\n        withoutPatching(slateEditor, () => {\n          if (doneSyncing)\n            return;\n          isChanged = removeExtraBlocks({\n            slateEditor,\n            slateValueFromProps\n          });\n          let index = 0;\n          for (const currentBlock of slateValueFromProps) {\n            const {\n              blockChanged,\n              blockValid\n            } = syncBlock({\n              context,\n              sendBack,\n              block: currentBlock,\n              index,\n              slateEditor,\n              value\n            });\n            if (isChanged = blockChanged || isChanged, isValid = isValid && blockValid, !blockValid)\n              break;\n            index++;\n          }\n        });\n      });\n    });\n  }\n  if (!isValid) {\n    debug$2(\"Invalid value, returning\"), doneSyncing = !0, sendBack({\n      type: \"done syncing\",\n      value\n    });\n    return;\n  }\n  if (isChanged) {\n    debug$2(\"Server value changed, syncing editor\");\n    try {\n      slateEditor.onChange();\n    } catch (err) {\n      console.error(err), sendBack({\n        type: \"invalid value\",\n        resolution: null,\n        value\n      }), doneSyncing = !0, sendBack({\n        type: \"done syncing\",\n        value\n      });\n      return;\n    }\n    hadSelection && !slateEditor.selection && (slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(slateEditor, {\n      anchor: {\n        path: [0, 0],\n        offset: 0\n      },\n      focus: {\n        path: [0, 0],\n        offset: 0\n      }\n    }), slateEditor.onChange()), sendBack({\n      type: \"value changed\",\n      value\n    });\n  } else\n    debug$2(\"Server value and editor value is equal, no need to sync.\");\n  doneSyncing = !0, sendBack({\n    type: \"done syncing\",\n    value\n  });\n}\nfunction removeExtraBlocks({\n  slateEditor,\n  slateValueFromProps\n}) {\n  let isChanged = !1;\n  const childrenLength = slateEditor.children.length;\n  if (slateValueFromProps.length < childrenLength) {\n    for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--)\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(slateEditor, {\n        at: [i]\n      });\n    isChanged = !0;\n  }\n  return isChanged;\n}\nasync function* getStreamedBlocks({\n  slateValue\n}) {\n  let index = 0;\n  for await (const block of slateValue)\n    index % 10 === 0 && await new Promise((resolve) => setTimeout(resolve, 0)), yield [block, index], index++;\n}\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value\n}) {\n  let blockChanged = !1, blockValid = !0;\n  const currentBlock = block, currentBlockIndex = index, oldBlock = slateEditor.children[currentBlockIndex], hasChanges = oldBlock && !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(currentBlock, oldBlock);\n  return slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]], validation = validateValue(validationValue, context.schema, context.keyGenerator);\n          !validation.valid && validation.resolution?.autoResolve && validation.resolution?.patches.length > 0 && !context.readOnly && context.previousValue && context.previousValue !== value && (console.warn(`${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`), validation.resolution.patches.forEach((patch) => {\n            sendBack({\n              type: \"patch\",\n              patch\n            });\n          })), validation.valid || validation.resolution?.autoResolve ? (oldBlock._key === currentBlock._key ? (debug$2.enabled && debug$2(\"Updating block\", oldBlock, currentBlock), _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex)) : (debug$2.enabled && debug$2(\"Replacing block\", oldBlock, currentBlock), _replaceBlock(slateEditor, currentBlock, currentBlockIndex)), blockChanged = !0) : (sendBack({\n            type: \"invalid value\",\n            resolution: validation.resolution,\n            value\n          }), blockValid = !1);\n        }\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]], validation = validateValue(validationValue, context.schema, context.keyGenerator);\n          debug$2.enabled && debug$2(\"Validating and inserting new block in the end of the value\", currentBlock), validation.valid || validation.resolution?.autoResolve ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(slateEditor, currentBlock, {\n            at: [currentBlockIndex]\n          }) : (debug$2(\"Invalid\", validation), sendBack({\n            type: \"invalid value\",\n            resolution: validation.resolution,\n            value\n          }), blockValid = !1);\n        }\n      });\n    });\n  }), {\n    blockChanged,\n    blockValid\n  };\n}\nfunction _replaceBlock(slateEditor, currentBlock, currentBlockIndex) {\n  const currentSelection = slateEditor.selection, selectionFocusOnBlock = currentSelection && currentSelection.focus.path[0] === currentBlockIndex;\n  selectionFocusOnBlock && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(slateEditor), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(slateEditor, {\n    at: [currentBlockIndex]\n  }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(slateEditor, currentBlock, {\n    at: [currentBlockIndex]\n  }), slateEditor.onChange(), selectionFocusOnBlock && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(slateEditor, currentSelection);\n}\nfunction _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex) {\n  if (slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(slateEditor, currentBlock, {\n    at: [currentBlockIndex]\n  }), slateEditor.isTextBlock(currentBlock) && slateEditor.isTextBlock(oldBlock)) {\n    const oldBlockChildrenLength = oldBlock.children.length;\n    currentBlock.children.length < oldBlockChildrenLength && Array.from(Array(oldBlockChildrenLength - currentBlock.children.length)).forEach((_, index) => {\n      const childIndex = oldBlockChildrenLength - 1 - index;\n      childIndex > 0 && (debug$2(\"Removing child\"), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(slateEditor, {\n        at: [currentBlockIndex, childIndex]\n      }));\n    }), currentBlock.children.forEach((currentBlockChild, currentBlockChildIndex) => {\n      const oldBlockChild = oldBlock.children[currentBlockChildIndex], isChildChanged = !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(currentBlockChild, oldBlockChild), isTextChanged = !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(currentBlockChild.text, oldBlockChild?.text), path = [currentBlockIndex, currentBlockChildIndex];\n      if (isChildChanged)\n        if (currentBlockChild._key === oldBlockChild?._key) {\n          debug$2(\"Updating changed child\", currentBlockChild, oldBlockChild), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(slateEditor, currentBlockChild, {\n            at: path\n          });\n          const isSpanNode2 = slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(currentBlockChild) && currentBlockChild._type === \"span\" && slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(oldBlockChild) && oldBlockChild._type === \"span\";\n          isSpanNode2 && isTextChanged ? (oldBlockChild.text.length > 0 && (0,slate__WEBPACK_IMPORTED_MODULE_14__.deleteText)(slateEditor, {\n            at: {\n              focus: {\n                path,\n                offset: 0\n              },\n              anchor: {\n                path,\n                offset: oldBlockChild.text.length\n              }\n            }\n          }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertText(slateEditor, currentBlockChild.text, {\n            at: path\n          }), slateEditor.onChange()) : isSpanNode2 || (debug$2(\"Updating changed inline object child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(slateEditor, {\n            _key: VOID_CHILD_KEY\n          }, {\n            at: [...path, 0],\n            voids: !0\n          }));\n        } else oldBlockChild ? (debug$2(\"Replacing child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(slateEditor, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(slateEditor, currentBlockChild, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slateEditor.onChange()) : oldBlockChild || (debug$2(\"Inserting new child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(slateEditor, currentBlockChild, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slateEditor.onChange());\n    });\n  }\n}\nconst debug$1 = debugWithName(\"setup\");\nfunction createInternalEditor(config) {\n  debug$1(\"Creating new Editor instance\");\n  const subscriptions = [], editorActor = (0,xstate__WEBPACK_IMPORTED_MODULE_27__.c)(editorMachine, {\n    input: editorConfigToMachineInput(config)\n  }), relayActor = (0,xstate__WEBPACK_IMPORTED_MODULE_27__.c)(relayMachine), slateEditor = createSlateEditor({\n    editorActor,\n    relayActor,\n    subscriptions\n  }), editable = createEditableAPI(slateEditor.instance, editorActor), {\n    mutationActor,\n    syncActor\n  } = createActors({\n    editorActor,\n    relayActor,\n    slateEditor: slateEditor.instance,\n    subscriptions\n  }), editor = {\n    dom: createEditorDom((event) => editorActor.send(event), slateEditor.instance),\n    getSnapshot: () => getEditorSnapshot({\n      editorActorSnapshot: editorActor.getSnapshot(),\n      slateEditorInstance: slateEditor.instance\n    }),\n    registerBehavior: (behaviorConfig) => {\n      const priority = createEditorPriority({\n        name: \"custom\",\n        reference: {\n          priority: corePriority,\n          importance: \"higher\"\n        }\n      }), behaviorConfigWithPriority = {\n        ...behaviorConfig,\n        priority\n      };\n      return editorActor.send({\n        type: \"add behavior\",\n        behaviorConfig: behaviorConfigWithPriority\n      }), () => {\n        editorActor.send({\n          type: \"remove behavior\",\n          behaviorConfig: behaviorConfigWithPriority\n        });\n      };\n    },\n    send: (event) => {\n      switch (event.type) {\n        case \"update value\":\n          syncActor.send(event);\n          break;\n        case \"update readOnly\":\n        case \"patches\":\n        case \"update maxBlocks\":\n          editorActor.send(event);\n          break;\n        default:\n          editorActor.send(rerouteExternalBehaviorEvent({\n            event,\n            slateEditor: slateEditor.instance\n          }));\n      }\n    },\n    on: (event, listener) => relayActor.on(event, (event2) => {\n      switch (event2.type) {\n        case \"blurred\":\n        case \"done loading\":\n        case \"editable\":\n        case \"focused\":\n        case \"invalid value\":\n        case \"loading\":\n        case \"mutation\":\n        case \"patch\":\n        case \"read only\":\n        case \"ready\":\n        case \"selection\":\n        case \"value changed\":\n          listener(event2);\n          break;\n      }\n    }),\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor\n    }\n  };\n  return {\n    actors: {\n      editorActor,\n      mutationActor,\n      relayActor,\n      syncActor\n    },\n    editor,\n    subscriptions\n  };\n}\nfunction editorConfigToMachineInput(config) {\n  const {\n    legacySchema,\n    schema\n  } = compileSchemasFromEditorConfig(config);\n  return {\n    converters: createCoreConverters(legacySchema),\n    getLegacySchema: () => legacySchema,\n    keyGenerator: config.keyGenerator ?? _chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_15__.defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema,\n    initialValue: config.initialValue\n  };\n}\nfunction compileSchemasFromEditorConfig(config) {\n  const legacySchema = config.schemaDefinition ? (0,_portabletext_sanity_bridge__WEBPACK_IMPORTED_MODULE_37__.compileSchemaDefinitionToPortableTextMemberSchemaTypes)(config.schemaDefinition) : (0,_portabletext_sanity_bridge__WEBPACK_IMPORTED_MODULE_37__.createPortableTextMemberSchemaTypes)(config.schema.hasOwnProperty(\"jsonType\") ? config.schema : compileType(config.schema)), schema = config.schemaDefinition ? (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_18__.compileSchema)(config.schemaDefinition) : (0,_portabletext_sanity_bridge__WEBPACK_IMPORTED_MODULE_37__.portableTextMemberSchemaTypesToSchema)(legacySchema);\n  return {\n    legacySchema,\n    schema\n  };\n}\nfunction createActors(config) {\n  debug$1(\"Creating new Actors\");\n  const mutationActor = (0,xstate__WEBPACK_IMPORTED_MODULE_27__.c)(mutationMachine, {\n    input: {\n      readOnly: config.editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      }),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor\n    }\n  }), syncActor = (0,xstate__WEBPACK_IMPORTED_MODULE_27__.c)(syncMachine, {\n    input: {\n      initialValue: config.editorActor.getSnapshot().context.initialValue,\n      keyGenerator: config.editorActor.getSnapshot().context.keyGenerator,\n      readOnly: config.editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      }),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor\n    }\n  });\n  return config.subscriptions.push(() => {\n    const subscription = mutationActor.on(\"*\", (event) => {\n      event.type === \"has pending mutations\" && syncActor.send({\n        type: \"has pending mutations\"\n      }), event.type === \"mutation\" && (syncActor.send({\n        type: \"mutation\"\n      }), config.editorActor.send({\n        type: \"mutation\",\n        patches: event.patches,\n        snapshot: event.snapshot,\n        value: event.snapshot\n      })), event.type === \"patch\" && config.relayActor.send(event);\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }), config.subscriptions.push(() => {\n    const subscription = syncActor.on(\"*\", (event) => {\n      switch (event.type) {\n        case \"invalid value\":\n          config.relayActor.send(event);\n          break;\n        case \"value changed\":\n          config.relayActor.send(event);\n          break;\n        case \"patch\":\n          config.editorActor.send({\n            ...event,\n            type: \"internal.patch\",\n            value: fromSlateValue(config.slateEditor.children, config.editorActor.getSnapshot().context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(config.slateEditor))\n          });\n          break;\n        default:\n          config.editorActor.send(event);\n      }\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }), config.subscriptions.push(() => {\n    const subscription = config.editorActor.subscribe((snapshot) => {\n      snapshot.matches({\n        \"edit mode\": \"read only\"\n      }) ? (mutationActor.send({\n        type: \"update readOnly\",\n        readOnly: !0\n      }), syncActor.send({\n        type: \"update readOnly\",\n        readOnly: !0\n      })) : (mutationActor.send({\n        type: \"update readOnly\",\n        readOnly: !1\n      }), syncActor.send({\n        type: \"update readOnly\",\n        readOnly: !1\n      }));\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }), config.subscriptions.push(() => {\n    const subscription = config.editorActor.on(\"*\", (event) => {\n      switch (event.type) {\n        case \"editable\":\n        case \"mutation\":\n        case \"ready\":\n        case \"read only\":\n        case \"selection\":\n          config.relayActor.send(event);\n          break;\n        case \"internal.patch\":\n          mutationActor.send({\n            ...event,\n            type: \"patch\"\n          });\n          break;\n      }\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }), {\n    mutationActor,\n    syncActor\n  };\n}\nfunction eventToChange(event) {\n  switch (event.type) {\n    case \"blurred\":\n      return {\n        type: \"blur\",\n        event: event.event\n      };\n    case \"patch\":\n      return event;\n    case \"loading\":\n      return {\n        type: \"loading\",\n        isLoading: !0\n      };\n    case \"done loading\":\n      return {\n        type: \"loading\",\n        isLoading: !1\n      };\n    case \"focused\":\n      return {\n        type: \"focus\",\n        event: event.event\n      };\n    case \"value changed\":\n      return {\n        type: \"value\",\n        value: event.value\n      };\n    case \"invalid value\":\n      return {\n        type: \"invalidValue\",\n        resolution: event.resolution,\n        value: event.value\n      };\n    case \"mutation\":\n      return event;\n    case \"ready\":\n      return event;\n    case \"selection\":\n      return event;\n    case \"unset\":\n      return event;\n  }\n}\nconst debug = debugWithName(\"component:PortableTextEditor\");\nclass PortableTextEditor extends react__WEBPACK_IMPORTED_MODULE_1__.Component {\n  static displayName = \"PortableTextEditor\";\n  /**\n   * An observable of all the editor changes.\n   */\n  change$ = new rxjs__WEBPACK_IMPORTED_MODULE_38__.Subject();\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  /**\n   * The editor instance\n   */\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  subscriptions = [];\n  unsubscribers = [];\n  constructor(props) {\n    if (super(props), props.editor)\n      this.editor = props.editor, this.schemaTypes = this.editor._internal.editorActor.getSnapshot().context.getLegacySchema();\n    else {\n      const {\n        actors,\n        editor,\n        subscriptions\n      } = createInternalEditor({\n        initialValue: props.value,\n        keyGenerator: props.keyGenerator,\n        maxBlocks: props.maxBlocks === void 0 ? void 0 : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n        schema: props.schemaType\n      });\n      this.subscriptions = subscriptions, this.actors = actors, this.editor = editor, this.schemaTypes = actors.editorActor.getSnapshot().context.getLegacySchema();\n    }\n    this.editable = this.editor._internal.editable;\n  }\n  componentDidMount() {\n    if (!this.actors)\n      return;\n    for (const subscription of this.subscriptions)\n      this.unsubscribers.push(subscription());\n    const relayActorSubscription = this.actors.relayActor.on(\"*\", (event) => {\n      const change = eventToChange(event);\n      change && (this.props.editor || this.props.onChange(change), this.change$.next(change));\n    });\n    this.unsubscribers.push(relayActorSubscription.unsubscribe), this.actors.editorActor.start(), this.actors.mutationActor.start(), this.actors.relayActor.start(), this.actors.syncActor.start();\n  }\n  componentDidUpdate(prevProps) {\n    !this.props.editor && !prevProps.editor && this.props.schemaType !== prevProps.schemaType && console.warn(\"Updating schema type is no longer supported\"), !this.props.editor && !prevProps.editor && (this.props.readOnly !== prevProps.readOnly && this.editor._internal.editorActor.send({\n      type: \"update readOnly\",\n      readOnly: this.props.readOnly ?? !1\n    }), this.props.maxBlocks !== prevProps.maxBlocks && this.editor._internal.editorActor.send({\n      type: \"update maxBlocks\",\n      maxBlocks: this.props.maxBlocks === void 0 ? void 0 : Number.parseInt(this.props.maxBlocks.toString(), 10)\n    }), this.props.value !== prevProps.value && this.editor.send({\n      type: \"update value\",\n      value: this.props.value\n    }), this.props.editorRef !== prevProps.editorRef && this.props.editorRef && (this.props.editorRef.current = this));\n  }\n  componentWillUnmount() {\n    for (const unsubscribe of this.unsubscribers)\n      unsubscribe();\n    this.actors && (stopActor(this.actors.editorActor), stopActor(this.actors.mutationActor), stopActor(this.actors.relayActor), stopActor(this.actors.syncActor));\n  }\n  setEditable = (editable) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable\n    };\n  };\n  render() {\n    const legacyPatches = this.props.editor ? void 0 : this.props.incomingPatches$ ?? this.props.patches$;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [\n      legacyPatches ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RoutePatchesObservableToEditorActor, { editorActor: this.editor._internal.editorActor, patches$: legacyPatches }) : null,\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EditorActorContext.Provider, { value: this.editor._internal.editorActor, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RelayActorContext.Provider, { value: this.actors.relayActor, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(slate_react__WEBPACK_IMPORTED_MODULE_22__.Slate, { editor: this.editor._internal.slateEditor.instance, initialValue: this.editor._internal.slateEditor.initialValue, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PortableTextEditorContext.Provider, { value: this, children: this.props.children }) }) }) })\n    ] });\n  }\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.getActiveAnnotations)\n   * ```\n   */\n  static activeAnnotations = (editor) => editor && editor.editable ? editor.editable.activeAnnotations() : [];\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveAnnotation(...))\n   * ```\n   */\n  static isAnnotationActive = (editor, annotationType) => editor && editor.editable ? editor.editable.isAnnotationActive(annotationType) : !1;\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.add',\n   *  annotation: {\n   *    name: '...',\n   *    value: {...},\n   *  }\n   * })\n   * ```\n   */\n  static addAnnotation = (editor, type, value) => editor.editable?.addAnnotation(type, value);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'blur',\n   * })\n   * ```\n   */\n  static blur = (editor) => {\n    debug(\"Host blurred\"), editor.editable?.blur();\n  };\n  static delete = (editor, selection, options) => editor.editable?.delete(selection, options);\n  static findDOMNode = (editor, element) => editor.editable?.findDOMNode(element);\n  static findByPath = (editor, path) => editor.editable?.findByPath(path) || [];\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'focus',\n   * })\n   * ```\n   */\n  static focus = (editor) => {\n    debug(\"Host requesting focus\"), editor.editable?.focus();\n  };\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusBlock = useEditorSelector(editor, selectors.getFocusBlock)\n   * ```\n   */\n  static focusBlock = (editor) => editor.editable?.focusBlock();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusChild = useEditorSelector(editor, selectors.getFocusChild)\n   * ```\n   */\n  static focusChild = (editor) => editor.editable?.focusChild();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selection = useEditorSelector(editor, selectors.getSelection)\n   * ```\n   */\n  static getSelection = (editor) => editor.editable ? editor.editable.getSelection() : null;\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const value = useEditorSelector(editor, selectors.getValue)\n   * ```\n   */\n  static getValue = (editor) => editor.editable?.getValue();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveStyle(...))\n   * ```\n   */\n  static hasBlockStyle = (editor, blockStyle) => editor.editable?.hasBlockStyle(blockStyle);\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveListItem(...))\n   * ```\n   */\n  static hasListStyle = (editor, listStyle) => editor.editable?.hasListStyle(listStyle);\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionCollapsed = useEditorSelector(editor, selectors.isSelectionCollapsed)\n   * ```\n   */\n  static isCollapsedSelection = (editor) => editor.editable?.isCollapsedSelection();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionExpanded = useEditorSelector(editor, selectors.isSelectionExpanded)\n   * ```\n   */\n  static isExpandedSelection = (editor) => editor.editable?.isExpandedSelection();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveDecorator(...))\n   * ```\n   */\n  static isMarkActive = (editor, mark) => editor.editable?.isMarkActive(mark);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.span',\n   *  text: '...',\n   *  annotations: [{name: '...', value: {...}}],\n   *  decorators: ['...'],\n   * })\n   * editor.send({\n   *  type: 'insert.inline object',\n   *  inlineObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   * })\n   * ```\n   */\n  static insertChild = (editor, type, value) => (debug(\"Host inserting child\"), editor.editable?.insertChild(type, value));\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.block object',\n   *  blockObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   *  placement: 'auto' | 'after' | 'before',\n   * })\n   * ```\n   */\n  static insertBlock = (editor, type, value) => editor.editable?.insertBlock(type, value);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.break',\n   * })\n   * ```\n   */\n  static insertBreak = (editor) => editor.editable?.insertBreak();\n  static isVoid = (editor, element) => editor.editable?.isVoid(element);\n  static isObjectPath = (_editor, path) => {\n    if (!path || !Array.isArray(path)) return !1;\n    const isChildObjectEditPath = path.length > 3 && path[1] === \"children\";\n    return path.length > 1 && path[1] !== \"children\" || isChildObjectEditPath;\n  };\n  static marks = (editor) => editor.editable?.marks();\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'select',\n   *  selection: {...},\n   * })\n   * ```\n   */\n  static select = (editor, selection) => {\n    debug(\"Host setting selection\", selection), editor.editable?.select(selection);\n  };\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.remove',\n   *  annotation: {\n   *    name: '...',\n   *  },\n   * })\n   * ```\n   */\n  static removeAnnotation = (editor, type) => editor.editable?.removeAnnotation(type);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'style.toggle',\n   *  style: '...',\n   * })\n   * ```\n   */\n  static toggleBlockStyle = (editor, blockStyle) => (debug(\"Host is toggling block style\"), editor.editable?.toggleBlockStyle(blockStyle));\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'list item.toggle',\n   *  listItem: '...',\n   * })\n   * ```\n   */\n  static toggleList = (editor, listStyle) => editor.editable?.toggleList(listStyle);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'decorator.toggle',\n   *  decorator: '...',\n   * })\n   * ```\n   */\n  static toggleMark = (editor, mark) => {\n    debug(\"Host toggling mark\", mark), editor.editable?.toggleMark(mark);\n  };\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selectedSlice = useEditorSelector(editor, selectors.getSelectedSlice)\n   * ```\n   */\n  static getFragment = (editor) => editor.editable?.getFragment();\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.undo',\n   * })\n   * ```\n   */\n  static undo = (editor) => {\n    debug(\"Host undoing\"), editor.editable?.undo();\n  };\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.redo',\n   * })\n   * ```\n   */\n  static redo = (editor) => {\n    debug(\"Host redoing\"), editor.editable?.redo();\n  };\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isOverlapping = useEditorSelector(editor, selectors.isOverlappingSelection(selectionB))\n   * ```\n   */\n  static isSelectionsOverlapping = (editor, selectionA, selectionB) => editor.editable?.isSelectionsOverlapping(selectionA, selectionB);\n}\nfunction RoutePatchesObservableToEditorActor(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4);\n  let t0, t1;\n  return $[0] !== props.editorActor || $[1] !== props.patches$ ? (t0 = () => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: \"patches\",\n        ...payload\n      });\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t1 = [props.editorActor, props.patches$], $[0] = props.editorActor, $[1] = props.patches$, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1), null;\n}\nfunction EditorProvider(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(28);\n  let t0;\n  $[0] !== props.initialConfig ? (t0 = () => {\n    const internalEditor = createInternalEditor(props.initialConfig), portableTextEditor = new PortableTextEditor({\n      editor: internalEditor.editor\n    });\n    return {\n      internalEditor,\n      portableTextEditor\n    };\n  }, $[0] = props.initialConfig, $[1] = t0) : t0 = $[1];\n  const [t1] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(t0), {\n    internalEditor: internalEditor_0,\n    portableTextEditor: portableTextEditor_0\n  } = t1;\n  let t2;\n  $[2] !== internalEditor_0.actors.editorActor || $[3] !== internalEditor_0.actors.mutationActor || $[4] !== internalEditor_0.actors.relayActor || $[5] !== internalEditor_0.actors.syncActor || $[6] !== internalEditor_0.subscriptions || $[7] !== portableTextEditor_0 ? (t2 = () => {\n    const unsubscribers = [];\n    for (const subscription of internalEditor_0.subscriptions)\n      unsubscribers.push(subscription());\n    const relayActorSubscription = internalEditor_0.actors.relayActor.on(\"*\", (event) => {\n      const change = eventToChange(event);\n      change && portableTextEditor_0.change$.next(change);\n    });\n    return unsubscribers.push(relayActorSubscription.unsubscribe), internalEditor_0.actors.editorActor.start(), internalEditor_0.actors.mutationActor.start(), internalEditor_0.actors.relayActor.start(), internalEditor_0.actors.syncActor.start(), () => {\n      for (const unsubscribe of unsubscribers)\n        unsubscribe();\n      stopActor(internalEditor_0.actors.editorActor), stopActor(internalEditor_0.actors.mutationActor), stopActor(internalEditor_0.actors.relayActor), stopActor(internalEditor_0.actors.syncActor);\n    };\n  }, $[2] = internalEditor_0.actors.editorActor, $[3] = internalEditor_0.actors.mutationActor, $[4] = internalEditor_0.actors.relayActor, $[5] = internalEditor_0.actors.syncActor, $[6] = internalEditor_0.subscriptions, $[7] = portableTextEditor_0, $[8] = t2) : t2 = $[8];\n  let t3;\n  $[9] !== internalEditor_0 || $[10] !== portableTextEditor_0 ? (t3 = [internalEditor_0, portableTextEditor_0], $[9] = internalEditor_0, $[10] = portableTextEditor_0, $[11] = t3) : t3 = $[11], (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t2, t3);\n  let t4;\n  $[12] !== portableTextEditor_0 || $[13] !== props.children ? (t4 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PortableTextEditorContext.Provider, { value: portableTextEditor_0, children: props.children }), $[12] = portableTextEditor_0, $[13] = props.children, $[14] = t4) : t4 = $[14];\n  let t5;\n  $[15] !== internalEditor_0.editor._internal.slateEditor.initialValue || $[16] !== internalEditor_0.editor._internal.slateEditor.instance || $[17] !== t4 ? (t5 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(slate_react__WEBPACK_IMPORTED_MODULE_22__.Slate, { editor: internalEditor_0.editor._internal.slateEditor.instance, initialValue: internalEditor_0.editor._internal.slateEditor.initialValue, children: t4 }), $[15] = internalEditor_0.editor._internal.slateEditor.initialValue, $[16] = internalEditor_0.editor._internal.slateEditor.instance, $[17] = t4, $[18] = t5) : t5 = $[18];\n  let t6;\n  $[19] !== internalEditor_0.actors.relayActor || $[20] !== t5 ? (t6 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RelayActorContext.Provider, { value: internalEditor_0.actors.relayActor, children: t5 }), $[19] = internalEditor_0.actors.relayActor, $[20] = t5, $[21] = t6) : t6 = $[21];\n  let t7;\n  $[22] !== internalEditor_0.actors.editorActor || $[23] !== t6 ? (t7 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EditorActorContext.Provider, { value: internalEditor_0.actors.editorActor, children: t6 }), $[22] = internalEditor_0.actors.editorActor, $[23] = t6, $[24] = t7) : t7 = $[24];\n  let t8;\n  return $[25] !== internalEditor_0.editor || $[26] !== t7 ? (t8 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_13__.EditorContext.Provider, { value: internalEditor_0.editor, children: t7 }), $[25] = internalEditor_0.editor, $[26] = t7, $[27] = t8) : t8 = $[27], t8;\n}\nconst usePortableTextEditorSelection = () => {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(3), editorActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EditorActorContext), [selection, setSelection2] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n  let t0, t1;\n  return $[0] !== editorActor ? (t0 = () => {\n    const subscription = editorActor.on(\"selection\", (event) => {\n      (0,react__WEBPACK_IMPORTED_MODULE_1__.startTransition)(() => {\n        setSelection2(event.selection);\n      });\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t1 = [editorActor], $[0] = editorActor, $[1] = t0, $[2] = t1) : (t0 = $[1], t1 = $[2]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1), selection;\n};\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@portabletext/editor/lib/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@portabletext/editor/lib/plugins/index.js":
/*!*****************************************************************!*\
  !*** ../node_modules/@portabletext/editor/lib/plugins/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BehaviorPlugin: () => (/* binding */ BehaviorPlugin),\n/* harmony export */   DecoratorShortcutPlugin: () => (/* binding */ DecoratorShortcutPlugin),\n/* harmony export */   EditorRefPlugin: () => (/* binding */ EditorRefPlugin),\n/* harmony export */   EventListenerPlugin: () => (/* binding */ EventListenerPlugin),\n/* harmony export */   MarkdownPlugin: () => (/* binding */ MarkdownPlugin),\n/* harmony export */   OneLinePlugin: () => (/* binding */ OneLinePlugin)\n/* harmony export */ });\n/* harmony import */ var react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-compiler-runtime */ \"(ssr)/../node_modules/react-compiler-runtime/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../_chunks-es/use-editor.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/use-editor.js\");\n/* harmony import */ var _xstate_react__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @xstate/react */ \"(ssr)/../node_modules/@xstate/react/dist/xstate-react.development.esm.js\");\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/../node_modules/lodash/isEqual.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! xstate */ \"(ssr)/../node_modules/xstate/dist/xstate.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! xstate */ \"(ssr)/../node_modules/xstate/actors/dist/xstate-actors.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! xstate */ \"(ssr)/../node_modules/xstate/dist/assign-fb4707fe.development.esm.js\");\n/* harmony import */ var _chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../_chunks-es/selector.get-selection-text.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/selector.get-selection-text.js\");\n/* harmony import */ var _chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../_chunks-es/selector.get-text-before.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js\");\n/* harmony import */ var _chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../_chunks-es/util.get-text-block-text.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.get-text-block-text.js\");\n/* harmony import */ var _chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../_chunks-es/util.child-selection-point-to-block-offset.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.child-selection-point-to-block-offset.js\");\n/* harmony import */ var _behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../behaviors/index.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/behaviors/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _portabletext_schema__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @portabletext/schema */ \"(ssr)/../node_modules/@portabletext/schema/dist/index.js\");\n/* harmony import */ var _chunks_es_util_merge_text_blocks_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../_chunks-es/util.merge-text-blocks.js */ \"(ssr)/../node_modules/@portabletext/editor/lib/_chunks-es/util.merge-text-blocks.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction BehaviorPlugin(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4), editor = (0,_chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_4__.useEditor)();\n  let t0, t1;\n  return $[0] !== editor || $[1] !== props.behaviors ? (t0 = () => {\n    const unregisterBehaviors = props.behaviors.map((behavior) => editor.registerBehavior({\n      behavior\n    }));\n    return () => {\n      unregisterBehaviors.forEach(_temp);\n    };\n  }, t1 = [editor, props.behaviors], $[0] = editor, $[1] = props.behaviors, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1), null;\n}\nfunction _temp(unregister) {\n  unregister();\n}\nfunction createPairRegex(char, amount) {\n  const prePrefix = `(?<!\\\\${char})`, prefix = `\\\\${char}`.repeat(Math.max(amount, 1)), postPrefix = \"(?!\\\\s)\", content = `([^${char}\\\\n]+?)`, preSuffix = \"(?<!\\\\s)\", suffix = `\\\\${char}`.repeat(Math.max(amount, 1)), postSuffix = `(?!\\\\${char})`;\n  return `${prePrefix}${prefix}${postPrefix}${content}${preSuffix}${suffix}${postSuffix}`;\n}\nfunction createDecoratorPairBehavior(config) {\n  config.pair.amount < 1 && console.warn(\"The amount of characters in the pair should be greater than 0\");\n  const pairRegex = createPairRegex(config.pair.char, config.pair.amount), regEx = new RegExp(`(${pairRegex})$`);\n  return (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (config.pair.amount < 1)\n        return !1;\n      const decorator = config.decorator({\n        schema: snapshot.context.schema\n      });\n      if (decorator === void 0)\n        return !1;\n      const focusTextBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot), selectionStartPoint = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.getSelectionStartPoint)(snapshot), selectionStartOffset = selectionStartPoint ? (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_7__.spanSelectionPointToBlockOffset)({\n        context: {\n          schema: snapshot.context.schema,\n          value: snapshot.context.value\n        },\n        selectionPoint: selectionStartPoint\n      }) : void 0;\n      if (!focusTextBlock || !selectionStartOffset)\n        return !1;\n      const newText = `${(0,_chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_8__.getBlockTextBefore)(snapshot)}${event.text}`, textToDecorate = newText.match(regEx)?.at(0);\n      if (textToDecorate === void 0)\n        return !1;\n      const prefixOffsets = {\n        anchor: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar**\".length - \"**bar**\".length = 4\n          offset: newText.length - textToDecorate.length\n        },\n        focus: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar**\".length - \"**bar**\".length + \"*\".length * 2 = 6\n          offset: newText.length - textToDecorate.length + config.pair.char.length * config.pair.amount\n        }\n      }, suffixOffsets = {\n        anchor: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar*|\" (10) + \"*\".length - 2 = 9\n          offset: selectionStartOffset.offset + event.text.length - config.pair.char.length * config.pair.amount\n        },\n        focus: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar*|\" (10) + \"*\".length = 11\n          offset: selectionStartOffset.offset + event.text.length\n        }\n      };\n      if (prefixOffsets.focus.offset - prefixOffsets.anchor.offset > 1) {\n        const prefixSelection = (0,_chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_9__.blockOffsetsToSelection)({\n          context: snapshot.context,\n          offsets: prefixOffsets\n        }), inlineObjectBeforePrefixFocus = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.getPreviousInlineObject)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: prefixSelection ? {\n              anchor: prefixSelection.focus,\n              focus: prefixSelection.focus\n            } : null\n          }\n        }), inlineObjectBeforePrefixFocusOffset = inlineObjectBeforePrefixFocus ? (0,_chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_9__.childSelectionPointToBlockOffset)({\n          context: {\n            schema: snapshot.context.schema,\n            value: snapshot.context.value\n          },\n          selectionPoint: {\n            path: inlineObjectBeforePrefixFocus.path,\n            offset: 0\n          }\n        }) : void 0;\n        if (inlineObjectBeforePrefixFocusOffset && inlineObjectBeforePrefixFocusOffset.offset > prefixOffsets.anchor.offset && inlineObjectBeforePrefixFocusOffset.offset < prefixOffsets.focus.offset)\n          return !1;\n      }\n      if (suffixOffsets.focus.offset - suffixOffsets.anchor.offset > 1) {\n        const previousInlineObject = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.getPreviousInlineObject)(snapshot), previousInlineObjectOffset = previousInlineObject ? (0,_chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_9__.childSelectionPointToBlockOffset)({\n          context: {\n            schema: snapshot.context.schema,\n            value: snapshot.context.value\n          },\n          selectionPoint: {\n            path: previousInlineObject.path,\n            offset: 0\n          }\n        }) : void 0;\n        if (previousInlineObjectOffset && previousInlineObjectOffset.offset > suffixOffsets.anchor.offset && previousInlineObjectOffset.offset < suffixOffsets.focus.offset)\n          return !1;\n      }\n      return {\n        prefixOffsets,\n        suffixOffsets,\n        decorator\n      };\n    },\n    actions: [\n      // Insert the text as usual in its own undo step\n      ({\n        event\n      }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)(event)],\n      (_, {\n        prefixOffsets,\n        suffixOffsets,\n        decorator\n      }) => [\n        // Decorate the text between the prefix and suffix\n        (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n          type: \"decorator.add\",\n          decorator,\n          at: {\n            anchor: prefixOffsets.focus,\n            focus: suffixOffsets.anchor\n          }\n        }),\n        // Delete the suffix\n        (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n          type: \"delete.text\",\n          at: suffixOffsets\n        }),\n        // Delete the prefix\n        (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n          type: \"delete.text\",\n          at: prefixOffsets\n        }),\n        // Toggle the decorator off so the next inserted text isn't emphasized\n        (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n          type: \"decorator.remove\",\n          decorator\n        }),\n        (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.effect)(() => {\n          config.onDecorate({\n            ...suffixOffsets.anchor,\n            offset: suffixOffsets.anchor.offset - (prefixOffsets.focus.offset - prefixOffsets.anchor.offset)\n          });\n        })\n      ]\n    ]\n  });\n}\nfunction DecoratorShortcutPlugin(config) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4), editor = (0,_chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_4__.useEditor)();\n  let t0;\n  return $[0] !== config.decorator || $[1] !== config.pair || $[2] !== editor ? (t0 = {\n    input: {\n      editor,\n      decorator: config.decorator,\n      pair: config.pair\n    }\n  }, $[0] = config.decorator, $[1] = config.pair, $[2] = editor, $[3] = t0) : t0 = $[3], (0,_xstate_react__WEBPACK_IMPORTED_MODULE_10__.useActorRef)(decoratorPairMachine, t0), null;\n}\nconst emphasisListener = ({\n  sendBack,\n  input\n}) => input.editor.registerBehavior({\n  behavior: createDecoratorPairBehavior({\n    decorator: input.decorator,\n    pair: input.pair,\n    onDecorate: (offset) => {\n      sendBack({\n        type: \"emphasis.add\",\n        blockOffset: offset\n      });\n    }\n  })\n}), selectionListenerCallback = ({\n  sendBack,\n  input\n}) => input.editor.registerBehavior({\n  behavior: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"select\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (!event.at)\n        return {\n          blockOffsets: void 0\n        };\n      const anchor = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_7__.spanSelectionPointToBlockOffset)({\n        context: snapshot.context,\n        selectionPoint: event.at.anchor\n      }), focus = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_7__.spanSelectionPointToBlockOffset)({\n        context: snapshot.context,\n        selectionPoint: event.at.focus\n      });\n      return !anchor || !focus ? {\n        blockOffsets: void 0\n      } : {\n        blockOffsets: {\n          anchor,\n          focus\n        }\n      };\n    },\n    actions: [({\n      event\n    }, {\n      blockOffsets\n    }) => [{\n      type: \"effect\",\n      effect: () => {\n        sendBack({\n          type: \"selection\",\n          blockOffsets\n        });\n      }\n    }, (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.forward)(event)]]\n  })\n}), deleteBackwardListenerCallback = ({\n  sendBack,\n  input\n}) => input.editor.registerBehavior({\n  behavior: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"delete.backward\",\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"history.undo\"\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.effect)(() => {\n      sendBack({\n        type: \"delete.backward\"\n      });\n    })]]\n  })\n}), decoratorPairMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_11__.setup)({\n  types: {\n    context: {},\n    input: {},\n    events: {}\n  },\n  actors: {\n    \"emphasis listener\": (0,xstate__WEBPACK_IMPORTED_MODULE_12__.fromCallback)(emphasisListener),\n    \"delete.backward listener\": (0,xstate__WEBPACK_IMPORTED_MODULE_12__.fromCallback)(deleteBackwardListenerCallback),\n    \"selection listener\": (0,xstate__WEBPACK_IMPORTED_MODULE_12__.fromCallback)(selectionListenerCallback)\n  }\n}).createMachine({\n  id: \"decorator pair\",\n  context: ({\n    input\n  }) => ({\n    decorator: input.decorator,\n    editor: input.editor,\n    pair: input.pair\n  }),\n  initial: \"idle\",\n  states: {\n    idle: {\n      invoke: [{\n        src: \"emphasis listener\",\n        input: ({\n          context\n        }) => ({\n          decorator: context.decorator,\n          editor: context.editor,\n          pair: context.pair\n        })\n      }],\n      on: {\n        \"emphasis.add\": {\n          target: \"emphasis added\",\n          actions: (0,xstate__WEBPACK_IMPORTED_MODULE_13__.a)({\n            offsetAfterEmphasis: ({\n              event\n            }) => event.blockOffset\n          })\n        }\n      }\n    },\n    \"emphasis added\": {\n      exit: [(0,xstate__WEBPACK_IMPORTED_MODULE_13__.a)({\n        offsetAfterEmphasis: void 0\n      })],\n      invoke: [{\n        src: \"selection listener\",\n        input: ({\n          context\n        }) => ({\n          editor: context.editor\n        })\n      }, {\n        src: \"delete.backward listener\",\n        input: ({\n          context\n        }) => ({\n          editor: context.editor\n        })\n      }],\n      on: {\n        selection: {\n          target: \"idle\",\n          guard: ({\n            context,\n            event\n          }) => !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n            anchor: context.offsetAfterEmphasis,\n            focus: context.offsetAfterEmphasis\n          }, event.blockOffsets)\n        },\n        \"delete.backward\": {\n          target: \"idle\"\n        }\n      }\n    }\n  }\n}), EditorRefPlugin = react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((_, ref) => {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(2), editor = (0,_chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_4__.useEditor)(), portableTextEditorRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(editor);\n  let t0, t1;\n  return $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = () => portableTextEditorRef.current, t1 = [], $[0] = t0, $[1] = t1) : (t0 = $[0], t1 = $[1]), react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle(ref, t0, t1), null;\n});\nEditorRefPlugin.displayName = \"EditorRefPlugin\";\nfunction EventListenerPlugin(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4), editor = (0,_chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_4__.useEditor)();\n  let t0, t1;\n  return $[0] !== editor || $[1] !== props.on ? (t0 = () => {\n    const subscription = editor.on(\"*\", props.on);\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t1 = [editor, props.on], $[0] = editor, $[1] = props.on, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1), null;\n}\nfunction createMarkdownBehaviors(config) {\n  const automaticBlockquoteOnSpace = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (event.text !== \" \")\n        return !1;\n      const selectionCollapsed = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.isSelectionCollapsed)(snapshot), focusTextBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot), focusSpan = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.getFocusSpan)(snapshot);\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const previousInlineObject = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.getPreviousInlineObject)(snapshot), blockOffset = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_7__.spanSelectionPointToBlockOffset)({\n        context: snapshot.context,\n        selectionPoint: {\n          path: [{\n            _key: focusTextBlock.node._key\n          }, \"children\", {\n            _key: focusSpan.node._key\n          }],\n          offset: snapshot.context.selection?.focus.offset ?? 0\n        }\n      });\n      if (previousInlineObject || !blockOffset)\n        return !1;\n      const blockText = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_7__.getTextBlockText)(focusTextBlock.node), caretAtTheEndOfQuote = blockOffset.offset === 1, looksLikeMarkdownQuote = /^>/.test(blockText), blockquoteStyle = config.blockquoteStyle?.(snapshot.context);\n      return caretAtTheEndOfQuote && looksLikeMarkdownQuote && blockquoteStyle !== void 0 ? {\n        focusTextBlock,\n        style: blockquoteStyle\n      } : !1;\n    },\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.text\",\n      text: \" \"\n    })], (_, {\n      focusTextBlock,\n      style\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"block.unset\",\n      props: [\"listItem\", \"level\"],\n      at: focusTextBlock.path\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"block.set\",\n      props: {\n        style\n      },\n      at: focusTextBlock.path\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"delete.text\",\n      at: {\n        anchor: {\n          path: focusTextBlock.path,\n          offset: 0\n        },\n        focus: {\n          path: focusTextBlock.path,\n          offset: 2\n        }\n      }\n    })]]\n  }), automaticHr = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      const hrCharacter = event.text === \"-\" ? \"-\" : event.text === \"*\" ? \"*\" : event.text === \"_\" ? \"_\" : void 0;\n      if (hrCharacter === void 0)\n        return !1;\n      const hrObject = config.horizontalRuleObject?.(snapshot.context), focusBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot), selectionCollapsed = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.isSelectionCollapsed)(snapshot);\n      if (!hrObject || !focusBlock || !selectionCollapsed)\n        return !1;\n      const previousInlineObject = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.getPreviousInlineObject)(snapshot), textBefore = (0,_chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_8__.getBlockTextBefore)(snapshot), hrBlockOffsets = {\n        anchor: {\n          path: focusBlock.path,\n          offset: 0\n        },\n        focus: {\n          path: focusBlock.path,\n          offset: 3\n        }\n      };\n      return !previousInlineObject && textBefore === `${hrCharacter}${hrCharacter}` ? {\n        hrObject,\n        focusBlock,\n        hrCharacter,\n        hrBlockOffsets\n      } : !1;\n    },\n    actions: [(_, {\n      hrCharacter\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.text\",\n      text: hrCharacter\n    })], (_, {\n      hrObject,\n      hrBlockOffsets\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.block\",\n      placement: \"before\",\n      block: {\n        _type: hrObject.name,\n        ...hrObject.value ?? {}\n      }\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"delete.text\",\n      at: hrBlockOffsets\n    })]]\n  }), automaticHrOnPaste = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"clipboard.paste\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      const text = event.originEvent.dataTransfer.getData(\"text/plain\"), hrRegExp = /^(---)$|(___)$|(\\*\\*\\*)$/, hrCharacters = text.match(hrRegExp)?.[0], hrObject = config.horizontalRuleObject?.(snapshot.context), focusBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.getFocusBlock)(snapshot);\n      return !hrCharacters || !hrObject || !focusBlock ? !1 : {\n        hrCharacters,\n        hrObject,\n        focusBlock\n      };\n    },\n    actions: [(_, {\n      hrCharacters\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.text\",\n      text: hrCharacters\n    })], ({\n      snapshot\n    }, {\n      hrObject,\n      focusBlock\n    }) => (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_14__.isTextBlock)(snapshot.context, focusBlock.node) ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.block\",\n      block: {\n        _type: snapshot.context.schema.block.name,\n        children: focusBlock.node.children\n      },\n      placement: \"after\"\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.block\",\n      block: {\n        _type: hrObject.name,\n        ...hrObject.value ?? {}\n      },\n      placement: \"after\"\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"delete.block\",\n      at: focusBlock.path\n    })] : [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.block\",\n      block: {\n        _type: hrObject.name,\n        ...hrObject.value ?? {}\n      },\n      placement: \"after\"\n    })]]\n  }), automaticHeadingOnSpace = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (event.text !== \" \")\n        return !1;\n      const selectionCollapsed = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.isSelectionCollapsed)(snapshot), focusTextBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot), focusSpan = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.getFocusSpan)(snapshot);\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const blockOffset = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_7__.spanSelectionPointToBlockOffset)({\n        context: snapshot.context,\n        selectionPoint: {\n          path: [{\n            _key: focusTextBlock.node._key\n          }, \"children\", {\n            _key: focusSpan.node._key\n          }],\n          offset: snapshot.context.selection?.focus.offset ?? 0\n        }\n      });\n      if (!blockOffset)\n        return !1;\n      const previousInlineObject = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.getPreviousInlineObject)(snapshot), blockText = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_7__.getTextBlockText)(focusTextBlock.node), markdownHeadingSearch = /^#+/.exec(blockText), level = markdownHeadingSearch ? markdownHeadingSearch[0].length : void 0, caretAtTheEndOfHeading = blockOffset.offset === level;\n      if (previousInlineObject || !caretAtTheEndOfHeading)\n        return !1;\n      const style = level !== void 0 ? config.headingStyle?.({\n        schema: snapshot.context.schema,\n        level\n      }) : void 0;\n      return level !== void 0 && style !== void 0 ? {\n        focusTextBlock,\n        style,\n        level\n      } : !1;\n    },\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)(event)], (_, {\n      focusTextBlock,\n      style,\n      level\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"block.unset\",\n      props: [\"listItem\", \"level\"],\n      at: focusTextBlock.path\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"block.set\",\n      props: {\n        style\n      },\n      at: focusTextBlock.path\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"delete.text\",\n      at: {\n        anchor: {\n          path: focusTextBlock.path,\n          offset: 0\n        },\n        focus: {\n          path: focusTextBlock.path,\n          offset: level + 1\n        }\n      }\n    })]]\n  }), clearStyleOnBackspace = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"delete.backward\",\n    guard: ({\n      snapshot\n    }) => {\n      const selectionCollapsed = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.isSelectionCollapsed)(snapshot), focusTextBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot), focusSpan = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.getFocusSpan)(snapshot);\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const atTheBeginningOfBLock = focusTextBlock.node.children[0]._key === focusSpan.node._key && snapshot.context.selection?.focus.offset === 0, defaultStyle = config.defaultStyle?.(snapshot.context);\n      return atTheBeginningOfBLock && defaultStyle && focusTextBlock.node.style !== defaultStyle ? {\n        defaultStyle,\n        focusTextBlock\n      } : !1;\n    },\n    actions: [(_, {\n      defaultStyle,\n      focusTextBlock\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"block.set\",\n      props: {\n        style: defaultStyle\n      },\n      at: focusTextBlock.path\n    })]]\n  }), automaticListOnSpace = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (event.text !== \" \")\n        return !1;\n      const selectionCollapsed = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.isSelectionCollapsed)(snapshot), focusTextBlock = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot), focusSpan = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.getFocusSpan)(snapshot);\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const previousInlineObject = (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.getPreviousInlineObject)(snapshot), blockOffset = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_7__.spanSelectionPointToBlockOffset)({\n        context: snapshot.context,\n        selectionPoint: {\n          path: [{\n            _key: focusTextBlock.node._key\n          }, \"children\", {\n            _key: focusSpan.node._key\n          }],\n          offset: snapshot.context.selection?.focus.offset ?? 0\n        }\n      });\n      if (previousInlineObject || !blockOffset)\n        return !1;\n      const blockText = (0,_chunks_es_util_get_text_block_text_js__WEBPACK_IMPORTED_MODULE_7__.getTextBlockText)(focusTextBlock.node), defaultStyle = config.defaultStyle?.(snapshot.context), looksLikeUnorderedList = /^(-|\\*)/.test(blockText), unorderedListStyle = config.unorderedListStyle?.(snapshot.context), caretAtTheEndOfUnorderedList = blockOffset.offset === 1;\n      if (defaultStyle && caretAtTheEndOfUnorderedList && looksLikeUnorderedList && unorderedListStyle !== void 0)\n        return {\n          focusTextBlock,\n          listItem: unorderedListStyle,\n          listItemLength: 1,\n          style: defaultStyle\n        };\n      const looksLikeOrderedList = /^1\\./.test(blockText), orderedListStyle = config.orderedListStyle?.(snapshot.context), caretAtTheEndOfOrderedList = blockOffset.offset === 2;\n      return defaultStyle && caretAtTheEndOfOrderedList && looksLikeOrderedList && orderedListStyle !== void 0 ? {\n        focusTextBlock,\n        listItem: orderedListStyle,\n        listItemLength: 2,\n        style: defaultStyle\n      } : !1;\n    },\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)(event)], (_, {\n      focusTextBlock,\n      style,\n      listItem,\n      listItemLength\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"block.set\",\n      props: {\n        listItem,\n        level: 1,\n        style\n      },\n      at: focusTextBlock.path\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"delete.text\",\n      at: {\n        anchor: {\n          path: focusTextBlock.path,\n          offset: 0\n        },\n        focus: {\n          path: focusTextBlock.path,\n          offset: listItemLength + 1\n        }\n      }\n    })]]\n  });\n  return [automaticBlockquoteOnSpace, automaticHeadingOnSpace, automaticHr, automaticHrOnPaste, clearStyleOnBackspace, automaticListOnSpace];\n}\nfunction MarkdownPlugin(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(17), editor = (0,_chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_4__.useEditor)();\n  let t0, t1;\n  $[0] !== editor || $[1] !== props.config ? (t0 = () => {\n    const unregisterBehaviors = createMarkdownBehaviors(props.config).map((behavior) => editor.registerBehavior({\n      behavior\n    }));\n    return () => {\n      for (const unregisterBehavior of unregisterBehaviors)\n        unregisterBehavior();\n    };\n  }, t1 = [editor, props.config], $[0] = editor, $[1] = props.config, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1);\n  let t2;\n  $[4] !== props.config.boldDecorator ? (t2 = props.config.boldDecorator ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.boldDecorator, pair: {\n      char: \"*\",\n      amount: 2\n    } }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.boldDecorator, pair: {\n      char: \"_\",\n      amount: 2\n    } })\n  ] }) : null, $[4] = props.config.boldDecorator, $[5] = t2) : t2 = $[5];\n  let t3;\n  $[6] !== props.config.codeDecorator ? (t3 = props.config.codeDecorator ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.codeDecorator, pair: {\n    char: \"`\",\n    amount: 1\n  } }) : null, $[6] = props.config.codeDecorator, $[7] = t3) : t3 = $[7];\n  let t4;\n  $[8] !== props.config.italicDecorator ? (t4 = props.config.italicDecorator ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.italicDecorator, pair: {\n      char: \"*\",\n      amount: 1\n    } }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.italicDecorator, pair: {\n      char: \"_\",\n      amount: 1\n    } })\n  ] }) : null, $[8] = props.config.italicDecorator, $[9] = t4) : t4 = $[9];\n  let t5;\n  $[10] !== props.config.strikeThroughDecorator ? (t5 = props.config.strikeThroughDecorator ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.strikeThroughDecorator, pair: {\n    char: \"~\",\n    amount: 2\n  } }) : null, $[10] = props.config.strikeThroughDecorator, $[11] = t5) : t5 = $[11];\n  let t6;\n  return $[12] !== t2 || $[13] !== t3 || $[14] !== t4 || $[15] !== t5 ? (t6 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, { children: [\n    t2,\n    t3,\n    t4,\n    t5\n  ] }), $[12] = t2, $[13] = t3, $[14] = t4, $[15] = t5, $[16] = t6) : t6 = $[16], t6;\n}\nconst oneLineBehaviors = [\n  /**\n   * Hitting Enter on an expanded selection should just delete that selection\n   * without causing a line break.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.break\",\n    guard: ({\n      snapshot\n    }) => snapshot.context.selection && (0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.isSelectionExpanded)(snapshot) ? {\n      selection: snapshot.context.selection\n    } : !1,\n    actions: [(_, {\n      selection\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"delete\",\n      at: selection\n    })]]\n  }),\n  /**\n   * All other cases of `insert.break` should be aborted.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.break\",\n    actions: []\n  }),\n  /**\n   * `insert.block` `before` or `after` is not allowed in a one-line editor.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.block\",\n    guard: ({\n      event\n    }) => event.placement === \"before\" || event.placement === \"after\",\n    actions: []\n  }),\n  /**\n   * An ordinary `insert.block` is acceptable if it's a text block. In that\n   * case it will get merged into the existing text block.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.block\",\n    guard: ({\n      snapshot,\n      event\n    }) => !(!(0,_chunks_es_selector_get_selection_text_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot) || !(0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_14__.isTextBlock)(snapshot.context, event.block)),\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.block\",\n      block: event.block,\n      placement: \"auto\",\n      select: \"end\"\n    })]]\n  }),\n  /**\n   * Fallback Behavior to avoid `insert.block` in case the Behaviors above all\n   * end up with a falsy guard.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.block\",\n    actions: []\n  }),\n  /**\n   * If multiple blocks are inserted, then the non-text blocks are filtered out\n   * and the text blocks are merged into one block\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.blocks\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      const textBlocks = event.blocks.filter((block) => (0,_portabletext_schema__WEBPACK_IMPORTED_MODULE_14__.isTextBlock)(snapshot.context, block));\n      return textBlocks.length === 0 ? !1 : textBlocks.reduce((targetBlock, incomingBlock) => (0,_chunks_es_util_merge_text_blocks_js__WEBPACK_IMPORTED_MODULE_15__.mergeTextBlocks)({\n        context: snapshot.context,\n        targetBlock,\n        incomingBlock\n      }));\n    },\n    actions: [\n      // `insert.block` is raised so the Behavior above can handle the\n      // insertion\n      (_, block) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.raise)({\n        type: \"insert.block\",\n        block,\n        placement: \"auto\"\n      })]\n    ]\n  }),\n  /**\n   * Fallback Behavior to avoid `insert.blocks` in case the Behavior above\n   * ends up with a falsy guard.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.blocks\",\n    actions: []\n  })\n];\nfunction OneLinePlugin() {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(1);\n  let t0;\n  return $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(BehaviorPlugin, { behaviors: oneLineBehaviors }), $[0] = t0) : t0 = $[0], t0;\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@portabletext/editor/lib/plugins/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@portabletext/editor/node_modules/slate-react/dist/index.es.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/@portabletext/editor/node_modules/slate-react/dist/index.es.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultElement: () => (/* binding */ DefaultElement),\n/* harmony export */   DefaultLeaf: () => (/* binding */ DefaultLeaf),\n/* harmony export */   DefaultPlaceholder: () => (/* binding */ DefaultPlaceholder),\n/* harmony export */   DefaultText: () => (/* binding */ DefaultText),\n/* harmony export */   Editable: () => (/* binding */ Editable),\n/* harmony export */   NODE_TO_INDEX: () => (/* reexport safe */ slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_INDEX),\n/* harmony export */   NODE_TO_PARENT: () => (/* reexport safe */ slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_PARENT),\n/* harmony export */   ReactEditor: () => (/* binding */ ReactEditor),\n/* harmony export */   Slate: () => (/* binding */ Slate),\n/* harmony export */   defaultScrollSelectionIntoView: () => (/* binding */ defaultScrollSelectionIntoView),\n/* harmony export */   useComposing: () => (/* binding */ useComposing),\n/* harmony export */   useEditor: () => (/* binding */ useEditor),\n/* harmony export */   useElement: () => (/* binding */ useElement),\n/* harmony export */   useElementIf: () => (/* binding */ useElementIf),\n/* harmony export */   useFocused: () => (/* binding */ useFocused),\n/* harmony export */   useReadOnly: () => (/* binding */ useReadOnly),\n/* harmony export */   useSelected: () => (/* binding */ useSelected),\n/* harmony export */   useSlate: () => (/* binding */ useSlate),\n/* harmony export */   useSlateSelection: () => (/* binding */ useSlateSelection),\n/* harmony export */   useSlateSelector: () => (/* binding */ useSlateSelector),\n/* harmony export */   useSlateStatic: () => (/* binding */ useSlateStatic),\n/* harmony export */   useSlateWithV: () => (/* binding */ useSlateWithV),\n/* harmony export */   withReact: () => (/* binding */ withReact)\n/* harmony export */ });\n/* harmony import */ var direction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! direction */ \"(ssr)/../node_modules/direction/index.js\");\n/* harmony import */ var direction__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(direction__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/debounce */ \"(ssr)/../node_modules/lodash/debounce.js\");\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_debounce__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/throttle */ \"(ssr)/../node_modules/lodash/throttle.js\");\n/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_throttle__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var scroll_into_view_if_needed__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! scroll-into-view-if-needed */ \"(ssr)/../node_modules/scroll-into-view-if-needed/dist/index.js\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! slate */ \"(ssr)/../node_modules/slate/dist/index.es.js\");\n/* harmony import */ var slate_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! slate-dom */ \"(ssr)/../node_modules/slate-dom/dist/index.es.js\");\n/* harmony import */ var _juggle_resize_observer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @juggle/resize-observer */ \"(ssr)/../node_modules/@juggle/resize-observer/lib/exports/resize-observer.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-dom */ \"(ssr)/../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\n\n\n\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\n\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\n\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\n\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * A React context for sharing the editor object.\n */\nvar EditorContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(null);\n/**\n * Get the current editor object from the React context.\n */\nvar useSlateStatic = () => {\n  var editor = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(EditorContext);\n  if (!editor) {\n    throw new Error(\"The `useSlateStatic` hook must be used inside the <Slate> component's context.\");\n  }\n  return editor;\n};\n\n// eslint-disable-next-line no-redeclare\nvar ReactEditor = slate_dom__WEBPACK_IMPORTED_MODULE_4__.DOMEditor;\n\nfunction ownKeys$7(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$7(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$7(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$7(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n// https://github.com/facebook/draft-js/blob/main/src/component/handlers/composition/DraftEditorCompositionHandler.js#L41\n// When using keyboard English association function, conpositionEnd triggered too fast, resulting in after `insertText` still maintain association state.\nvar RESOLVE_DELAY = 25;\n// Time with no user interaction before the current user action is considered as done.\nvar FLUSH_DELAY = 200;\n// Replace with `const debug = console.log` to debug\nvar debug = function debug() {};\n// Type guard to check if a value is a DataTransfer\nvar isDataTransfer = value => (value === null || value === void 0 ? void 0 : value.constructor.name) === 'DataTransfer';\nfunction createAndroidInputManager(_ref) {\n  var {\n    editor,\n    scheduleOnDOMSelectionChange,\n    onDOMSelectionChange\n  } = _ref;\n  var flushing = false;\n  var compositionEndTimeoutId = null;\n  var flushTimeoutId = null;\n  var actionTimeoutId = null;\n  var idCounter = 0;\n  var insertPositionHint = false;\n  var applyPendingSelection = () => {\n    var pendingSelection = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.get(editor);\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.delete(editor);\n    if (pendingSelection) {\n      var {\n        selection\n      } = editor;\n      var normalized = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.normalizeRange)(editor, pendingSelection);\n      if (normalized && (!selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(normalized, selection))) {\n        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, normalized);\n      }\n    }\n  };\n  var performAction = () => {\n    var action = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.get(editor);\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.delete(editor);\n    if (!action) {\n      return;\n    }\n    if (action.at) {\n      var target = slate__WEBPACK_IMPORTED_MODULE_7__.Point.isPoint(action.at) ? (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.normalizePoint)(editor, action.at) : (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.normalizeRange)(editor, action.at);\n      if (!target) {\n        return;\n      }\n      var _targetRange = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, target);\n      if (!editor.selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(editor.selection, _targetRange)) {\n        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, target);\n      }\n    }\n    action.run();\n  };\n  var flush = () => {\n    if (flushTimeoutId) {\n      clearTimeout(flushTimeoutId);\n      flushTimeoutId = null;\n    }\n    if (actionTimeoutId) {\n      clearTimeout(actionTimeoutId);\n      actionTimeoutId = null;\n    }\n    if (!hasPendingDiffs() && !hasPendingAction()) {\n      applyPendingSelection();\n      return;\n    }\n    if (!flushing) {\n      flushing = true;\n      setTimeout(() => flushing = false);\n    }\n    if (hasPendingAction()) {\n      flushing = 'action';\n    }\n    var selectionRef = editor.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.rangeRef(editor, editor.selection, {\n      affinity: 'forward'\n    });\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.set(editor, editor.marks);\n    debug('flush', slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.get(editor), slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor));\n    var scheduleSelectionChange = hasPendingDiffs();\n    var diff;\n    while (diff = (_EDITOR_TO_PENDING_DI = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI === void 0 ? void 0 : _EDITOR_TO_PENDING_DI[0]) {\n      var _EDITOR_TO_PENDING_DI, _EDITOR_TO_PENDING_DI2;\n      var pendingMarks = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);\n      if (pendingMarks !== undefined) {\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);\n        editor.marks = pendingMarks;\n      }\n      if (pendingMarks && insertPositionHint === false) {\n        insertPositionHint = null;\n      }\n      var range = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.targetRange)(diff);\n      if (!editor.selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(editor.selection, range)) {\n        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n      }\n      if (diff.diff.text) {\n        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, diff.diff.text);\n      } else {\n        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor);\n      }\n      // Remove diff only after we have applied it to account for it when transforming\n      // pending ranges.\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.set(editor, (_EDITOR_TO_PENDING_DI2 = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI2 === void 0 ? void 0 : _EDITOR_TO_PENDING_DI2.filter(_ref2 => {\n        var {\n          id\n        } = _ref2;\n        return id !== diff.id;\n      }));\n      if (!(0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.verifyDiffState)(editor, diff)) {\n        scheduleSelectionChange = false;\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.delete(editor);\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.delete(editor);\n        flushing = 'action';\n        // Ensure we don't restore the pending user (dom) selection\n        // since the document and dom state do not match.\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.delete(editor);\n        scheduleOnDOMSelectionChange.cancel();\n        onDOMSelectionChange.cancel();\n        selectionRef === null || selectionRef === void 0 || selectionRef.unref();\n      }\n    }\n    var selection = selectionRef === null || selectionRef === void 0 ? void 0 : selectionRef.unref();\n    if (selection && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.get(editor) && (!editor.selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(selection, editor.selection))) {\n      slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, selection);\n    }\n    if (hasPendingAction()) {\n      performAction();\n      return;\n    }\n    // COMPAT: The selectionChange event is fired after the action is performed,\n    // so we have to manually schedule it to ensure we don't 'throw away' the selection\n    // while rendering if we have pending changes.\n    if (scheduleSelectionChange) {\n      scheduleOnDOMSelectionChange();\n    }\n    scheduleOnDOMSelectionChange.flush();\n    onDOMSelectionChange.flush();\n    applyPendingSelection();\n    var userMarks = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.get(editor);\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.delete(editor);\n    if (userMarks !== undefined) {\n      editor.marks = userMarks;\n      editor.onChange();\n    }\n  };\n  var handleCompositionEnd = _event => {\n    if (compositionEndTimeoutId) {\n      clearTimeout(compositionEndTimeoutId);\n    }\n    compositionEndTimeoutId = setTimeout(() => {\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, false);\n      flush();\n    }, RESOLVE_DELAY);\n  };\n  var handleCompositionStart = _event => {\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, true);\n    if (compositionEndTimeoutId) {\n      clearTimeout(compositionEndTimeoutId);\n      compositionEndTimeoutId = null;\n    }\n  };\n  var updatePlaceholderVisibility = function updatePlaceholderVisibility() {\n    var forceHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var placeholderElement = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PLACEHOLDER_ELEMENT.get(editor);\n    if (!placeholderElement) {\n      return;\n    }\n    if (hasPendingDiffs() || forceHide) {\n      placeholderElement.style.display = 'none';\n      return;\n    }\n    placeholderElement.style.removeProperty('display');\n  };\n  var storeDiff = (path, diff) => {\n    var _EDITOR_TO_PENDING_DI3;\n    var pendingDiffs = (_EDITOR_TO_PENDING_DI3 = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI3 !== void 0 ? _EDITOR_TO_PENDING_DI3 : [];\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.set(editor, pendingDiffs);\n    var target = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, path);\n    var idx = pendingDiffs.findIndex(change => slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(change.path, path));\n    if (idx < 0) {\n      var normalized = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.normalizeStringDiff)(target.text, diff);\n      if (normalized) {\n        pendingDiffs.push({\n          path,\n          diff,\n          id: idCounter++\n        });\n      }\n      updatePlaceholderVisibility();\n      return;\n    }\n    var merged = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.mergeStringDiffs)(target.text, pendingDiffs[idx].diff, diff);\n    if (!merged) {\n      pendingDiffs.splice(idx, 1);\n      updatePlaceholderVisibility();\n      return;\n    }\n    pendingDiffs[idx] = _objectSpread$7(_objectSpread$7({}, pendingDiffs[idx]), {}, {\n      diff: merged\n    });\n  };\n  var scheduleAction = function scheduleAction(run) {\n    var {\n      at\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    insertPositionHint = false;\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.delete(editor);\n    scheduleOnDOMSelectionChange.cancel();\n    onDOMSelectionChange.cancel();\n    if (hasPendingAction()) {\n      flush();\n    }\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.set(editor, {\n      at,\n      run\n    });\n    // COMPAT: When deleting before a non-contenteditable element chrome only fires a beforeinput,\n    // (no input) and doesn't perform any dom mutations. Without a flush timeout we would never flush\n    // in this case and thus never actually perform the action.\n    actionTimeoutId = setTimeout(flush);\n  };\n  var handleDOMBeforeInput = event => {\n    var _targetRange2;\n    if (flushTimeoutId) {\n      clearTimeout(flushTimeoutId);\n      flushTimeoutId = null;\n    }\n    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_NODE_MAP_DIRTY.get(editor)) {\n      return;\n    }\n    var {\n      inputType: type\n    } = event;\n    var targetRange = null;\n    var data = event.dataTransfer || event.data || undefined;\n    if (insertPositionHint !== false && type !== 'insertText' && type !== 'insertCompositionText') {\n      insertPositionHint = false;\n    }\n    var [nativeTargetRange] = event.getTargetRanges();\n    if (nativeTargetRange) {\n      targetRange = ReactEditor.toSlateRange(editor, nativeTargetRange, {\n        exactMatch: false,\n        suppressThrow: true\n      });\n    }\n    // COMPAT: SelectionChange event is fired after the action is performed, so we\n    // have to manually get the selection here to ensure it's up-to-date.\n    var window = ReactEditor.getWindow(editor);\n    var domSelection = window.getSelection();\n    if (!targetRange && domSelection) {\n      nativeTargetRange = domSelection;\n      targetRange = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: false,\n        suppressThrow: true\n      });\n    }\n    targetRange = (_targetRange2 = targetRange) !== null && _targetRange2 !== void 0 ? _targetRange2 : editor.selection;\n    if (!targetRange) {\n      return;\n    }\n    // By default, the input manager tries to store text diffs so that we can\n    // defer flushing them at a later point in time. We don't want to flush\n    // for every input event as this can be expensive. However, there are some\n    // scenarios where we cannot safely store the text diff and must instead\n    // schedule an action to let Slate normalize the editor state.\n    var canStoreDiff = true;\n    if (type.startsWith('delete')) {\n      var direction = type.endsWith('Backward') ? 'backward' : 'forward';\n      var [start, end] = slate__WEBPACK_IMPORTED_MODULE_7__.Range.edges(targetRange);\n      var [leaf, path] = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.leaf(editor, start.path);\n      if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(targetRange)) {\n        if (leaf.text.length === start.offset && end.offset === 0) {\n          var next = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.next(editor, {\n            at: start.path,\n            match: slate__WEBPACK_IMPORTED_MODULE_7__.Text.isText\n          });\n          if (next && slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(next[1], end.path)) {\n            // when deleting a linebreak, targetRange will span across the break (ie start in the node before and end in the node after)\n            // if the node before is empty, this will look like a hanging range and get unhung later--which will take the break we want to remove out of the range\n            // so to avoid this we collapse the target range to default to single character deletion\n            if (direction === 'backward') {\n              targetRange = {\n                anchor: end,\n                focus: end\n              };\n              start = end;\n              [leaf, path] = next;\n            } else {\n              targetRange = {\n                anchor: start,\n                focus: start\n              };\n              end = start;\n            }\n          }\n        }\n      }\n      var diff = {\n        text: '',\n        start: start.offset,\n        end: end.offset\n      };\n      var pendingDiffs = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor);\n      var relevantPendingDiffs = pendingDiffs === null || pendingDiffs === void 0 ? void 0 : pendingDiffs.find(change => slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(change.path, path));\n      var diffs = relevantPendingDiffs ? [relevantPendingDiffs.diff, diff] : [diff];\n      var text = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.applyStringDiff)(leaf.text, ...diffs);\n      if (text.length === 0) {\n        // Text leaf will be removed, so we need to schedule an\n        // action to remove it so that Slate can normalize instead\n        // of storing as a diff\n        canStoreDiff = false;\n      }\n      if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(targetRange)) {\n        if (canStoreDiff && slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(targetRange.anchor.path, targetRange.focus.path)) {\n          var point = {\n            path: targetRange.anchor.path,\n            offset: start.offset\n          };\n          var range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, point, point);\n          handleUserSelect(range);\n          return storeDiff(targetRange.anchor.path, {\n            text: '',\n            end: end.offset,\n            start: start.offset\n          });\n        }\n        return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n          direction\n        }), {\n          at: targetRange\n        });\n      }\n    }\n    switch (type) {\n      case 'deleteByComposition':\n      case 'deleteByCut':\n      case 'deleteByDrag':\n        {\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor), {\n            at: targetRange\n          });\n        }\n      case 'deleteContent':\n      case 'deleteContentForward':\n        {\n          var {\n            anchor\n          } = targetRange;\n          if (canStoreDiff && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(targetRange)) {\n            var targetNode = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, anchor.path);\n            if (anchor.offset < targetNode.text.length) {\n              return storeDiff(anchor.path, {\n                text: '',\n                start: anchor.offset,\n                end: anchor.offset + 1\n              });\n            }\n          }\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor), {\n            at: targetRange\n          });\n        }\n      case 'deleteContentBackward':\n        {\n          var _nativeTargetRange;\n          var {\n            anchor: _anchor\n          } = targetRange;\n          // If we have a mismatch between the native and slate selection being collapsed\n          // we are most likely deleting a zero-width placeholder and thus should perform it\n          // as an action to ensure correct behavior (mostly happens with mark placeholders)\n          var nativeCollapsed = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isDOMSelection)(nativeTargetRange) ? nativeTargetRange.isCollapsed : !!((_nativeTargetRange = nativeTargetRange) !== null && _nativeTargetRange !== void 0 && _nativeTargetRange.collapsed);\n          if (canStoreDiff && nativeCollapsed && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(targetRange) && _anchor.offset > 0) {\n            return storeDiff(_anchor.path, {\n              text: '',\n              start: _anchor.offset - 1,\n              end: _anchor.offset\n            });\n          }\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor), {\n            at: targetRange\n          });\n        }\n      case 'deleteEntireSoftLine':\n        {\n          return scheduleAction(() => {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n          }, {\n            at: targetRange\n          });\n        }\n      case 'deleteHardLineBackward':\n        {\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n            unit: 'block'\n          }), {\n            at: targetRange\n          });\n        }\n      case 'deleteSoftLineBackward':\n        {\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n            unit: 'line'\n          }), {\n            at: targetRange\n          });\n        }\n      case 'deleteHardLineForward':\n        {\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n            unit: 'block'\n          }), {\n            at: targetRange\n          });\n        }\n      case 'deleteSoftLineForward':\n        {\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n            unit: 'line'\n          }), {\n            at: targetRange\n          });\n        }\n      case 'deleteWordBackward':\n        {\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n            unit: 'word'\n          }), {\n            at: targetRange\n          });\n        }\n      case 'deleteWordForward':\n        {\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n            unit: 'word'\n          }), {\n            at: targetRange\n          });\n        }\n      case 'insertLineBreak':\n        {\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertSoftBreak(editor), {\n            at: targetRange\n          });\n        }\n      case 'insertParagraph':\n        {\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertBreak(editor), {\n            at: targetRange\n          });\n        }\n      case 'insertCompositionText':\n      case 'deleteCompositionText':\n      case 'insertFromComposition':\n      case 'insertFromDrop':\n      case 'insertFromPaste':\n      case 'insertFromYank':\n      case 'insertReplacementText':\n      case 'insertText':\n        {\n          if (isDataTransfer(data)) {\n            return scheduleAction(() => ReactEditor.insertData(editor, data), {\n              at: targetRange\n            });\n          }\n          var _text = data !== null && data !== void 0 ? data : '';\n          // COMPAT: If we are writing inside a placeholder, the ime inserts the text inside\n          // the placeholder itself and thus includes the zero-width space inside edit events.\n          if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.get(editor)) {\n            _text = _text.replace('\\uFEFF', '');\n          }\n          // Pastes from the Android clipboard will generate `insertText` events.\n          // If the copied text contains any newlines, Android will append an\n          // extra newline to the end of the copied text.\n          if (type === 'insertText' && /.*\\n.*\\n$/.test(_text)) {\n            _text = _text.slice(0, -1);\n          }\n          // If the text includes a newline, split it at newlines and paste each component\n          // string, with soft breaks in between each.\n          if (_text.includes('\\n')) {\n            return scheduleAction(() => {\n              var parts = _text.split('\\n');\n              parts.forEach((line, i) => {\n                if (line) {\n                  slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, line);\n                }\n                if (i !== parts.length - 1) {\n                  slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertSoftBreak(editor);\n                }\n              });\n            }, {\n              at: targetRange\n            });\n          }\n          if (slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(targetRange.anchor.path, targetRange.focus.path)) {\n            var [_start, _end] = slate__WEBPACK_IMPORTED_MODULE_7__.Range.edges(targetRange);\n            var _diff = {\n              start: _start.offset,\n              end: _end.offset,\n              text: _text\n            };\n            // COMPAT: Swiftkey has a weird bug where the target range of the 2nd word\n            // inserted after a mark placeholder is inserted with an anchor offset off by 1.\n            // So writing 'some text' will result in 'some ttext'. Luckily all 'normal' insert\n            // text events are fired with the correct target ranges, only the final 'insertComposition'\n            // isn't, so we can adjust the target range start offset if we are confident this is the\n            // swiftkey insert causing the issue.\n            if (_text && insertPositionHint && type === 'insertCompositionText') {\n              var hintPosition = insertPositionHint.start + insertPositionHint.text.search(/\\S|$/);\n              var diffPosition = _diff.start + _diff.text.search(/\\S|$/);\n              if (diffPosition === hintPosition + 1 && _diff.end === insertPositionHint.start + insertPositionHint.text.length) {\n                _diff.start -= 1;\n                insertPositionHint = null;\n                scheduleFlush();\n              } else {\n                insertPositionHint = false;\n              }\n            } else if (type === 'insertText') {\n              if (insertPositionHint === null) {\n                insertPositionHint = _diff;\n              } else if (insertPositionHint && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(targetRange) && insertPositionHint.end + insertPositionHint.text.length === _start.offset) {\n                insertPositionHint = _objectSpread$7(_objectSpread$7({}, insertPositionHint), {}, {\n                  text: insertPositionHint.text + _text\n                });\n              } else {\n                insertPositionHint = false;\n              }\n            } else {\n              insertPositionHint = false;\n            }\n            if (canStoreDiff) {\n              var currentSelection = editor.selection;\n              storeDiff(_start.path, _diff);\n              if (currentSelection) {\n                var newPoint = {\n                  path: _start.path,\n                  offset: _start.offset + _text.length\n                };\n                scheduleAction(() => {\n                  slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, {\n                    anchor: newPoint,\n                    focus: newPoint\n                  });\n                }, {\n                  at: newPoint\n                });\n              }\n              return;\n            }\n          }\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, _text), {\n            at: targetRange\n          });\n        }\n    }\n  };\n  var hasPendingAction = () => {\n    return !!slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.get(editor);\n  };\n  var hasPendingDiffs = () => {\n    var _EDITOR_TO_PENDING_DI4;\n    return !!((_EDITOR_TO_PENDING_DI4 = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI4 !== void 0 && _EDITOR_TO_PENDING_DI4.length);\n  };\n  var hasPendingChanges = () => {\n    return hasPendingAction() || hasPendingDiffs();\n  };\n  var isFlushing = () => {\n    return flushing;\n  };\n  var handleUserSelect = range => {\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.set(editor, range);\n    if (flushTimeoutId) {\n      clearTimeout(flushTimeoutId);\n      flushTimeoutId = null;\n    }\n    var {\n      selection\n    } = editor;\n    if (!range) {\n      return;\n    }\n    var pathChanged = !selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(selection.anchor.path, range.anchor.path);\n    var parentPathChanged = !selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(selection.anchor.path.slice(0, -1), range.anchor.path.slice(0, -1));\n    if (pathChanged && insertPositionHint || parentPathChanged) {\n      insertPositionHint = false;\n    }\n    if (pathChanged || hasPendingDiffs()) {\n      flushTimeoutId = setTimeout(flush, FLUSH_DELAY);\n    }\n  };\n  var handleInput = () => {\n    if (hasPendingAction() || !hasPendingDiffs()) {\n      flush();\n    }\n  };\n  var handleKeyDown = _ => {\n    // COMPAT: Swiftkey closes the keyboard when typing inside a empty node\n    // directly next to a non-contenteditable element (= the placeholder).\n    // The only event fired soon enough for us to allow hiding the placeholder\n    // without swiftkey picking it up is the keydown event, so we have to hide it\n    // here. See https://github.com/ianstormtaylor/slate/pull/4988#issuecomment-1201050535\n    if (!hasPendingDiffs()) {\n      updatePlaceholderVisibility(true);\n      setTimeout(updatePlaceholderVisibility);\n    }\n  };\n  var scheduleFlush = () => {\n    if (!hasPendingAction()) {\n      actionTimeoutId = setTimeout(flush);\n    }\n  };\n  var handleDomMutations = mutations => {\n    if (hasPendingDiffs() || hasPendingAction()) {\n      return;\n    }\n    if (mutations.some(mutation => (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isTrackedMutation)(editor, mutation, mutations))) {\n      var _EDITOR_TO_FORCE_REND;\n      // Cause a re-render to restore the dom state if we encounter tracked mutations without\n      // a corresponding pending action.\n      (_EDITOR_TO_FORCE_REND = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_FORCE_RENDER.get(editor)) === null || _EDITOR_TO_FORCE_REND === void 0 || _EDITOR_TO_FORCE_REND();\n    }\n  };\n  return {\n    flush,\n    scheduleFlush,\n    hasPendingDiffs,\n    hasPendingAction,\n    hasPendingChanges,\n    isFlushing,\n    handleUserSelect,\n    handleCompositionEnd,\n    handleCompositionStart,\n    handleDOMBeforeInput,\n    handleKeyDown,\n    handleDomMutations,\n    handleInput\n  };\n}\n\nfunction useIsMounted() {\n  var isMountedRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n  return isMountedRef.current;\n}\n\n/**\n * Prevent warning on SSR by falling back to useEffect when DOM isn't available\n */\nvar useIsomorphicLayoutEffect = slate_dom__WEBPACK_IMPORTED_MODULE_4__.CAN_USE_DOM ? react__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_3__.useEffect;\n\nfunction useMutationObserver(node, callback, options) {\n  var [mutationObserver] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(() => new MutationObserver(callback));\n  useIsomorphicLayoutEffect(() => {\n    // Discard mutations caused during render phase. This works due to react calling\n    // useLayoutEffect synchronously after the render phase before the next tick.\n    mutationObserver.takeRecords();\n  });\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    if (!node.current) {\n      throw new Error('Failed to attach MutationObserver, `node` is undefined');\n    }\n    mutationObserver.observe(node.current, options);\n    return () => mutationObserver.disconnect();\n  }, [mutationObserver, node, options]);\n}\n\nvar _excluded$2 = [\"node\"];\nfunction ownKeys$6(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$6(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$6(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$6(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar MUTATION_OBSERVER_CONFIG$1 = {\n  subtree: true,\n  childList: true,\n  characterData: true\n};\nvar useAndroidInputManager = !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID ? () => null : _ref => {\n  var {\n      node\n    } = _ref,\n    options = _objectWithoutProperties(_ref, _excluded$2);\n  if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID) {\n    return null;\n  }\n  var editor = useSlateStatic();\n  var isMounted = useIsMounted();\n  var [inputManager] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(() => createAndroidInputManager(_objectSpread$6({\n    editor\n  }, options)));\n  useMutationObserver(node, inputManager.handleDomMutations, MUTATION_OBSERVER_CONFIG$1);\n  slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_SCHEDULE_FLUSH.set(editor, inputManager.scheduleFlush);\n  if (isMounted) {\n    inputManager.flush();\n  }\n  return inputManager;\n};\n\nfunction ownKeys$5(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$5(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$5(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$5(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n/**\n * Leaf content strings.\n */\nvar String$1 = props => {\n  var {\n    isLast,\n    leaf,\n    parent,\n    text\n  } = props;\n  var editor = useSlateStatic();\n  var path = ReactEditor.findPath(editor, text);\n  var parentPath = slate__WEBPACK_IMPORTED_MODULE_7__.Path.parent(path);\n  var isMarkPlaceholder = Boolean(leaf[slate_dom__WEBPACK_IMPORTED_MODULE_4__.MARK_PLACEHOLDER_SYMBOL]);\n  // COMPAT: Render text inside void nodes with a zero-width space.\n  // So the node can contain selection but the text is not visible.\n  if (editor.isVoid(parent)) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ZeroWidthString, {\n      length: slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(parent).length\n    });\n  }\n  // COMPAT: If this is the last text node in an empty block, render a zero-\n  // width space that will convert into a line break when copying and pasting\n  // to support expected plain text.\n  if (leaf.text === '' && parent.children[parent.children.length - 1] === text && !editor.isInline(parent) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.string(editor, parentPath) === '') {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ZeroWidthString, {\n      isLineBreak: true,\n      isMarkPlaceholder: isMarkPlaceholder\n    });\n  }\n  // COMPAT: If the text is empty, it's because it's on the edge of an inline\n  // node, so we render a zero-width space so that the selection can be\n  // inserted next to it still.\n  if (leaf.text === '') {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ZeroWidthString, {\n      isMarkPlaceholder: isMarkPlaceholder\n    });\n  }\n  // COMPAT: Browsers will collapse trailing new lines at the end of blocks,\n  // so we need to add an extra trailing new lines to prevent that.\n  if (isLast && leaf.text.slice(-1) === '\\n') {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(TextString, {\n      isTrailing: true,\n      text: leaf.text\n    });\n  }\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(TextString, {\n    text: leaf.text\n  });\n};\n/**\n * Leaf strings with text in them.\n */\nvar TextString = props => {\n  var {\n    text,\n    isTrailing = false\n  } = props;\n  var ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n  var getTextContent = () => {\n    return \"\".concat(text !== null && text !== void 0 ? text : '').concat(isTrailing ? '\\n' : '');\n  };\n  var [initialText] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(getTextContent);\n  // This is the actual text rendering boundary where we interface with the DOM\n  // The text is not rendered as part of the virtual DOM, as since we handle basic character insertions natively,\n  // updating the DOM is not a one way dataflow anymore. What we need here is not reconciliation and diffing\n  // with previous version of the virtual DOM, but rather diffing with the actual DOM element, and replace the DOM <span> content\n  // exactly if and only if its current content does not match our current virtual DOM.\n  // Otherwise the DOM TextNode would always be replaced by React as the user types, which interferes with native text features,\n  // eg makes native spellcheck opt out from checking the text node.\n  // useLayoutEffect: updating our span before browser paint\n  useIsomorphicLayoutEffect(() => {\n    // null coalescing text to make sure we're not outputing \"null\" as a string in the extreme case it is nullish at runtime\n    var textWithTrailing = getTextContent();\n    if (ref.current && ref.current.textContent !== textWithTrailing) {\n      ref.current.textContent = textWithTrailing;\n    }\n    // intentionally not specifying dependencies, so that this effect runs on every render\n    // as this effectively replaces \"specifying the text in the virtual DOM under the <span> below\" on each render\n  });\n  // We intentionally render a memoized <span> that only receives the initial text content when the component is mounted.\n  // We defer to the layout effect above to update the `textContent` of the span element when needed.\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedText$1, {\n    ref: ref\n  }, initialText);\n};\nvar MemoizedText$1 = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_3__.memo)( /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)((props, ref) => {\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", {\n    \"data-slate-string\": true,\n    ref: ref\n  }, props.children);\n}));\n/**\n * Leaf strings without text, render as zero-width strings.\n */\nvar ZeroWidthString = props => {\n  var {\n    length = 0,\n    isLineBreak = false,\n    isMarkPlaceholder = false\n  } = props;\n  var attributes = {\n    'data-slate-zero-width': isLineBreak ? 'n' : 'z',\n    'data-slate-length': length\n  };\n  if (isMarkPlaceholder) {\n    attributes['data-slate-mark-placeholder'] = true;\n  }\n  // FIXME: Inserting the \\uFEFF on iOS breaks capitalization at the start of an\n  // empty editor (https://github.com/ianstormtaylor/slate/issues/5199).\n  //\n  // However, not inserting the \\uFEFF on iOS causes the editor to crash when\n  // inserting any text using an IME at the start of a block. This appears to\n  // be because accepting an IME suggestion when at the start of a block (no\n  // preceding \\uFEFF) removes one or more DOM elements that `toSlateRange`\n  // depends on. (https://github.com/ianstormtaylor/slate/issues/5703)\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", _objectSpread$5({}, attributes), !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID || !isLineBreak ? '\\uFEFF' : null, isLineBreak ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"br\", null) : null);\n};\n\nfunction ownKeys$4(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$4(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$4(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n// Delay the placeholder on Android to prevent the keyboard from closing.\n// (https://github.com/ianstormtaylor/slate/pull/5368)\nvar PLACEHOLDER_DELAY = slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID ? 300 : 0;\nfunction disconnectPlaceholderResizeObserver(placeholderResizeObserver, releaseObserver) {\n  if (placeholderResizeObserver.current) {\n    placeholderResizeObserver.current.disconnect();\n    if (releaseObserver) {\n      placeholderResizeObserver.current = null;\n    }\n  }\n}\nfunction clearTimeoutRef(timeoutRef) {\n  if (timeoutRef.current) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = null;\n  }\n}\nvar defaultRenderLeaf = props => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DefaultLeaf, _objectSpread$4({}, props));\n/**\n * Individual leaves in a text node with unique formatting.\n */\nvar Leaf = props => {\n  var {\n    leaf,\n    isLast,\n    text,\n    parent,\n    renderPlaceholder,\n    renderLeaf = defaultRenderLeaf,\n    leafPosition\n  } = props;\n  var editor = useSlateStatic();\n  var placeholderResizeObserver = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n  var placeholderRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n  var [showPlaceholder, setShowPlaceholder] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n  var showPlaceholderTimeoutRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n  var callbackPlaceholderRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(placeholderEl => {\n    disconnectPlaceholderResizeObserver(placeholderResizeObserver, placeholderEl == null);\n    if (placeholderEl == null) {\n      var _leaf$onPlaceholderRe;\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PLACEHOLDER_ELEMENT.delete(editor);\n      (_leaf$onPlaceholderRe = leaf.onPlaceholderResize) === null || _leaf$onPlaceholderRe === void 0 || _leaf$onPlaceholderRe.call(leaf, null);\n    } else {\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PLACEHOLDER_ELEMENT.set(editor, placeholderEl);\n      if (!placeholderResizeObserver.current) {\n        // Create a new observer and observe the placeholder element.\n        var ResizeObserver$1 = window.ResizeObserver || _juggle_resize_observer__WEBPACK_IMPORTED_MODULE_5__.ResizeObserver;\n        placeholderResizeObserver.current = new ResizeObserver$1(() => {\n          var _leaf$onPlaceholderRe2;\n          (_leaf$onPlaceholderRe2 = leaf.onPlaceholderResize) === null || _leaf$onPlaceholderRe2 === void 0 || _leaf$onPlaceholderRe2.call(leaf, placeholderEl);\n        });\n      }\n      placeholderResizeObserver.current.observe(placeholderEl);\n      placeholderRef.current = placeholderEl;\n    }\n  }, [placeholderRef, leaf, editor]);\n  var children = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(String$1, {\n    isLast: isLast,\n    leaf: leaf,\n    parent: parent,\n    text: text\n  });\n  var leafIsPlaceholder = Boolean(leaf[slate_dom__WEBPACK_IMPORTED_MODULE_4__.PLACEHOLDER_SYMBOL]);\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    if (leafIsPlaceholder) {\n      if (!showPlaceholderTimeoutRef.current) {\n        // Delay the placeholder, so it will not render in a selection\n        showPlaceholderTimeoutRef.current = setTimeout(() => {\n          setShowPlaceholder(true);\n          showPlaceholderTimeoutRef.current = null;\n        }, PLACEHOLDER_DELAY);\n      }\n    } else {\n      clearTimeoutRef(showPlaceholderTimeoutRef);\n      setShowPlaceholder(false);\n    }\n    return () => clearTimeoutRef(showPlaceholderTimeoutRef);\n  }, [leafIsPlaceholder, setShowPlaceholder]);\n  if (leafIsPlaceholder && showPlaceholder) {\n    var placeholderProps = {\n      children: leaf.placeholder,\n      attributes: {\n        'data-slate-placeholder': true,\n        style: {\n          position: 'absolute',\n          top: 0,\n          pointerEvents: 'none',\n          width: '100%',\n          maxWidth: '100%',\n          display: 'block',\n          opacity: '0.333',\n          userSelect: 'none',\n          textDecoration: 'none',\n          // Fixes https://github.com/udecode/plate/issues/2315\n          WebkitUserModify: slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT ? 'inherit' : undefined\n        },\n        contentEditable: false,\n        ref: callbackPlaceholderRef\n      }\n    };\n    children = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement((react__WEBPACK_IMPORTED_MODULE_3___default().Fragment), null, children, renderPlaceholder(placeholderProps));\n  }\n  // COMPAT: Having the `data-` attributes on these leaf elements ensures that\n  // in certain misbehaving browsers they aren't weirdly cloned/destroyed by\n  // contenteditable behaviors. (2019/05/08)\n  var attributes = {\n    'data-slate-leaf': true\n  };\n  return renderLeaf({\n    attributes,\n    children,\n    leaf,\n    text,\n    leafPosition\n  });\n};\nvar MemoizedLeaf = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().memo(Leaf, (prev, next) => {\n  return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.renderPlaceholder === prev.renderPlaceholder && next.text === prev.text && slate__WEBPACK_IMPORTED_MODULE_7__.Text.equals(next.leaf, prev.leaf) && next.leaf[slate_dom__WEBPACK_IMPORTED_MODULE_4__.PLACEHOLDER_SYMBOL] === prev.leaf[slate_dom__WEBPACK_IMPORTED_MODULE_4__.PLACEHOLDER_SYMBOL];\n});\nvar DefaultLeaf = props => {\n  var {\n    attributes,\n    children\n  } = props;\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", _objectSpread$4({}, attributes), children);\n};\n\n/**\n * Create a selector that updates when an `update` function is called, and\n * which only causes the component to render when the result of `selector`\n * differs from the previous result according to `equalityFn`.\n *\n * If `selector` is memoized using `useCallback`, then it will only be called\n * when it changes or when `update` is called. Otherwise, `selector` will be\n * called every time the component renders.\n *\n * @example\n * const [state, update] = useGenericSelector(selector, equalityFn)\n *\n * useIsomorphicLayoutEffect(() => {\n *   return addEventListener(update)\n * }, [addEventListener, update])\n *\n * return state\n */\nfunction useGenericSelector(selector, equalityFn) {\n  var [, forceRender] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useReducer)(s => s + 1, 0);\n  var latestSubscriptionCallbackError = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n  var latestSelector = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(() => null);\n  var latestSelectedState = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n  var selectedState;\n  try {\n    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n      var selectorResult = selector();\n      if (equalityFn(latestSelectedState.current, selectorResult)) {\n        selectedState = latestSelectedState.current;\n      } else {\n        selectedState = selectorResult;\n      }\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    if (latestSubscriptionCallbackError.current && isError(err)) {\n      err.message += \"\\nThe error may be correlated with this previous error:\\n\".concat(latestSubscriptionCallbackError.current.stack, \"\\n\\n\");\n    }\n    throw err;\n  }\n  latestSelector.current = selector;\n  latestSelectedState.current = selectedState;\n  latestSubscriptionCallbackError.current = undefined;\n  var update = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => {\n    try {\n      var newSelectedState = latestSelector.current();\n      if (equalityFn(latestSelectedState.current, newSelectedState)) {\n        return;\n      }\n      latestSelectedState.current = newSelectedState;\n    } catch (err) {\n      // we ignore all errors here, since when the component\n      // is re-rendered, the selectors are called again, and\n      // will throw again, if neither props nor store state\n      // changed\n      if (err instanceof Error) {\n        latestSubscriptionCallbackError.current = err;\n      } else {\n        latestSubscriptionCallbackError.current = new Error(String(err));\n      }\n    }\n    forceRender();\n    // don't rerender on equalityFn change since we want to be able to define it inline\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return [selectedState, update];\n}\nfunction isError(error) {\n  return error instanceof Error;\n}\n\n/**\n * A React context for sharing the `decorate` prop of the editable and\n * subscribing to changes on this prop.\n */\nvar DecorateContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({});\nvar useDecorations = (node, parentDecorations) => {\n  var editor = useSlateStatic();\n  var {\n    decorate,\n    addEventListener\n  } = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(DecorateContext);\n  // Not memoized since we want nodes to be decorated on each render\n  var selector = () => {\n    var path = ReactEditor.findPath(editor, node);\n    return decorate([node, path]);\n  };\n  var equalityFn = slate__WEBPACK_IMPORTED_MODULE_7__.Text.isText(node) ? slate_dom__WEBPACK_IMPORTED_MODULE_4__.isTextDecorationsEqual : slate_dom__WEBPACK_IMPORTED_MODULE_4__.isElementDecorationsEqual;\n  var [decorations, update] = useGenericSelector(selector, equalityFn);\n  useIsomorphicLayoutEffect(() => {\n    var unsubscribe = addEventListener(update);\n    update();\n    return unsubscribe;\n  }, [addEventListener, update]);\n  return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => [...decorations, ...parentDecorations], [decorations, parentDecorations]);\n};\nvar useDecorateContext = decorateProp => {\n  var eventListeners = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(new Set());\n  var latestDecorate = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(decorateProp);\n  useIsomorphicLayoutEffect(() => {\n    latestDecorate.current = decorateProp;\n    eventListeners.current.forEach(listener => listener());\n  }, [decorateProp]);\n  var decorate = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(entry => latestDecorate.current(entry), []);\n  var addEventListener = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(callback => {\n    eventListeners.current.add(callback);\n    return () => {\n      eventListeners.current.delete(callback);\n    };\n  }, []);\n  return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => ({\n    decorate,\n    addEventListener\n  }), [decorate, addEventListener]);\n};\n\nfunction ownKeys$3(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$3(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar defaultRenderText = props => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DefaultText, _objectSpread$3({}, props));\n/**\n * Text.\n */\nvar Text = props => {\n  var {\n    decorations: parentDecorations,\n    isLast,\n    parent,\n    renderPlaceholder,\n    renderLeaf,\n    renderText = defaultRenderText,\n    text\n  } = props;\n  var editor = useSlateStatic();\n  var ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n  var decorations = useDecorations(text, parentDecorations);\n  var decoratedLeaves = slate__WEBPACK_IMPORTED_MODULE_7__.Text.decorations(text, decorations);\n  var key = ReactEditor.findKey(editor, text);\n  var children = [];\n  for (var i = 0; i < decoratedLeaves.length; i++) {\n    var {\n      leaf,\n      position\n    } = decoratedLeaves[i];\n    children.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedLeaf, {\n      isLast: isLast && i === decoratedLeaves.length - 1,\n      key: \"\".concat(key.id, \"-\").concat(i),\n      renderPlaceholder: renderPlaceholder,\n      leaf: leaf,\n      leafPosition: position,\n      text: text,\n      parent: parent,\n      renderLeaf: renderLeaf\n    }));\n  }\n  // Update element-related weak maps with the DOM element ref.\n  var callbackRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(span => {\n    var KEY_TO_ELEMENT = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n    if (span) {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.set(key, span);\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.set(text, span);\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.ELEMENT_TO_NODE.set(span, text);\n    } else {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.delete(key);\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.delete(text);\n      if (ref.current) {\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.ELEMENT_TO_NODE.delete(ref.current);\n      }\n    }\n    ref.current = span;\n  }, [ref, editor, key, text]);\n  var attributes = {\n    'data-slate-node': 'text',\n    ref: callbackRef\n  };\n  return renderText({\n    text,\n    children,\n    attributes\n  });\n};\nvar MemoizedText = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().memo(Text, (prev, next) => {\n  return next.parent === prev.parent && next.isLast === prev.isLast && next.renderText === prev.renderText && next.renderLeaf === prev.renderLeaf && next.renderPlaceholder === prev.renderPlaceholder && next.text === prev.text && (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isTextDecorationsEqual)(next.decorations, prev.decorations);\n});\nvar DefaultText = props => {\n  var {\n    attributes,\n    children\n  } = props;\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", _objectSpread$3({}, attributes), children);\n};\n\nfunction ownKeys$2(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar defaultRenderElement = props => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DefaultElement, _objectSpread$2({}, props));\n/**\n * Element.\n */\nvar Element = props => {\n  var {\n    decorations: parentDecorations,\n    element,\n    renderElement = defaultRenderElement,\n    renderChunk,\n    renderPlaceholder,\n    renderLeaf,\n    renderText\n  } = props;\n  var editor = useSlateStatic();\n  var readOnly = useReadOnly();\n  var isInline = editor.isInline(element);\n  var decorations = useDecorations(element, parentDecorations);\n  var key = ReactEditor.findKey(editor, element);\n  var ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(ref => {\n    // Update element-related weak maps with the DOM element ref.\n    var KEY_TO_ELEMENT = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n    if (ref) {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.set(key, ref);\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.set(element, ref);\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.ELEMENT_TO_NODE.set(ref, element);\n    } else {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.delete(key);\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.delete(element);\n    }\n  }, [editor, key, element]);\n  var children = useChildren({\n    decorations,\n    node: element,\n    renderElement,\n    renderChunk,\n    renderPlaceholder,\n    renderLeaf,\n    renderText\n  });\n  // Attributes that the developer must mix into the element in their\n  // custom node renderer component.\n  var attributes = {\n    'data-slate-node': 'element',\n    ref\n  };\n  if (isInline) {\n    attributes['data-slate-inline'] = true;\n  }\n  // If it's a block node with inline children, add the proper `dir` attribute\n  // for text direction.\n  if (!isInline && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.hasInlines(editor, element)) {\n    var text = slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(element);\n    var dir = direction__WEBPACK_IMPORTED_MODULE_0___default()(text);\n    if (dir === 'rtl') {\n      attributes.dir = dir;\n    }\n  }\n  // If it's a void node, wrap the children in extra void-specific elements.\n  if (slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, element)) {\n    attributes['data-slate-void'] = true;\n    if (!readOnly && isInline) {\n      attributes.contentEditable = false;\n    }\n    var Tag = isInline ? 'span' : 'div';\n    var [[_text]] = slate__WEBPACK_IMPORTED_MODULE_7__.Node.texts(element);\n    children = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Tag, {\n      \"data-slate-spacer\": true,\n      style: {\n        height: '0',\n        color: 'transparent',\n        outline: 'none',\n        position: 'absolute'\n      }\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedText, {\n      renderPlaceholder: renderPlaceholder,\n      decorations: [],\n      isLast: false,\n      parent: element,\n      text: _text\n    }));\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_INDEX.set(_text, 0);\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_PARENT.set(_text, element);\n  }\n  return renderElement({\n    attributes,\n    children,\n    element\n  });\n};\nvar MemoizedElement = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().memo(Element, (prev, next) => {\n  return prev.element === next.element && prev.renderElement === next.renderElement && prev.renderChunk === next.renderChunk && prev.renderText === next.renderText && prev.renderLeaf === next.renderLeaf && prev.renderPlaceholder === next.renderPlaceholder && (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isElementDecorationsEqual)(prev.decorations, next.decorations);\n});\n/**\n * The default element renderer.\n */\nvar DefaultElement = props => {\n  var {\n    attributes,\n    children,\n    element\n  } = props;\n  var editor = useSlateStatic();\n  var Tag = editor.isInline(element) ? 'span' : 'div';\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Tag, _objectSpread$2(_objectSpread$2({}, attributes), {}, {\n    style: {\n      position: 'relative'\n    }\n  }), children);\n};\n\n/**\n * Traverse and modify a chunk tree\n */\nclass ChunkTreeHelper {\n  constructor(chunkTree, _ref) {\n    var {\n      chunkSize,\n      debug\n    } = _ref;\n    /**\n     * The root of the chunk tree\n     */\n    _defineProperty(this, \"root\", void 0);\n    /**\n     * The ideal size of a chunk\n     */\n    _defineProperty(this, \"chunkSize\", void 0);\n    /**\n     * Whether debug mode is enabled\n     *\n     * If enabled, the pointer state will be checked for internal consistency\n     * after each mutating operation.\n     */\n    _defineProperty(this, \"debug\", void 0);\n    /**\n     * Whether the traversal has reached the end of the chunk tree\n     *\n     * When this is true, the pointerChunk and pointerIndex point to the last\n     * top-level node in the chunk tree, although pointerNode returns null.\n     */\n    _defineProperty(this, \"reachedEnd\", void 0);\n    /**\n     * The chunk containing the current node\n     */\n    _defineProperty(this, \"pointerChunk\", void 0);\n    /**\n     * The index of the current node within pointerChunk\n     *\n     * Can be -1 to indicate that the pointer is before the start of the tree.\n     */\n    _defineProperty(this, \"pointerIndex\", void 0);\n    /**\n     * Similar to a Slate path; tracks the path of pointerChunk relative to the\n     * root.\n     *\n     * Used to move the pointer from the current chunk to the parent chunk more\n     * efficiently.\n     */\n    _defineProperty(this, \"pointerIndexStack\", void 0);\n    /**\n     * Indexing the current chunk's children has a slight time cost, which adds up\n     * when traversing very large trees, so the current node is cached.\n     *\n     * A value of undefined means that the current node is not cached. This\n     * property must be set to undefined whenever the pointer is moved, unless\n     * the pointer is guaranteed to point to the same node that it did previously.\n     */\n    _defineProperty(this, \"cachedPointerNode\", void 0);\n    this.root = chunkTree;\n    this.chunkSize = chunkSize;\n    // istanbul ignore next\n    this.debug = debug !== null && debug !== void 0 ? debug : false;\n    this.pointerChunk = chunkTree;\n    this.pointerIndex = -1;\n    this.pointerIndexStack = [];\n    this.reachedEnd = false;\n    this.validateState();\n  }\n  /**\n   * Move the pointer to the next leaf in the chunk tree\n   */\n  readLeaf() {\n    // istanbul ignore next\n    if (this.reachedEnd) return null;\n    // Get the next sibling or aunt node\n    while (true) {\n      if (this.pointerIndex + 1 < this.pointerSiblings.length) {\n        this.pointerIndex++;\n        this.cachedPointerNode = undefined;\n        break;\n      } else if (this.pointerChunk.type === 'root') {\n        this.reachedEnd = true;\n        return null;\n      } else {\n        this.exitChunk();\n      }\n    }\n    this.validateState();\n    // If the next sibling or aunt is a chunk, descend into it\n    this.enterChunkUntilLeaf(false);\n    return this.pointerNode;\n  }\n  /**\n   * Move the pointer to the previous leaf in the chunk tree\n   */\n  returnToPreviousLeaf() {\n    // If we were at the end of the tree, descend into the end of the last\n    // chunk in the tree\n    if (this.reachedEnd) {\n      this.reachedEnd = false;\n      this.enterChunkUntilLeaf(true);\n      return;\n    }\n    // Get the previous sibling or aunt node\n    while (true) {\n      if (this.pointerIndex >= 1) {\n        this.pointerIndex--;\n        this.cachedPointerNode = undefined;\n        break;\n      } else if (this.pointerChunk.type === 'root') {\n        this.pointerIndex = -1;\n        return;\n      } else {\n        this.exitChunk();\n      }\n    }\n    this.validateState();\n    // If the previous sibling or aunt is a chunk, descend into it\n    this.enterChunkUntilLeaf(true);\n  }\n  /**\n   * Insert leaves before the current leaf, leaving the pointer unchanged\n   */\n  insertBefore(leaves) {\n    this.returnToPreviousLeaf();\n    this.insertAfter(leaves);\n    this.readLeaf();\n  }\n  /**\n   * Insert leaves after the current leaf, leaving the pointer on the last\n   * inserted leaf\n   *\n   * The insertion algorithm first checks for any chunk we're currently at the\n   * end of that can receive additional leaves. Next, it tries to insert leaves\n   * at the starts of any subsequent chunks.\n   *\n   * Any remaining leaves are passed to rawInsertAfter to be chunked and\n   * inserted at the highest possible level.\n   */\n  insertAfter(leaves) {\n    // istanbul ignore next\n    if (leaves.length === 0) return;\n    var beforeDepth = 0;\n    var afterDepth = 0;\n    // While at the end of a chunk, insert any leaves that will fit, and then\n    // exit the chunk\n    while (this.pointerChunk.type === 'chunk' && this.pointerIndex === this.pointerSiblings.length - 1) {\n      var remainingCapacity = this.chunkSize - this.pointerSiblings.length;\n      var toInsertCount = Math.min(remainingCapacity, leaves.length);\n      if (toInsertCount > 0) {\n        var leavesToInsert = leaves.splice(0, toInsertCount);\n        this.rawInsertAfter(leavesToInsert, beforeDepth);\n      }\n      this.exitChunk();\n      beforeDepth++;\n    }\n    if (leaves.length === 0) return;\n    // Save the pointer so that we can come back here after inserting leaves\n    // into the starts of subsequent blocks\n    var rawInsertPointer = this.savePointer();\n    // If leaves are inserted into the start of a subsequent block, then we\n    // eventually need to restore the pointer to the last such inserted leaf\n    var finalPointer = null;\n    // Move the pointer into the chunk containing the next leaf, if it exists\n    if (this.readLeaf()) {\n      // While at the start of a chunk, insert any leaves that will fit, and\n      // then exit the chunk\n      while (this.pointerChunk.type === 'chunk' && this.pointerIndex === 0) {\n        var _remainingCapacity = this.chunkSize - this.pointerSiblings.length;\n        var _toInsertCount = Math.min(_remainingCapacity, leaves.length);\n        if (_toInsertCount > 0) {\n          var _leavesToInsert = leaves.splice(-_toInsertCount, _toInsertCount);\n          // Insert the leaves at the start of the chunk\n          this.pointerIndex = -1;\n          this.cachedPointerNode = undefined;\n          this.rawInsertAfter(_leavesToInsert, afterDepth);\n          // If this is the first batch of insertions at the start of a\n          // subsequent chunk, set the final pointer to the last inserted leaf\n          if (!finalPointer) {\n            finalPointer = this.savePointer();\n          }\n        }\n        this.exitChunk();\n        afterDepth++;\n      }\n    }\n    this.restorePointer(rawInsertPointer);\n    // If there are leaves left to insert, insert them between the end of the\n    // previous chunk and the start of the first subsequent chunk, or wherever\n    // the pointer ended up after the first batch of insertions\n    var minDepth = Math.max(beforeDepth, afterDepth);\n    this.rawInsertAfter(leaves, minDepth);\n    if (finalPointer) {\n      this.restorePointer(finalPointer);\n    }\n    this.validateState();\n  }\n  /**\n   * Remove the current node and decrement the pointer, deleting any ancestor\n   * chunk that becomes empty as a result\n   */\n  remove() {\n    this.pointerSiblings.splice(this.pointerIndex--, 1);\n    this.cachedPointerNode = undefined;\n    if (this.pointerSiblings.length === 0 && this.pointerChunk.type === 'chunk') {\n      this.exitChunk();\n      this.remove();\n    } else {\n      this.invalidateChunk();\n    }\n    this.validateState();\n  }\n  /**\n   * Add the current chunk and all ancestor chunks to the list of modified\n   * chunks\n   */\n  invalidateChunk() {\n    for (var c = this.pointerChunk; c.type === 'chunk'; c = c.parent) {\n      this.root.modifiedChunks.add(c);\n    }\n  }\n  /**\n   * Whether the pointer is at the start of the tree\n   */\n  get atStart() {\n    return this.pointerChunk.type === 'root' && this.pointerIndex === -1;\n  }\n  /**\n   * The siblings of the current node\n   */\n  get pointerSiblings() {\n    return this.pointerChunk.children;\n  }\n  /**\n   * Get the current node (uncached)\n   *\n   * If the pointer is at the start or end of the document, returns null.\n   *\n   * Usually, the current node is a chunk leaf, although it can be a chunk\n   * while insertions are in progress.\n   */\n  getPointerNode() {\n    if (this.reachedEnd || this.pointerIndex === -1) {\n      return null;\n    }\n    return this.pointerSiblings[this.pointerIndex];\n  }\n  /**\n   * Cached getter for the current node\n   */\n  get pointerNode() {\n    if (this.cachedPointerNode !== undefined) return this.cachedPointerNode;\n    var pointerNode = this.getPointerNode();\n    this.cachedPointerNode = pointerNode;\n    return pointerNode;\n  }\n  /**\n   * Get the path of a chunk relative to the root, returning null if the chunk\n   * is not connected to the root\n   */\n  getChunkPath(chunk) {\n    var path = [];\n    for (var c = chunk; c.type === 'chunk'; c = c.parent) {\n      var index = c.parent.children.indexOf(c);\n      // istanbul ignore next\n      if (index === -1) {\n        return null;\n      }\n      path.unshift(index);\n    }\n    return path;\n  }\n  /**\n   * Save the current pointer to be restored later\n   */\n  savePointer() {\n    if (this.atStart) return 'start';\n    // istanbul ignore next\n    if (!this.pointerNode) {\n      throw new Error('Cannot save pointer when pointerNode is null');\n    }\n    return {\n      chunk: this.pointerChunk,\n      node: this.pointerNode\n    };\n  }\n  /**\n   * Restore the pointer to a previous state\n   */\n  restorePointer(savedPointer) {\n    if (savedPointer === 'start') {\n      this.pointerChunk = this.root;\n      this.pointerIndex = -1;\n      this.pointerIndexStack = [];\n      this.reachedEnd = false;\n      this.cachedPointerNode = undefined;\n      return;\n    }\n    // Since nodes may have been inserted or removed prior to the saved\n    // pointer since it was saved, the index and index stack must be\n    // recomputed. This is slow, but this is fine since restoring a pointer is\n    // not a frequent operation.\n    var {\n      chunk,\n      node\n    } = savedPointer;\n    var index = chunk.children.indexOf(node);\n    // istanbul ignore next\n    if (index === -1) {\n      throw new Error('Cannot restore point because saved node is no longer in saved chunk');\n    }\n    var indexStack = this.getChunkPath(chunk);\n    // istanbul ignore next\n    if (!indexStack) {\n      throw new Error('Cannot restore point because saved chunk is no longer connected to root');\n    }\n    this.pointerChunk = chunk;\n    this.pointerIndex = index;\n    this.pointerIndexStack = indexStack;\n    this.reachedEnd = false;\n    this.cachedPointerNode = node;\n    this.validateState();\n  }\n  /**\n   * Assuming the current node is a chunk, move the pointer into that chunk\n   *\n   * @param end If true, place the pointer on the last node of the chunk.\n   * Otherwise, place the pointer on the first node.\n   */\n  enterChunk(end) {\n    var _this$pointerNode;\n    // istanbul ignore next\n    if (((_this$pointerNode = this.pointerNode) === null || _this$pointerNode === void 0 ? void 0 : _this$pointerNode.type) !== 'chunk') {\n      throw new Error('Cannot enter non-chunk');\n    }\n    this.pointerIndexStack.push(this.pointerIndex);\n    this.pointerChunk = this.pointerNode;\n    this.pointerIndex = end ? this.pointerSiblings.length - 1 : 0;\n    this.cachedPointerNode = undefined;\n    this.validateState();\n    // istanbul ignore next\n    if (this.pointerChunk.children.length === 0) {\n      throw new Error('Cannot enter empty chunk');\n    }\n  }\n  /**\n   * Assuming the current node is a chunk, move the pointer into that chunk\n   * repeatedly until the current node is a leaf\n   *\n   * @param end If true, place the pointer on the last node of the chunk.\n   * Otherwise, place the pointer on the first node.\n   */\n  enterChunkUntilLeaf(end) {\n    while (((_this$pointerNode2 = this.pointerNode) === null || _this$pointerNode2 === void 0 ? void 0 : _this$pointerNode2.type) === 'chunk') {\n      var _this$pointerNode2;\n      this.enterChunk(end);\n    }\n  }\n  /**\n   * Move the pointer to the parent chunk\n   */\n  exitChunk() {\n    // istanbul ignore next\n    if (this.pointerChunk.type === 'root') {\n      throw new Error('Cannot exit root');\n    }\n    var previousPointerChunk = this.pointerChunk;\n    this.pointerChunk = previousPointerChunk.parent;\n    this.pointerIndex = this.pointerIndexStack.pop();\n    this.cachedPointerNode = undefined;\n    this.validateState();\n  }\n  /**\n   * Insert leaves immediately after the current node, leaving the pointer on\n   * the last inserted leaf\n   *\n   * Leaves are chunked according to the number of nodes already in the parent\n   * plus the number of nodes being inserted, or the minimum depth if larger\n   */\n  rawInsertAfter(leaves, minDepth) {\n    if (leaves.length === 0) return;\n    var groupIntoChunks = (leaves, parent, perChunk) => {\n      if (perChunk === 1) return leaves;\n      var chunks = [];\n      for (var i = 0; i < this.chunkSize; i++) {\n        var chunkNodes = leaves.slice(i * perChunk, (i + 1) * perChunk);\n        if (chunkNodes.length === 0) break;\n        var chunk = {\n          type: 'chunk',\n          key: new slate_dom__WEBPACK_IMPORTED_MODULE_4__.Key(),\n          parent,\n          children: []\n        };\n        chunk.children = groupIntoChunks(chunkNodes, chunk, perChunk / this.chunkSize);\n        chunks.push(chunk);\n      }\n      return chunks;\n    };\n    // Determine the chunking depth based on the number of existing nodes in\n    // the chunk and the number of nodes being inserted\n    var newTotal = this.pointerSiblings.length + leaves.length;\n    var depthForTotal = 0;\n    for (var i = this.chunkSize; i < newTotal; i *= this.chunkSize) {\n      depthForTotal++;\n    }\n    // A depth of 0 means no chunking\n    var depth = Math.max(depthForTotal, minDepth);\n    var perTopLevelChunk = Math.pow(this.chunkSize, depth);\n    var chunks = groupIntoChunks(leaves, this.pointerChunk, perTopLevelChunk);\n    this.pointerSiblings.splice(this.pointerIndex + 1, 0, ...chunks);\n    this.pointerIndex += chunks.length;\n    this.cachedPointerNode = undefined;\n    this.invalidateChunk();\n    this.validateState();\n  }\n  /**\n   * If debug mode is enabled, ensure that the state is internally consistent\n   */\n  // istanbul ignore next\n  validateState() {\n    if (!this.debug) return;\n    var validateDescendant = node => {\n      if (node.type === 'chunk') {\n        var {\n          parent,\n          children\n        } = node;\n        if (!parent.children.includes(node)) {\n          throw new Error(\"Debug: Chunk \".concat(node.key.id, \" has an incorrect parent property\"));\n        }\n        children.forEach(validateDescendant);\n      }\n    };\n    this.root.children.forEach(validateDescendant);\n    if (this.cachedPointerNode !== undefined && this.cachedPointerNode !== this.getPointerNode()) {\n      throw new Error('Debug: The cached pointer is incorrect and has not been invalidated');\n    }\n    var actualIndexStack = this.getChunkPath(this.pointerChunk);\n    if (!actualIndexStack) {\n      throw new Error('Debug: The pointer chunk is not connected to the root');\n    }\n    if (!slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(this.pointerIndexStack, actualIndexStack)) {\n      throw new Error(\"Debug: The cached index stack [\".concat(this.pointerIndexStack.join(', '), \"] does not match the path of the pointer chunk [\").concat(actualIndexStack.join(', '), \"]\"));\n    }\n  }\n}\n\n/**\n * Traverse an array of children, providing helpers useful for reconciling the\n * children array with a chunk tree\n */\nclass ChildrenHelper {\n  constructor(editor, children) {\n    _defineProperty(this, \"editor\", void 0);\n    _defineProperty(this, \"children\", void 0);\n    /**\n     * Sparse array of Slate node keys, each index corresponding to an index in\n     * the children array\n     *\n     * Fetching the key for a Slate node is expensive, so we cache them here.\n     */\n    _defineProperty(this, \"cachedKeys\", void 0);\n    /**\n     * The index of the next node to be read in the children array\n     */\n    _defineProperty(this, \"pointerIndex\", void 0);\n    this.editor = editor;\n    this.children = children;\n    this.cachedKeys = new Array(children.length);\n    this.pointerIndex = 0;\n  }\n  /**\n   * Read a given number of nodes, advancing the pointer by that amount\n   */\n  read(n) {\n    // PERF: If only one child was requested (the most common case), use array\n    // indexing instead of slice\n    if (n === 1) {\n      return [this.children[this.pointerIndex++]];\n    }\n    var slicedChildren = this.remaining(n);\n    this.pointerIndex += n;\n    return slicedChildren;\n  }\n  /**\n   * Get the remaining children without advancing the pointer\n   *\n   * @param [maxChildren] Limit the number of children returned.\n   */\n  remaining(maxChildren) {\n    if (maxChildren === undefined) {\n      return this.children.slice(this.pointerIndex);\n    }\n    return this.children.slice(this.pointerIndex, this.pointerIndex + maxChildren);\n  }\n  /**\n   * Whether all children have been read\n   */\n  get reachedEnd() {\n    return this.pointerIndex >= this.children.length;\n  }\n  /**\n   * Determine whether a node with a given key appears in the unread part of the\n   * children array, and return its index relative to the current pointer if so\n   *\n   * Searching for the node object itself using indexOf is most efficient, but\n   * will fail to locate nodes that have been modified. In this case, nodes\n   * should be identified by their keys instead.\n   *\n   * Searching an array of keys using indexOf is very inefficient since fetching\n   * the keys for all children in advance is very slow. Insead, if the node\n   * search fails to return a value, fetch the keys of each remaining child one\n   * by one and compare it to the known key.\n   */\n  lookAhead(node, key) {\n    var elementResult = this.children.indexOf(node, this.pointerIndex);\n    if (elementResult > -1) return elementResult - this.pointerIndex;\n    for (var i = this.pointerIndex; i < this.children.length; i++) {\n      var candidateNode = this.children[i];\n      var candidateKey = this.findKey(candidateNode, i);\n      if (candidateKey === key) return i - this.pointerIndex;\n    }\n    return -1;\n  }\n  /**\n   * Convert an array of Slate nodes to an array of chunk leaves, each\n   * containing the node and its key\n   */\n  toChunkLeaves(nodes, startIndex) {\n    return nodes.map((node, i) => ({\n      type: 'leaf',\n      node,\n      key: this.findKey(node, startIndex + i),\n      index: startIndex + i\n    }));\n  }\n  /**\n   * Get the key for a Slate node, cached using the node's index\n   */\n  findKey(node, index) {\n    var cachedKey = this.cachedKeys[index];\n    if (cachedKey) return cachedKey;\n    var key = ReactEditor.findKey(this.editor, node);\n    this.cachedKeys[index] = key;\n    return key;\n  }\n}\n\n/**\n * Update the chunk tree to match the children array, inserting, removing and\n * updating differing nodes\n */\nvar reconcileChildren = (editor, _ref) => {\n  var {\n    chunkTree,\n    children,\n    chunkSize,\n    rerenderChildren = [],\n    onInsert,\n    onUpdate,\n    onIndexChange,\n    debug\n  } = _ref;\n  chunkTree.modifiedChunks.clear();\n  var chunkTreeHelper = new ChunkTreeHelper(chunkTree, {\n    chunkSize,\n    debug\n  });\n  var childrenHelper = new ChildrenHelper(editor, children);\n  var treeLeaf;\n  // Read leaves from the tree one by one, each one representing a single Slate\n  // node. Each leaf from the tree is compared to the current node in the\n  // children array to determine whether nodes have been inserted, removed or\n  // updated.\n  var _loop = function _loop() {\n    // Check where the tree node appears in the children array. In the most\n    // common case (where no insertions or removals have occurred), this will be\n    // 0. If the node has been removed, this will be -1. If new nodes have been\n    // inserted before the node, or if the node has been moved to a later\n    // position in the same children array, this will be a positive number.\n    var lookAhead = childrenHelper.lookAhead(treeLeaf.node, treeLeaf.key);\n    // If the node was moved, we want to remove it and insert it later, rather\n    // then re-inserting all intermediate nodes before it.\n    var wasMoved = lookAhead > 0 && chunkTree.movedNodeKeys.has(treeLeaf.key);\n    // If the tree leaf was moved or removed, remove it\n    if (lookAhead === -1 || wasMoved) {\n      chunkTreeHelper.remove();\n      return 1; // continue\n    }\n    // Get the matching Slate node and any nodes that may have been inserted\n    // prior to it. Insert these into the chunk tree.\n    var insertedChildrenStartIndex = childrenHelper.pointerIndex;\n    var insertedChildren = childrenHelper.read(lookAhead + 1);\n    var matchingChild = insertedChildren.pop();\n    if (insertedChildren.length) {\n      var _leavesToInsert = childrenHelper.toChunkLeaves(insertedChildren, insertedChildrenStartIndex);\n      chunkTreeHelper.insertBefore(_leavesToInsert);\n      insertedChildren.forEach((node, relativeIndex) => {\n        onInsert === null || onInsert === void 0 || onInsert(node, insertedChildrenStartIndex + relativeIndex);\n      });\n    }\n    var matchingChildIndex = childrenHelper.pointerIndex - 1;\n    // Make sure the chunk tree contains the most recent version of the Slate\n    // node\n    if (treeLeaf.node !== matchingChild) {\n      treeLeaf.node = matchingChild;\n      chunkTreeHelper.invalidateChunk();\n      onUpdate === null || onUpdate === void 0 || onUpdate(matchingChild, matchingChildIndex);\n    }\n    // Update the index if it has changed\n    if (treeLeaf.index !== matchingChildIndex) {\n      treeLeaf.index = matchingChildIndex;\n      onIndexChange === null || onIndexChange === void 0 || onIndexChange(matchingChild, matchingChildIndex);\n    }\n    // Manually invalidate chunks containing specific children that we want to\n    // re-render\n    if (rerenderChildren.includes(matchingChildIndex)) {\n      chunkTreeHelper.invalidateChunk();\n    }\n  };\n  while (treeLeaf = chunkTreeHelper.readLeaf()) {\n    if (_loop()) continue;\n  }\n  // If there are still Slate nodes remaining from the children array that were\n  // not matched to nodes in the tree, insert them at the end of the tree\n  if (!childrenHelper.reachedEnd) {\n    var remainingChildren = childrenHelper.remaining();\n    var leavesToInsert = childrenHelper.toChunkLeaves(remainingChildren, childrenHelper.pointerIndex);\n    // Move the pointer back to the final leaf in the tree, or the start of the\n    // tree if the tree is currently empty\n    chunkTreeHelper.returnToPreviousLeaf();\n    chunkTreeHelper.insertAfter(leavesToInsert);\n    remainingChildren.forEach((node, relativeIndex) => {\n      onInsert === null || onInsert === void 0 || onInsert(node, childrenHelper.pointerIndex + relativeIndex);\n    });\n  }\n  chunkTree.movedNodeKeys.clear();\n};\n\nfunction ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar KEY_TO_CHUNK_TREE = new WeakMap();\n/**\n * Get or create the chunk tree for a Slate node\n *\n * If the reconcile option is provided, the chunk tree will be updated to\n * match the current children of the node. The children are chunked\n * automatically using the given chunk size.\n */\nvar getChunkTreeForNode = function getChunkTreeForNode(editor, node) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var key = ReactEditor.findKey(editor, node);\n  var chunkTree = KEY_TO_CHUNK_TREE.get(key);\n  if (!chunkTree) {\n    chunkTree = {\n      type: 'root',\n      movedNodeKeys: new Set(),\n      modifiedChunks: new Set(),\n      children: []\n    };\n    KEY_TO_CHUNK_TREE.set(key, chunkTree);\n  }\n  if (options.reconcile) {\n    reconcileChildren(editor, _objectSpread$1({\n      chunkTree,\n      children: node.children\n    }, options.reconcile));\n  }\n  return chunkTree;\n};\n\nvar defaultRenderChunk = _ref => {\n  var {\n    children\n  } = _ref;\n  return children;\n};\nvar ChunkAncestor = props => {\n  var {\n    root,\n    ancestor,\n    renderElement,\n    renderChunk = defaultRenderChunk\n  } = props;\n  return ancestor.children.map(chunkNode => {\n    if (chunkNode.type === 'chunk') {\n      var key = chunkNode.key.id;\n      var renderedChunk = renderChunk({\n        highest: ancestor === root,\n        lowest: chunkNode.children.some(c => c.type === 'leaf'),\n        attributes: {\n          'data-slate-chunk': true\n        },\n        children: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedChunk, {\n          root: root,\n          ancestor: chunkNode,\n          renderElement: renderElement,\n          renderChunk: renderChunk\n        })\n      });\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(react__WEBPACK_IMPORTED_MODULE_3__.Fragment, {\n        key: key\n      }, renderedChunk);\n    }\n    // Only blocks containing no inlines are chunked\n    var element = chunkNode.node;\n    return renderElement(element, chunkNode.index, chunkNode.key);\n  });\n};\nvar ChunkTree = ChunkAncestor;\nvar MemoizedChunk = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().memo(ChunkAncestor, (prev, next) => prev.root === next.root && prev.renderElement === next.renderElement && prev.renderChunk === next.renderChunk && !next.root.modifiedChunks.has(next.ancestor));\n\nvar ElementContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(null);\n/**\n * Get the current element.\n */\nvar useElement = () => {\n  var context = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(ElementContext);\n  if (!context) {\n    throw new Error('The `useElement` hook must be used inside `renderElement`.');\n  }\n  return context;\n};\n/**\n * Get the current element, or return null if not inside `renderElement`.\n */\nvar useElementIf = () => (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(ElementContext);\n\n/**\n * Children.\n */\nvar useChildren = props => {\n  var {\n    decorations,\n    node,\n    renderElement,\n    renderChunk,\n    renderPlaceholder,\n    renderText,\n    renderLeaf\n  } = props;\n  var editor = useSlateStatic();\n  slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_NODE_MAP_DIRTY.set(editor, false);\n  var isEditor = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isEditor(node);\n  var isBlock = !isEditor && slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && !editor.isInline(node);\n  var isLeafBlock = isBlock && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.hasInlines(editor, node);\n  var chunkSize = isLeafBlock ? null : editor.getChunkSize(node);\n  var chunking = !!chunkSize;\n  var {\n    decorationsByChild,\n    childrenToRedecorate\n  } = useDecorationsByChild(editor, node, decorations);\n  // Update the index and parent of each child.\n  // PERF: If chunking is enabled, this is done while traversing the chunk tree\n  // instead to eliminate unnecessary weak map operations.\n  if (!chunking) {\n    node.children.forEach((n, i) => {\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_INDEX.set(n, i);\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_PARENT.set(n, node);\n    });\n  }\n  var renderElementComponent = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((n, i, cachedKey) => {\n    var key = cachedKey !== null && cachedKey !== void 0 ? cachedKey : ReactEditor.findKey(editor, n);\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ElementContext.Provider, {\n      key: \"provider-\".concat(key.id),\n      value: n\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedElement, {\n      decorations: decorationsByChild[i],\n      element: n,\n      key: key.id,\n      renderElement: renderElement,\n      renderChunk: renderChunk,\n      renderPlaceholder: renderPlaceholder,\n      renderLeaf: renderLeaf,\n      renderText: renderText\n    }));\n  }, [editor, decorationsByChild, renderElement, renderChunk, renderPlaceholder, renderLeaf, renderText]);\n  var renderTextComponent = (n, i) => {\n    var key = ReactEditor.findKey(editor, n);\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedText, {\n      decorations: decorationsByChild[i],\n      key: key.id,\n      isLast: i === node.children.length - 1,\n      parent: node,\n      renderPlaceholder: renderPlaceholder,\n      renderLeaf: renderLeaf,\n      renderText: renderText,\n      text: n\n    });\n  };\n  if (!chunking) {\n    return node.children.map((n, i) => slate__WEBPACK_IMPORTED_MODULE_7__.Text.isText(n) ? renderTextComponent(n, i) : renderElementComponent(n, i));\n  }\n  var chunkTree = getChunkTreeForNode(editor, node, {\n    reconcile: {\n      chunkSize,\n      rerenderChildren: childrenToRedecorate,\n      onInsert: (n, i) => {\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_INDEX.set(n, i);\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_PARENT.set(n, node);\n      },\n      onUpdate: (n, i) => {\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_INDEX.set(n, i);\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_PARENT.set(n, node);\n      },\n      onIndexChange: (n, i) => {\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_INDEX.set(n, i);\n      }\n    }\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ChunkTree, {\n    root: chunkTree,\n    ancestor: chunkTree,\n    renderElement: renderElementComponent,\n    renderChunk: renderChunk\n  });\n};\nvar useDecorationsByChild = (editor, node, decorations) => {\n  var decorationsByChild = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.splitDecorationsByChild)(editor, node, decorations);\n  // The value we return is a mutable array of `DecoratedRange[]` arrays. This\n  // lets us avoid passing an immutable array of decorations for each child into\n  // `ChunkTree` using props. Each `DecoratedRange[]` is only updated if the\n  // decorations at that index have changed, which speeds up the equality check\n  // for the `decorations` prop in the memoized `Element` and `Text` components.\n  var mutableDecorationsByChild = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(decorationsByChild).current;\n  // Track the list of child indices whose decorations have changed, so that we\n  // can tell the chunk tree to re-render these children.\n  var childrenToRedecorate = [];\n  // Resize the mutable array to match the latest result\n  mutableDecorationsByChild.length = decorationsByChild.length;\n  for (var i = 0; i < decorationsByChild.length; i++) {\n    var _mutableDecorationsBy;\n    var _decorations = decorationsByChild[i];\n    var previousDecorations = (_mutableDecorationsBy = mutableDecorationsByChild[i]) !== null && _mutableDecorationsBy !== void 0 ? _mutableDecorationsBy : null;\n    if (!(0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isElementDecorationsEqual)(previousDecorations, _decorations)) {\n      mutableDecorationsByChild[i] = _decorations;\n      childrenToRedecorate.push(i);\n    }\n  }\n  return {\n    decorationsByChild: mutableDecorationsByChild,\n    childrenToRedecorate\n  };\n};\n\n/**\n * A React context for sharing the `readOnly` state of the editor.\n */\nvar ReadOnlyContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(false);\n/**\n * Get the current `readOnly` state of the editor.\n */\nvar useReadOnly = () => {\n  return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(ReadOnlyContext);\n};\n\n/**\n * A React context for sharing the editor selector context in a way to control\n * re-renders.\n */\nvar SlateSelectorContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({});\nvar refEquality = (a, b) => a === b;\n/**\n * Use redux style selectors to prevent re-rendering on every keystroke.\n *\n * Bear in mind re-rendering can only prevented if the returned value is a value\n * type or for reference types (e.g. objects and arrays) add a custom equality\n * function.\n *\n * If `selector` is memoized using `useCallback`, then it will only be called\n * when it or the editor state changes. Otherwise, `selector` will be called\n * every time the component renders.\n *\n * @example\n * const isSelectionActive = useSlateSelector(editor => Boolean(editor.selection))\n */\nfunction useSlateSelector(selector) {\n  var equalityFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : refEquality;\n  var {\n    deferred\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var context = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SlateSelectorContext);\n  if (!context) {\n    throw new Error(\"The `useSlateSelector` hook must be used inside the <Slate> component's context.\");\n  }\n  var {\n    addEventListener\n  } = context;\n  var editor = useSlateStatic();\n  var genericSelector = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => selector(editor), [editor, selector]);\n  var [selectedState, update] = useGenericSelector(genericSelector, equalityFn);\n  useIsomorphicLayoutEffect(() => {\n    var unsubscribe = addEventListener(update, {\n      deferred\n    });\n    update();\n    return unsubscribe;\n  }, [addEventListener, update, deferred]);\n  return selectedState;\n}\n/**\n * Create selector context with editor updating on every editor change\n */\nfunction useSelectorContext() {\n  var eventListeners = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(new Set());\n  var deferredEventListeners = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(new Set());\n  var onChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => {\n    eventListeners.current.forEach(listener => listener());\n  }, []);\n  var flushDeferred = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => {\n    deferredEventListeners.current.forEach(listener => listener());\n    deferredEventListeners.current.clear();\n  }, []);\n  var addEventListener = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(function (callbackProp) {\n    var {\n      deferred = false\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var callback = deferred ? () => deferredEventListeners.current.add(callbackProp) : callbackProp;\n    eventListeners.current.add(callback);\n    return () => {\n      eventListeners.current.delete(callback);\n    };\n  }, []);\n  var selectorContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => ({\n    addEventListener,\n    flushDeferred\n  }), [addEventListener, flushDeferred]);\n  return {\n    selectorContext,\n    onChange\n  };\n}\nfunction useFlushDeferredSelectorsOnRender() {\n  var {\n    flushDeferred\n  } = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SlateSelectorContext);\n  useIsomorphicLayoutEffect(flushDeferred);\n}\n\n/**\n * Get the current editor object and re-render whenever it changes.\n */\nvar useSlate = () => {\n  var {\n    addEventListener\n  } = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SlateSelectorContext);\n  var [, forceRender] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useReducer)(s => s + 1, 0);\n  if (!addEventListener) {\n    throw new Error(\"The `useSlate` hook must be used inside the <Slate> component's context.\");\n  }\n  useIsomorphicLayoutEffect(() => addEventListener(forceRender), [addEventListener]);\n  return useSlateStatic();\n};\nvar EDITOR_TO_V = new WeakMap();\nvar getEditorVersionRef = editor => {\n  var v = EDITOR_TO_V.get(editor);\n  if (v) {\n    return v;\n  }\n  v = {\n    current: 0\n  };\n  EDITOR_TO_V.set(editor, v);\n  // Register the `onChange` handler exactly once per editor\n  var {\n    onChange\n  } = editor;\n  editor.onChange = options => {\n    v.current++;\n    onChange(options);\n  };\n  return v;\n};\n/**\n * Get the current editor object and its version, which increments on every\n * change.\n *\n * @deprecated The `v` counter is no longer used except for this hook, and may\n * be removed in a future version.\n */\nvar useSlateWithV = () => {\n  var editor = useSlate();\n  var vRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => getEditorVersionRef(editor), [editor]);\n  return {\n    editor,\n    v: vRef.current\n  };\n};\n\nfunction useTrackUserInput() {\n  var editor = useSlateStatic();\n  var receivedUserInput = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n  var animationFrameIdRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n  var onUserInput = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => {\n    if (receivedUserInput.current) {\n      return;\n    }\n    receivedUserInput.current = true;\n    var window = ReactEditor.getWindow(editor);\n    window.cancelAnimationFrame(animationFrameIdRef.current);\n    animationFrameIdRef.current = window.requestAnimationFrame(() => {\n      receivedUserInput.current = false;\n    });\n  }, [editor]);\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => () => cancelAnimationFrame(animationFrameIdRef.current), []);\n  return {\n    receivedUserInput,\n    onUserInput\n  };\n}\n\nvar createRestoreDomManager = (editor, receivedUserInput) => {\n  var bufferedMutations = [];\n  var clear = () => {\n    bufferedMutations = [];\n  };\n  var registerMutations = mutations => {\n    if (!receivedUserInput.current) {\n      return;\n    }\n    var trackedMutations = mutations.filter(mutation => (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isTrackedMutation)(editor, mutation, mutations));\n    bufferedMutations.push(...trackedMutations);\n  };\n  function restoreDOM() {\n    if (bufferedMutations.length > 0) {\n      bufferedMutations.reverse().forEach(mutation => {\n        if (mutation.type === 'characterData') {\n          // We don't want to restore the DOM for characterData mutations\n          // because this interrupts the composition.\n          return;\n        }\n        mutation.removedNodes.forEach(node => {\n          mutation.target.insertBefore(node, mutation.nextSibling);\n        });\n        mutation.addedNodes.forEach(node => {\n          mutation.target.removeChild(node);\n        });\n      });\n      // Clear buffered mutations to ensure we don't undo them twice\n      clear();\n    }\n  }\n  return {\n    registerMutations,\n    restoreDOM,\n    clear\n  };\n};\n\nvar MUTATION_OBSERVER_CONFIG = {\n  subtree: true,\n  childList: true,\n  characterData: true,\n  characterDataOldValue: true\n};\n// We have to use a class component here since we rely on `getSnapshotBeforeUpdate` which has no FC equivalent\n// to run code synchronously immediately before react commits the component update to the DOM.\nclass RestoreDOMComponent extends react__WEBPACK_IMPORTED_MODULE_3__.Component {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"context\", null);\n    _defineProperty(this, \"manager\", null);\n    _defineProperty(this, \"mutationObserver\", null);\n  }\n  observe() {\n    var _this$mutationObserve;\n    var {\n      node\n    } = this.props;\n    if (!node.current) {\n      throw new Error('Failed to attach MutationObserver, `node` is undefined');\n    }\n    (_this$mutationObserve = this.mutationObserver) === null || _this$mutationObserve === void 0 || _this$mutationObserve.observe(node.current, MUTATION_OBSERVER_CONFIG);\n  }\n  componentDidMount() {\n    var {\n      receivedUserInput\n    } = this.props;\n    var editor = this.context;\n    this.manager = createRestoreDomManager(editor, receivedUserInput);\n    this.mutationObserver = new MutationObserver(this.manager.registerMutations);\n    this.observe();\n  }\n  getSnapshotBeforeUpdate() {\n    var _this$mutationObserve2, _this$mutationObserve3, _this$manager2;\n    var pendingMutations = (_this$mutationObserve2 = this.mutationObserver) === null || _this$mutationObserve2 === void 0 ? void 0 : _this$mutationObserve2.takeRecords();\n    if (pendingMutations !== null && pendingMutations !== void 0 && pendingMutations.length) {\n      var _this$manager;\n      (_this$manager = this.manager) === null || _this$manager === void 0 || _this$manager.registerMutations(pendingMutations);\n    }\n    (_this$mutationObserve3 = this.mutationObserver) === null || _this$mutationObserve3 === void 0 || _this$mutationObserve3.disconnect();\n    (_this$manager2 = this.manager) === null || _this$manager2 === void 0 || _this$manager2.restoreDOM();\n    return null;\n  }\n  componentDidUpdate() {\n    var _this$manager3;\n    (_this$manager3 = this.manager) === null || _this$manager3 === void 0 || _this$manager3.clear();\n    this.observe();\n  }\n  componentWillUnmount() {\n    var _this$mutationObserve4;\n    (_this$mutationObserve4 = this.mutationObserver) === null || _this$mutationObserve4 === void 0 || _this$mutationObserve4.disconnect();\n  }\n  render() {\n    return this.props.children;\n  }\n}\n_defineProperty(RestoreDOMComponent, \"contextType\", EditorContext);\nvar RestoreDOM = slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID ? RestoreDOMComponent : _ref => {\n  var {\n    children\n  } = _ref;\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement((react__WEBPACK_IMPORTED_MODULE_3___default().Fragment), null, children);\n};\n\n/**\n * A React context for sharing the `composing` state of the editor.\n */\nvar ComposingContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(false);\n/**\n * Get the current `composing` state of the editor.\n */\nvar useComposing = () => {\n  return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(ComposingContext);\n};\n\nvar _excluded$1 = [\"autoFocus\", \"decorate\", \"onDOMBeforeInput\", \"placeholder\", \"readOnly\", \"renderElement\", \"renderChunk\", \"renderLeaf\", \"renderText\", \"renderPlaceholder\", \"scrollSelectionIntoView\", \"style\", \"as\", \"disableDefaultStyles\"],\n  _excluded2 = [\"text\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar Children = props => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement((react__WEBPACK_IMPORTED_MODULE_3___default().Fragment), null, useChildren(props));\n/**\n * Editable.\n */\nvar Editable = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)((props, forwardedRef) => {\n  var defaultRenderPlaceholder = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(props => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DefaultPlaceholder, _objectSpread({}, props)), []);\n  var {\n      autoFocus,\n      decorate = defaultDecorate,\n      onDOMBeforeInput: propsOnDOMBeforeInput,\n      placeholder,\n      readOnly = false,\n      renderElement,\n      renderChunk,\n      renderLeaf,\n      renderText,\n      renderPlaceholder = defaultRenderPlaceholder,\n      scrollSelectionIntoView = defaultScrollSelectionIntoView,\n      style: userStyle = {},\n      as: Component = 'div',\n      disableDefaultStyles = false\n    } = props,\n    attributes = _objectWithoutProperties(props, _excluded$1);\n  var editor = useSlate();\n  // Rerender editor when composition status changed\n  var [isComposing, setIsComposing] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n  var ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n  var deferredOperations = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]);\n  var [placeholderHeight, setPlaceholderHeight] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();\n  var processing = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n  var {\n    onUserInput,\n    receivedUserInput\n  } = useTrackUserInput();\n  var [, forceRender] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useReducer)(s => s + 1, 0);\n  slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_FORCE_RENDER.set(editor, forceRender);\n  // Update internal state on each render.\n  slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_READ_ONLY.set(editor, readOnly);\n  // Keep track of some state for the event handler logic.\n  var state = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => ({\n    isDraggingInternally: false,\n    isUpdatingSelection: false,\n    latestElement: null,\n    hasMarkPlaceholder: false\n  }), []);\n  // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n  //\n  // If this stops working in Firefox, make sure nothing is causing this\n  // component to re-render during the initial mount. If the DOM selection is\n  // set by `useIsomorphicLayoutEffect` before `onDOMSelectionChange` updates\n  // `editor.selection`, the DOM selection can be removed accidentally.\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    if (ref.current && autoFocus) {\n      ref.current.focus();\n    }\n  }, [autoFocus]);\n  /**\n   * The AndroidInputManager object has a cyclical dependency on onDOMSelectionChange\n   *\n   * It is defined as a reference to simplify hook dependencies and clarify that\n   * it needs to be initialized.\n   */\n  var androidInputManagerRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n  // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n  var onDOMSelectionChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => lodash_throttle__WEBPACK_IMPORTED_MODULE_2___default()(() => {\n    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_NODE_MAP_DIRTY.get(editor)) {\n      onDOMSelectionChange();\n      return;\n    }\n    var el = ReactEditor.toDOMNode(editor, editor);\n    var root = el.getRootNode();\n    if (!processing.current && slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT && root instanceof ShadowRoot) {\n      processing.current = true;\n      var active = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.getActiveElement)();\n      if (active) {\n        document.execCommand('indent');\n      } else {\n        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.deselect(editor);\n      }\n      processing.current = false;\n      return;\n    }\n    var androidInputManager = androidInputManagerRef.current;\n    if ((slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID || !ReactEditor.isComposing(editor)) && (!state.isUpdatingSelection || androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing()) && !state.isDraggingInternally) {\n      var _root = ReactEditor.findDocumentOrShadowRoot(editor);\n      var {\n        activeElement\n      } = _root;\n      var _el = ReactEditor.toDOMNode(editor, editor);\n      var domSelection = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.getSelection)(_root);\n      if (activeElement === _el) {\n        state.latestElement = activeElement;\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FOCUSED.set(editor, true);\n      } else {\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FOCUSED.delete(editor);\n      }\n      if (!domSelection) {\n        return slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.deselect(editor);\n      }\n      var {\n        anchorNode,\n        focusNode\n      } = domSelection;\n      var anchorNodeSelectable = ReactEditor.hasEditableTarget(editor, anchorNode) || ReactEditor.isTargetInsideNonReadonlyVoid(editor, anchorNode);\n      var focusNodeInEditor = ReactEditor.hasTarget(editor, focusNode);\n      if (anchorNodeSelectable && focusNodeInEditor) {\n        var range = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: false,\n          suppressThrow: true\n        });\n        if (range) {\n          if (!ReactEditor.isComposing(editor) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.hasPendingChanges()) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing())) {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n          } else {\n            androidInputManager === null || androidInputManager === void 0 || androidInputManager.handleUserSelect(range);\n          }\n        }\n      }\n      // Deselect the editor if the dom selection is not selectable in readonly mode\n      if (readOnly && (!anchorNodeSelectable || !focusNodeInEditor)) {\n        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.deselect(editor);\n      }\n    }\n  }, 100), [editor, readOnly, state]);\n  var scheduleOnDOMSelectionChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => lodash_debounce__WEBPACK_IMPORTED_MODULE_1___default()(onDOMSelectionChange, 0), [onDOMSelectionChange]);\n  androidInputManagerRef.current = useAndroidInputManager({\n    node: ref,\n    onDOMSelectionChange,\n    scheduleOnDOMSelectionChange\n  });\n  useIsomorphicLayoutEffect(() => {\n    var _androidInputManagerR, _androidInputManagerR2;\n    // Update element-related weak maps with the DOM element ref.\n    var window;\n    if (ref.current && (window = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.getDefaultView)(ref.current))) {\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_WINDOW.set(editor, window);\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_ELEMENT.set(editor, ref.current);\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.set(editor, ref.current);\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.ELEMENT_TO_NODE.set(ref.current, editor);\n    } else {\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.delete(editor);\n    }\n    // Make sure the DOM selection state is in sync.\n    var {\n      selection\n    } = editor;\n    var root = ReactEditor.findDocumentOrShadowRoot(editor);\n    var domSelection = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.getSelection)(root);\n    if (!domSelection || !ReactEditor.isFocused(editor) || (_androidInputManagerR = androidInputManagerRef.current) !== null && _androidInputManagerR !== void 0 && _androidInputManagerR.hasPendingAction()) {\n      return;\n    }\n    var setDomSelection = forceChange => {\n      var hasDomSelection = domSelection.type !== 'None';\n      // If the DOM selection is properly unset, we're done.\n      if (!selection && !hasDomSelection) {\n        return;\n      }\n      // Get anchorNode and focusNode\n      var focusNode = domSelection.focusNode;\n      var anchorNode;\n      // COMPAT: In firefox the normal selection way does not work\n      // (https://github.com/ianstormtaylor/slate/pull/5486#issue-1820720223)\n      if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FIREFOX && domSelection.rangeCount > 1) {\n        var firstRange = domSelection.getRangeAt(0);\n        var lastRange = domSelection.getRangeAt(domSelection.rangeCount - 1);\n        // Right to left\n        if (firstRange.startContainer === focusNode) {\n          anchorNode = lastRange.endContainer;\n        } else {\n          // Left to right\n          anchorNode = firstRange.startContainer;\n        }\n      } else {\n        anchorNode = domSelection.anchorNode;\n      }\n      // verify that the dom selection is in the editor\n      var editorElement = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_ELEMENT.get(editor);\n      var hasDomSelectionInEditor = false;\n      if (editorElement.contains(anchorNode) && editorElement.contains(focusNode)) {\n        hasDomSelectionInEditor = true;\n      }\n      // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n      if (hasDomSelection && hasDomSelectionInEditor && selection && !forceChange) {\n        var slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: true,\n          // domSelection is not necessarily a valid Slate range\n          // (e.g. when clicking on contentEditable:false element)\n          suppressThrow: true\n        });\n        if (slateRange && slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(slateRange, selection)) {\n          var _anchorNode;\n          if (!state.hasMarkPlaceholder) {\n            return;\n          }\n          // Ensure selection is inside the mark placeholder\n          if ((_anchorNode = anchorNode) !== null && _anchorNode !== void 0 && (_anchorNode = _anchorNode.parentElement) !== null && _anchorNode !== void 0 && _anchorNode.hasAttribute('data-slate-mark-placeholder')) {\n            return;\n          }\n        }\n      }\n      // when <Editable/> is being controlled through external value\n      // then its children might just change - DOM responds to it on its own\n      // but Slate's value is not being updated through any operation\n      // and thus it doesn't transform selection on its own\n      if (selection && !ReactEditor.hasRange(editor, selection)) {\n        editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: false,\n          suppressThrow: true\n        });\n        return;\n      }\n      // Otherwise the DOM selection is out of sync, so update it.\n      state.isUpdatingSelection = true;\n      var newDomRange = null;\n      try {\n        newDomRange = selection && ReactEditor.toDOMRange(editor, selection);\n      } catch (e) {\n        // Ignore, dom and state might be out of sync\n      }\n      if (newDomRange) {\n        if (ReactEditor.isComposing(editor) && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID) {\n          domSelection.collapseToEnd();\n        } else if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isBackward(selection)) {\n          domSelection.setBaseAndExtent(newDomRange.endContainer, newDomRange.endOffset, newDomRange.startContainer, newDomRange.startOffset);\n        } else {\n          domSelection.setBaseAndExtent(newDomRange.startContainer, newDomRange.startOffset, newDomRange.endContainer, newDomRange.endOffset);\n        }\n        scrollSelectionIntoView(editor, newDomRange);\n      } else {\n        domSelection.removeAllRanges();\n      }\n      return newDomRange;\n    };\n    // In firefox if there is more then 1 range and we call setDomSelection we remove the ability to select more cells in a table\n    if (domSelection.rangeCount <= 1) {\n      setDomSelection();\n    }\n    var ensureSelection = ((_androidInputManagerR2 = androidInputManagerRef.current) === null || _androidInputManagerR2 === void 0 ? void 0 : _androidInputManagerR2.isFlushing()) === 'action';\n    if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID || !ensureSelection) {\n      setTimeout(() => {\n        state.isUpdatingSelection = false;\n      });\n      return;\n    }\n    var timeoutId = null;\n    var animationFrameId = requestAnimationFrame(() => {\n      if (ensureSelection) {\n        var ensureDomSelection = forceChange => {\n          try {\n            var el = ReactEditor.toDOMNode(editor, editor);\n            el.focus();\n            setDomSelection(forceChange);\n          } catch (e) {\n            // Ignore, dom and state might be out of sync\n          }\n        };\n        // Compat: Android IMEs try to force their selection by manually re-applying it even after we set it.\n        // This essentially would make setting the slate selection during an update meaningless, so we force it\n        // again here. We can't only do it in the setTimeout after the animation frame since that would cause a\n        // visible flicker.\n        ensureDomSelection();\n        timeoutId = setTimeout(() => {\n          // COMPAT: While setting the selection in an animation frame visually correctly sets the selection,\n          // it doesn't update GBoards spellchecker state. We have to manually trigger a selection change after\n          // the animation frame to ensure it displays the correct state.\n          ensureDomSelection(true);\n          state.isUpdatingSelection = false;\n        });\n      }\n    });\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  });\n  // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n  var onDOMBeforeInput = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n    handleNativeHistoryEvents(editor, event);\n    var el = ReactEditor.toDOMNode(editor, editor);\n    var root = el.getRootNode();\n    if (processing !== null && processing !== void 0 && processing.current && slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT && root instanceof ShadowRoot) {\n      var ranges = event.getTargetRanges();\n      var range = ranges[0];\n      var newRange = new window.Range();\n      newRange.setStart(range.startContainer, range.startOffset);\n      newRange.setEnd(range.endContainer, range.endOffset);\n      // Translate the DOM Range into a Slate Range\n      var slateRange = ReactEditor.toSlateRange(editor, newRange, {\n        exactMatch: false,\n        suppressThrow: false\n      });\n      slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, slateRange);\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      return;\n    }\n    onUserInput();\n    if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target) && !isDOMEventHandled(event, propsOnDOMBeforeInput)) {\n      var _EDITOR_TO_USER_SELEC;\n      // COMPAT: BeforeInput events aren't cancelable on android, so we have to handle them differently using the android input manager.\n      if (androidInputManagerRef.current) {\n        return androidInputManagerRef.current.handleDOMBeforeInput(event);\n      }\n      // Some IMEs/Chrome extensions like e.g. Grammarly set the selection immediately before\n      // triggering a `beforeinput` expecting the change to be applied to the immediately before\n      // set selection.\n      scheduleOnDOMSelectionChange.flush();\n      onDOMSelectionChange.flush();\n      var {\n        selection\n      } = editor;\n      var {\n        inputType: type\n      } = event;\n      var data = event.dataTransfer || event.data || undefined;\n      var isCompositionChange = type === 'insertCompositionText' || type === 'deleteCompositionText';\n      // COMPAT: use composition change events as a hint to where we should insert\n      // composition text if we aren't composing to work around https://github.com/ianstormtaylor/slate/issues/5038\n      if (isCompositionChange && ReactEditor.isComposing(editor)) {\n        return;\n      }\n      var native = false;\n      if (type === 'insertText' && selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(selection) &&\n      // Only use native character insertion for single characters a-z or space for now.\n      // Long-press events (hold a + press 4 = ä) to choose a special character otherwise\n      // causes duplicate inserts.\n      event.data && event.data.length === 1 && /[a-z ]/i.test(event.data) &&\n      // Chrome has issues correctly editing the start of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1249405\n      // When there is an inline element, e.g. a link, and you select\n      // right after it (the start of the next node).\n      selection.anchor.offset !== 0) {\n        native = true;\n        // Skip native if there are marks, as\n        // `insertText` will insert a node, not just text.\n        if (editor.marks) {\n          native = false;\n        }\n        // If the NODE_MAP is dirty, we can't trust the selection anchor (eg ReactEditor.toDOMPoint)\n        if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_NODE_MAP_DIRTY.get(editor)) {\n          var _node$parentElement, _window$getComputedSt;\n          // Chrome also has issues correctly editing the end of anchor elements: https://bugs.chromium.org/p/chromium/issues/detail?id=1259100\n          // Therefore we don't allow native events to insert text at the end of anchor nodes.\n          var {\n            anchor\n          } = selection;\n          var [node, offset] = ReactEditor.toDOMPoint(editor, anchor);\n          var anchorNode = (_node$parentElement = node.parentElement) === null || _node$parentElement === void 0 ? void 0 : _node$parentElement.closest('a');\n          var _window = ReactEditor.getWindow(editor);\n          if (native && anchorNode && ReactEditor.hasDOMNode(editor, anchorNode)) {\n            var _lastText$textContent;\n            // Find the last text node inside the anchor.\n            var lastText = _window === null || _window === void 0 ? void 0 : _window.document.createTreeWalker(anchorNode, NodeFilter.SHOW_TEXT).lastChild();\n            if (lastText === node && ((_lastText$textContent = lastText.textContent) === null || _lastText$textContent === void 0 ? void 0 : _lastText$textContent.length) === offset) {\n              native = false;\n            }\n          }\n          // Chrome has issues with the presence of tab characters inside elements with whiteSpace = 'pre'\n          // causing abnormal insert behavior: https://bugs.chromium.org/p/chromium/issues/detail?id=1219139\n          if (native && node.parentElement && (_window === null || _window === void 0 || (_window$getComputedSt = _window.getComputedStyle(node.parentElement)) === null || _window$getComputedSt === void 0 ? void 0 : _window$getComputedSt.whiteSpace) === 'pre') {\n            var block = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.above(editor, {\n              at: anchor.path,\n              match: n => slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(n) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isBlock(editor, n)\n            });\n            if (block && slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(block[0]).includes('\\t')) {\n              native = false;\n            }\n          }\n        }\n      }\n      // COMPAT: For the deleting forward/backward input types we don't want\n      // to change the selection because it is the range that will be deleted,\n      // and those commands determine that for themselves.\n      // If the NODE_MAP is dirty, we can't trust the selection anchor (eg ReactEditor.toDOMPoint via ReactEditor.toSlateRange)\n      if ((!type.startsWith('delete') || type.startsWith('deleteBy')) && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_NODE_MAP_DIRTY.get(editor)) {\n        var [targetRange] = event.getTargetRanges();\n        if (targetRange) {\n          var _range = ReactEditor.toSlateRange(editor, targetRange, {\n            exactMatch: false,\n            suppressThrow: false\n          });\n          if (!selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(selection, _range)) {\n            native = false;\n            var selectionRef = !isCompositionChange && editor.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.rangeRef(editor, editor.selection);\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, _range);\n            if (selectionRef) {\n              slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_SELECTION.set(editor, selectionRef);\n            }\n          }\n        }\n      }\n      // Composition change types occur while a user is composing text and can't be\n      // cancelled. Let them through and wait for the composition to end.\n      if (isCompositionChange) {\n        return;\n      }\n      if (!native) {\n        event.preventDefault();\n      }\n      // COMPAT: If the selection is expanded, even if the command seems like\n      // a delete forward/backward command it should delete the selection.\n      if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection) && type.startsWith('delete')) {\n        var direction = type.endsWith('Backward') ? 'backward' : 'forward';\n        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n          direction\n        });\n        return;\n      }\n      switch (type) {\n        case 'deleteByComposition':\n        case 'deleteByCut':\n        case 'deleteByDrag':\n          {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor);\n            break;\n          }\n        case 'deleteContent':\n        case 'deleteContentForward':\n          {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor);\n            break;\n          }\n        case 'deleteContentBackward':\n          {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor);\n            break;\n          }\n        case 'deleteEntireSoftLine':\n          {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n        case 'deleteHardLineBackward':\n          {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n              unit: 'block'\n            });\n            break;\n          }\n        case 'deleteSoftLineBackward':\n          {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n        case 'deleteHardLineForward':\n          {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n              unit: 'block'\n            });\n            break;\n          }\n        case 'deleteSoftLineForward':\n          {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n        case 'deleteWordBackward':\n          {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n              unit: 'word'\n            });\n            break;\n          }\n        case 'deleteWordForward':\n          {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n              unit: 'word'\n            });\n            break;\n          }\n        case 'insertLineBreak':\n          slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertSoftBreak(editor);\n          break;\n        case 'insertParagraph':\n          {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertBreak(editor);\n            break;\n          }\n        case 'insertFromComposition':\n        case 'insertFromDrop':\n        case 'insertFromPaste':\n        case 'insertFromYank':\n        case 'insertReplacementText':\n        case 'insertText':\n          {\n            if (type === 'insertFromComposition') {\n              // COMPAT: in Safari, `compositionend` is dispatched after the\n              // `beforeinput` for \"insertFromComposition\". But if we wait for it\n              // then we will abort because we're still composing and the selection\n              // won't be updated properly.\n              // https://www.w3.org/TR/input-events-2/\n              if (ReactEditor.isComposing(editor)) {\n                setIsComposing(false);\n                slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, false);\n              }\n            }\n            // use a weak comparison instead of 'instanceof' to allow\n            // programmatic access of paste events coming from external windows\n            // like cypress where cy.window does not work realibly\n            if ((data === null || data === void 0 ? void 0 : data.constructor.name) === 'DataTransfer') {\n              ReactEditor.insertData(editor, data);\n            } else if (typeof data === 'string') {\n              // Only insertText operations use the native functionality, for now.\n              // Potentially expand to single character deletes, as well.\n              if (native) {\n                deferredOperations.current.push(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, data));\n              } else {\n                slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, data);\n              }\n            }\n            break;\n          }\n      }\n      // Restore the actual user section if nothing manually set it.\n      var toRestore = (_EDITOR_TO_USER_SELEC = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_SELECTION.get(editor)) === null || _EDITOR_TO_USER_SELEC === void 0 ? void 0 : _EDITOR_TO_USER_SELEC.unref();\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_SELECTION.delete(editor);\n      if (toRestore && (!editor.selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(editor.selection, toRestore))) {\n        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, toRestore);\n      }\n    }\n  }, [editor, onDOMSelectionChange, onUserInput, propsOnDOMBeforeInput, readOnly, scheduleOnDOMSelectionChange]);\n  var callbackRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(node => {\n    if (node == null) {\n      onDOMSelectionChange.cancel();\n      scheduleOnDOMSelectionChange.cancel();\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_ELEMENT.delete(editor);\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.delete(editor);\n      if (ref.current && slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        ref.current.removeEventListener('beforeinput', onDOMBeforeInput);\n      }\n    } else {\n      // Attach a native DOM event handler for `beforeinput` events, because React's\n      // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n      // real `beforeinput` events sadly... (2019/11/04)\n      // https://github.com/facebook/react/issues/11211\n      if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        node.addEventListener('beforeinput', onDOMBeforeInput);\n      }\n    }\n    ref.current = node;\n    if (typeof forwardedRef === 'function') {\n      forwardedRef(node);\n    } else if (forwardedRef) {\n      forwardedRef.current = node;\n    }\n  }, [onDOMSelectionChange, scheduleOnDOMSelectionChange, editor, onDOMBeforeInput, forwardedRef]);\n  useIsomorphicLayoutEffect(() => {\n    var window = ReactEditor.getWindow(editor);\n    // COMPAT: In Chrome, `selectionchange` events can fire when <input> and\n    // <textarea> elements are appended to the DOM, causing\n    // `editor.selection` to be overwritten in some circumstances.\n    // (2025/01/16) https://issues.chromium.org/issues/389368412\n    var onSelectionChange = _ref => {\n      var {\n        target\n      } = _ref;\n      var targetElement = target instanceof HTMLElement ? target : null;\n      var targetTagName = targetElement === null || targetElement === void 0 ? void 0 : targetElement.tagName;\n      if (targetTagName === 'INPUT' || targetTagName === 'TEXTAREA') {\n        return;\n      }\n      scheduleOnDOMSelectionChange();\n    };\n    // Attach a native DOM event handler for `selectionchange`, because React's\n    // built-in `onSelect` handler doesn't fire for all selection changes. It's\n    // a leaky polyfill that only fires on keypresses or clicks. Instead, we\n    // want to fire for any change to the selection inside the editor.\n    // (2019/11/04) https://github.com/facebook/react/issues/5785\n    window.document.addEventListener('selectionchange', onSelectionChange);\n    // Listen for dragend and drop globally. In Firefox, if a drop handler\n    // initiates an operation that causes the originally dragged element to\n    // unmount, that element will not emit a dragend event. (2024/06/21)\n    var stoppedDragging = () => {\n      state.isDraggingInternally = false;\n    };\n    window.document.addEventListener('dragend', stoppedDragging);\n    window.document.addEventListener('drop', stoppedDragging);\n    return () => {\n      window.document.removeEventListener('selectionchange', onSelectionChange);\n      window.document.removeEventListener('dragend', stoppedDragging);\n      window.document.removeEventListener('drop', stoppedDragging);\n    };\n  }, [scheduleOnDOMSelectionChange, state]);\n  var decorations = decorate([editor, []]);\n  var decorateContext = useDecorateContext(decorate);\n  var showPlaceholder = placeholder && editor.children.length === 1 && Array.from(slate__WEBPACK_IMPORTED_MODULE_7__.Node.texts(editor)).length === 1 && slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(editor) === '' && !isComposing;\n  var placeHolderResizeHandler = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(placeholderEl => {\n    if (placeholderEl && showPlaceholder) {\n      var _placeholderEl$getBou;\n      setPlaceholderHeight((_placeholderEl$getBou = placeholderEl.getBoundingClientRect()) === null || _placeholderEl$getBou === void 0 ? void 0 : _placeholderEl$getBou.height);\n    } else {\n      setPlaceholderHeight(undefined);\n    }\n  }, [showPlaceholder]);\n  if (showPlaceholder) {\n    var start = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.start(editor, []);\n    decorations.push({\n      [slate_dom__WEBPACK_IMPORTED_MODULE_4__.PLACEHOLDER_SYMBOL]: true,\n      placeholder,\n      onPlaceholderResize: placeHolderResizeHandler,\n      anchor: start,\n      focus: start\n    });\n  }\n  var {\n    marks\n  } = editor;\n  state.hasMarkPlaceholder = false;\n  if (editor.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(editor.selection) && marks) {\n    var {\n      anchor\n    } = editor.selection;\n    var leaf = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, anchor.path);\n    var rest = _objectWithoutProperties(leaf, _excluded2);\n    // While marks isn't a 'complete' text, we can still use loose Text.equals\n    // here which only compares marks anyway.\n    if (!slate__WEBPACK_IMPORTED_MODULE_7__.Text.equals(leaf, marks, {\n      loose: true\n    })) {\n      state.hasMarkPlaceholder = true;\n      var unset = Object.fromEntries(Object.keys(rest).map(mark => [mark, null]));\n      decorations.push(_objectSpread(_objectSpread(_objectSpread({\n        [slate_dom__WEBPACK_IMPORTED_MODULE_4__.MARK_PLACEHOLDER_SYMBOL]: true\n      }, unset), marks), {}, {\n        anchor,\n        focus: anchor\n      }));\n    }\n  }\n  // Update EDITOR_TO_MARK_PLACEHOLDER_MARKS in setTimeout useEffect to ensure we don't set it\n  // before we receive the composition end event.\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    setTimeout(() => {\n      var {\n        selection\n      } = editor;\n      if (selection) {\n        var {\n          anchor: _anchor\n        } = selection;\n        var _text = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, _anchor.path);\n        // While marks isn't a 'complete' text, we can still use loose Text.equals\n        // here which only compares marks anyway.\n        if (marks && !slate__WEBPACK_IMPORTED_MODULE_7__.Text.equals(_text, marks, {\n          loose: true\n        })) {\n          slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.set(editor, marks);\n          return;\n        }\n      }\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);\n    });\n  });\n  useFlushDeferredSelectorsOnRender();\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ReadOnlyContext.Provider, {\n    value: readOnly\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ComposingContext.Provider, {\n    value: isComposing\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DecorateContext.Provider, {\n    value: decorateContext\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(RestoreDOM, {\n    node: ref,\n    receivedUserInput: receivedUserInput\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Component, _objectSpread(_objectSpread({\n    role: readOnly ? undefined : 'textbox',\n    \"aria-multiline\": readOnly ? undefined : true\n  }, attributes), {}, {\n    // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd\n    // have to use hacks to make these replacement-based features work.\n    // For SSR situations HAS_BEFORE_INPUT_SUPPORT is false and results in prop\n    // mismatch warning app moves to browser. Pass-through consumer props when\n    // not CAN_USE_DOM (SSR) and default to falsy value\n    spellCheck: slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT || !slate_dom__WEBPACK_IMPORTED_MODULE_4__.CAN_USE_DOM ? attributes.spellCheck : false,\n    autoCorrect: slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT || !slate_dom__WEBPACK_IMPORTED_MODULE_4__.CAN_USE_DOM ? attributes.autoCorrect : 'false',\n    autoCapitalize: slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT || !slate_dom__WEBPACK_IMPORTED_MODULE_4__.CAN_USE_DOM ? attributes.autoCapitalize : 'false',\n    \"data-slate-editor\": true,\n    \"data-slate-node\": \"value\",\n    // explicitly set this\n    contentEditable: !readOnly,\n    // in some cases, a decoration needs access to the range / selection to decorate a text node,\n    // then you will select the whole text node when you select part the of text\n    // this magic zIndex=\"-1\" will fix it\n    zindex: -1,\n    suppressContentEditableWarning: true,\n    ref: callbackRef,\n    style: _objectSpread(_objectSpread({}, disableDefaultStyles ? {} : _objectSpread({\n      // Allow positioning relative to the editable element.\n      position: 'relative',\n      // Preserve adjacent whitespace and new lines.\n      whiteSpace: 'pre-wrap',\n      // Allow words to break if they are too long.\n      wordWrap: 'break-word'\n    }, placeholderHeight ? {\n      minHeight: placeholderHeight\n    } : {})), userStyle),\n    onBeforeInput: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n      // fall back to React's leaky polyfill instead just for it. It\n      // only works for the `insertText` input type.\n      if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT && !readOnly && !isEventHandled(event, attributes.onBeforeInput) && ReactEditor.hasSelectableTarget(editor, event.target)) {\n        event.preventDefault();\n        if (!ReactEditor.isComposing(editor)) {\n          var _text2 = event.data;\n          slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, _text2);\n        }\n      }\n    }, [attributes.onBeforeInput, editor, readOnly]),\n    onInput: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (isEventHandled(event, attributes.onInput)) {\n        return;\n      }\n      if (androidInputManagerRef.current) {\n        androidInputManagerRef.current.handleInput();\n        return;\n      }\n      // Flush native operations, as native events will have propogated\n      // and we can correctly compare DOM text values in components\n      // to stop rendering, so that browser functions like autocorrect\n      // and spellcheck work as expected.\n      for (var op of deferredOperations.current) {\n        op();\n      }\n      deferredOperations.current = [];\n      // COMPAT: Since `beforeinput` doesn't fully `preventDefault`,\n      // there's a chance that content might be placed in the browser's undo stack.\n      // This means undo can be triggered even when the div is not focused,\n      // and it only triggers the input event for the node. (2024/10/09)\n      if (!ReactEditor.isFocused(editor)) {\n        handleNativeHistoryEvents(editor, event.nativeEvent);\n      }\n    }, [attributes.onInput, editor]),\n    onBlur: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (readOnly || state.isUpdatingSelection || !ReactEditor.hasSelectableTarget(editor, event.target) || isEventHandled(event, attributes.onBlur)) {\n        return;\n      }\n      // COMPAT: If the current `activeElement` is still the previous\n      // one, this is due to the window being blurred when the tab\n      // itself becomes unfocused, so we want to abort early to allow to\n      // editor to stay focused when the tab becomes focused again.\n      var root = ReactEditor.findDocumentOrShadowRoot(editor);\n      if (state.latestElement === root.activeElement) {\n        return;\n      }\n      var {\n        relatedTarget\n      } = event;\n      var el = ReactEditor.toDOMNode(editor, editor);\n      // COMPAT: The event should be ignored if the focus is returning\n      // to the editor from an embedded editable element (eg. an <input>\n      // element inside a void node).\n      if (relatedTarget === el) {\n        return;\n      }\n      // COMPAT: The event should be ignored if the focus is moving from\n      // the editor to inside a void node's spacer element.\n      if ((0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isDOMElement)(relatedTarget) && relatedTarget.hasAttribute('data-slate-spacer')) {\n        return;\n      }\n      // COMPAT: The event should be ignored if the focus is moving to a\n      // non- editable section of an element that isn't a void node (eg.\n      // a list item of the check list example).\n      if (relatedTarget != null && (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isDOMNode)(relatedTarget) && ReactEditor.hasDOMNode(editor, relatedTarget)) {\n        var node = ReactEditor.toSlateNode(editor, relatedTarget);\n        if (slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && !editor.isVoid(node)) {\n          return;\n        }\n      }\n      // COMPAT: Safari doesn't always remove the selection even if the content-\n      // editable element no longer has focus. Refer to:\n      // https://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web\n      if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT) {\n        var domSelection = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.getSelection)(root);\n        domSelection === null || domSelection === void 0 || domSelection.removeAllRanges();\n      }\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FOCUSED.delete(editor);\n    }, [readOnly, state.isUpdatingSelection, state.latestElement, editor, attributes.onBlur]),\n    onClick: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onClick) && (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isDOMNode)(event.target)) {\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        var path = ReactEditor.findPath(editor, node);\n        // At this time, the Slate document may be arbitrarily different,\n        // because onClick handlers can change the document before we get here.\n        // Therefore we must check that this path actually exists,\n        // and that it still refers to the same node.\n        if (!slate__WEBPACK_IMPORTED_MODULE_7__.Editor.hasPath(editor, path) || slate__WEBPACK_IMPORTED_MODULE_7__.Node.get(editor, path) !== node) {\n          return;\n        }\n        if (event.detail === slate_dom__WEBPACK_IMPORTED_MODULE_4__.TRIPLE_CLICK && path.length >= 1) {\n          var blockPath = path;\n          if (!(slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isBlock(editor, node))) {\n            var _block$;\n            var block = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.above(editor, {\n              match: n => slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(n) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isBlock(editor, n),\n              at: path\n            });\n            blockPath = (_block$ = block === null || block === void 0 ? void 0 : block[1]) !== null && _block$ !== void 0 ? _block$ : path.slice(0, 1);\n          }\n          var range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, blockPath);\n          slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n          return;\n        }\n        if (readOnly) {\n          return;\n        }\n        var _start = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.start(editor, path);\n        var end = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.end(editor, path);\n        var startVoid = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(editor, {\n          at: _start\n        });\n        var endVoid = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(editor, {\n          at: end\n        });\n        if (startVoid && endVoid && slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(startVoid[1], endVoid[1])) {\n          var _range2 = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, _start);\n          slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, _range2);\n        }\n      }\n    }, [editor, attributes.onClick, readOnly]),\n    onCompositionEnd: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (ReactEditor.hasSelectableTarget(editor, event.target)) {\n        var _androidInputManagerR3;\n        if (ReactEditor.isComposing(editor)) {\n          Promise.resolve().then(() => {\n            setIsComposing(false);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, false);\n          });\n        }\n        (_androidInputManagerR3 = androidInputManagerRef.current) === null || _androidInputManagerR3 === void 0 || _androidInputManagerR3.handleCompositionEnd(event);\n        if (isEventHandled(event, attributes.onCompositionEnd) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID) {\n          return;\n        }\n        // COMPAT: In Chrome, `beforeinput` events for compositions\n        // aren't correct and never fire the \"insertFromComposition\"\n        // type that we need. So instead, insert whenever a composition\n        // ends since it will already have been committed to the DOM.\n        if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FIREFOX_LEGACY && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_IOS && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WECHATBROWSER && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_UC_MOBILE && event.data) {\n          var placeholderMarks = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);\n          slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);\n          // Ensure we insert text with the marks the user was actually seeing\n          if (placeholderMarks !== undefined) {\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.set(editor, editor.marks);\n            editor.marks = placeholderMarks;\n          }\n          slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, event.data);\n          var userMarks = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.get(editor);\n          slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.delete(editor);\n          if (userMarks !== undefined) {\n            editor.marks = userMarks;\n          }\n        }\n      }\n    }, [attributes.onCompositionEnd, editor]),\n    onCompositionUpdate: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionUpdate)) {\n        if (!ReactEditor.isComposing(editor)) {\n          setIsComposing(true);\n          slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, true);\n        }\n      }\n    }, [attributes.onCompositionUpdate, editor]),\n    onCompositionStart: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (ReactEditor.hasSelectableTarget(editor, event.target)) {\n        var _androidInputManagerR4;\n        (_androidInputManagerR4 = androidInputManagerRef.current) === null || _androidInputManagerR4 === void 0 || _androidInputManagerR4.handleCompositionStart(event);\n        if (isEventHandled(event, attributes.onCompositionStart) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID) {\n          return;\n        }\n        setIsComposing(true);\n        var {\n          selection\n        } = editor;\n        if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n          slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor);\n          return;\n        }\n      }\n    }, [attributes.onCompositionStart, editor]),\n    onCopy: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCopy) && !isDOMEventTargetInput(event)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData, 'copy');\n      }\n    }, [attributes.onCopy, editor]),\n    onCut: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (!readOnly && ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCut) && !isDOMEventTargetInput(event)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData, 'cut');\n        var {\n          selection\n        } = editor;\n        if (selection) {\n          if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor);\n          } else {\n            var node = slate__WEBPACK_IMPORTED_MODULE_7__.Node.parent(editor, selection.anchor.path);\n            if (slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, node)) {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.delete(editor);\n            }\n          }\n        }\n      }\n    }, [readOnly, editor, attributes.onCut]),\n    onDragOver: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragOver)) {\n        // Only when the target is void, call `preventDefault` to signal\n        // that drops are allowed. Editable content is droppable by\n        // default, and calling `preventDefault` hides the cursor.\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        if (slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, node)) {\n          event.preventDefault();\n        }\n      }\n    }, [attributes.onDragOver, editor]),\n    onDragStart: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (!readOnly && ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragStart)) {\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        var path = ReactEditor.findPath(editor, node);\n        var voidMatch = slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, node) || slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(editor, {\n          at: path,\n          voids: true\n        });\n        // If starting a drag on a void node, make sure it is selected\n        // so that it shows up in the selection's fragment.\n        if (voidMatch) {\n          var range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, path);\n          slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n        }\n        state.isDraggingInternally = true;\n        ReactEditor.setFragmentData(editor, event.dataTransfer, 'drag');\n      }\n    }, [readOnly, editor, attributes.onDragStart, state]),\n    onDrop: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (!readOnly && ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDrop)) {\n        event.preventDefault();\n        // Keep a reference to the dragged range before updating selection\n        var draggedRange = editor.selection;\n        // Find the range where the drop happened\n        var range = ReactEditor.findEventRange(editor, event);\n        var data = event.dataTransfer;\n        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n        if (state.isDraggingInternally) {\n          if (draggedRange && !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(draggedRange, range) && !slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(editor, {\n            at: range,\n            voids: true\n          })) {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.delete(editor, {\n              at: draggedRange\n            });\n          }\n        }\n        ReactEditor.insertData(editor, data);\n        // When dragging from another source into the editor, it's possible\n        // that the current editor does not have focus.\n        if (!ReactEditor.isFocused(editor)) {\n          ReactEditor.focus(editor);\n        }\n      }\n    }, [readOnly, editor, attributes.onDrop, state]),\n    onDragEnd: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (!readOnly && state.isDraggingInternally && attributes.onDragEnd && ReactEditor.hasTarget(editor, event.target)) {\n        attributes.onDragEnd(event);\n      }\n    }, [readOnly, state, attributes, editor]),\n    onFocus: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (!readOnly && !state.isUpdatingSelection && ReactEditor.hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onFocus)) {\n        var el = ReactEditor.toDOMNode(editor, editor);\n        var root = ReactEditor.findDocumentOrShadowRoot(editor);\n        state.latestElement = root.activeElement;\n        // COMPAT: If the editor has nested editable elements, the focus\n        // can go to them. In Firefox, this must be prevented because it\n        // results in issues with keyboard navigation. (2017/03/30)\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FIREFOX && event.target !== el) {\n          el.focus();\n          return;\n        }\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FOCUSED.set(editor, true);\n      }\n    }, [readOnly, state, editor, attributes.onFocus]),\n    onKeyDown: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target)) {\n        var _androidInputManagerR5;\n        (_androidInputManagerR5 = androidInputManagerRef.current) === null || _androidInputManagerR5 === void 0 || _androidInputManagerR5.handleKeyDown(event);\n        var {\n          nativeEvent\n        } = event;\n        // COMPAT: The composition end event isn't fired reliably in all browsers,\n        // so we sometimes might end up stuck in a composition state even though we\n        // aren't composing any more.\n        if (ReactEditor.isComposing(editor) && nativeEvent.isComposing === false) {\n          slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, false);\n          setIsComposing(false);\n        }\n        if (isEventHandled(event, attributes.onKeyDown) || ReactEditor.isComposing(editor)) {\n          return;\n        }\n        var {\n          selection\n        } = editor;\n        var element = editor.children[selection !== null ? selection.focus.path[0] : 0];\n        var isRTL = direction__WEBPACK_IMPORTED_MODULE_0___default()(slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(element)) === 'rtl';\n        // COMPAT: Since we prevent the default behavior on\n        // `beforeinput` events, the browser doesn't think there's ever\n        // any history stack to undo or redo, so we have to manage these\n        // hotkeys ourselves. (2019/11/06)\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isRedo(nativeEvent)) {\n          event.preventDefault();\n          var maybeHistoryEditor = editor;\n          if (typeof maybeHistoryEditor.redo === 'function') {\n            maybeHistoryEditor.redo();\n          }\n          return;\n        }\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isUndo(nativeEvent)) {\n          event.preventDefault();\n          var _maybeHistoryEditor = editor;\n          if (typeof _maybeHistoryEditor.undo === 'function') {\n            _maybeHistoryEditor.undo();\n          }\n          return;\n        }\n        // COMPAT: Certain browsers don't handle the selection updates\n        // properly. In Chrome, the selection isn't properly extended.\n        // And in Firefox, the selection isn't properly collapsed.\n        // (2017/10/17)\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveLineBackward(nativeEvent)) {\n          event.preventDefault();\n          slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n            unit: 'line',\n            reverse: true\n          });\n          return;\n        }\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveLineForward(nativeEvent)) {\n          event.preventDefault();\n          slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n            unit: 'line'\n          });\n          return;\n        }\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isExtendLineBackward(nativeEvent)) {\n          event.preventDefault();\n          slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n            unit: 'line',\n            edge: 'focus',\n            reverse: true\n          });\n          return;\n        }\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isExtendLineForward(nativeEvent)) {\n          event.preventDefault();\n          slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n            unit: 'line',\n            edge: 'focus'\n          });\n          return;\n        }\n        // COMPAT: If a void node is selected, or a zero-width text node\n        // adjacent to an inline is selected, we need to handle these\n        // hotkeys manually because browsers won't be able to skip over\n        // the void node with the zero-width space not being an empty\n        // string.\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveBackward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(selection)) {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n              reverse: !isRTL\n            });\n          } else {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.collapse(editor, {\n              edge: isRTL ? 'end' : 'start'\n            });\n          }\n          return;\n        }\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveForward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(selection)) {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n              reverse: isRTL\n            });\n          } else {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.collapse(editor, {\n              edge: isRTL ? 'start' : 'end'\n            });\n          }\n          return;\n        }\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveWordBackward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.collapse(editor, {\n              edge: 'focus'\n            });\n          }\n          slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n            unit: 'word',\n            reverse: !isRTL\n          });\n          return;\n        }\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveWordForward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.collapse(editor, {\n              edge: 'focus'\n            });\n          }\n          slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n            unit: 'word',\n            reverse: isRTL\n          });\n          return;\n        }\n        // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n        // fall back to guessing at the input intention for hotkeys.\n        // COMPAT: In iOS, some of these hotkeys are handled in the\n        if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT) {\n          // We don't have a core behavior for these, but they change the\n          // DOM if we don't prevent them, so we have to.\n          if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isBold(nativeEvent) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isItalic(nativeEvent) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isTransposeCharacter(nativeEvent)) {\n            event.preventDefault();\n            return;\n          }\n          if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isSoftBreak(nativeEvent)) {\n            event.preventDefault();\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertSoftBreak(editor);\n            return;\n          }\n          if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isSplitBlock(nativeEvent)) {\n            event.preventDefault();\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertBreak(editor);\n            return;\n          }\n          if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteBackward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor);\n            }\n            return;\n          }\n          if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteForward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor);\n            }\n            return;\n          }\n          if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteLineBackward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                unit: 'line'\n              });\n            }\n            return;\n          }\n          if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteLineForward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                unit: 'line'\n              });\n            }\n            return;\n          }\n          if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteWordBackward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                unit: 'word'\n              });\n            }\n            return;\n          }\n          if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteWordForward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                unit: 'word'\n              });\n            }\n            return;\n          }\n        } else {\n          if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_CHROME || slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT) {\n            // COMPAT: Chrome and Safari support `beforeinput` event but do not fire\n            // an event when deleting backwards in a selected void inline node\n            if (selection && (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteBackward(nativeEvent) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteForward(nativeEvent)) && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(selection)) {\n              var currentNode = slate__WEBPACK_IMPORTED_MODULE_7__.Node.parent(editor, selection.anchor.path);\n              if (slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(currentNode) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, currentNode) && (slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isInline(editor, currentNode) || slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isBlock(editor, currentNode))) {\n                event.preventDefault();\n                slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                  unit: 'block'\n                });\n                return;\n              }\n            }\n          }\n        }\n      }\n    }, [readOnly, editor, attributes.onKeyDown]),\n    onPaste: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onPaste)) {\n        // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n        // fall back to React's `onPaste` here instead.\n        // COMPAT: Firefox, Chrome and Safari don't emit `beforeinput` events\n        // when \"paste without formatting\" is used, so fallback. (2020/02/20)\n        // COMPAT: Safari InputEvents generated by pasting won't include\n        // application/x-slate-fragment items, so use the\n        // ClipboardEvent here. (2023/03/15)\n        if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT || (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isPlainTextOnlyPaste)(event.nativeEvent) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT) {\n          event.preventDefault();\n          ReactEditor.insertData(editor, event.clipboardData);\n        }\n      }\n    }, [readOnly, editor, attributes.onPaste])\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Children, {\n    decorations: decorations,\n    node: editor,\n    renderElement: renderElement,\n    renderChunk: renderChunk,\n    renderPlaceholder: renderPlaceholder,\n    renderLeaf: renderLeaf,\n    renderText: renderText\n  }))))));\n});\n/**\n * The default placeholder element\n */\nvar DefaultPlaceholder = _ref2 => {\n  var {\n    attributes,\n    children\n  } = _ref2;\n  return (\n    /*#__PURE__*/\n    // COMPAT: Artificially add a line-break to the end on the placeholder element\n    // to prevent Android IMEs to pick up its content in autocorrect and to auto-capitalize the first letter\n    react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", _objectSpread({}, attributes), children, slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"br\", null))\n  );\n};\n/**\n * A default memoized decorate function.\n */\nvar defaultDecorate = () => [];\n/**\n * A default implement to scroll dom range into view.\n */\nvar defaultScrollSelectionIntoView = (editor, domRange) => {\n  // This was affecting the selection of multiple blocks and dragging behavior,\n  // so enabled only if the selection has been collapsed.\n  if (domRange.getBoundingClientRect && (!editor.selection || editor.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(editor.selection))) {\n    var leafEl = domRange.startContainer.parentElement;\n    // COMPAT: In Chrome, domRange.getBoundingClientRect() can return zero dimensions for valid ranges (e.g. line breaks).\n    // When this happens, do not scroll like most editors do.\n    var domRect = domRange.getBoundingClientRect();\n    var isZeroDimensionRect = domRect.width === 0 && domRect.height === 0 && domRect.x === 0 && domRect.y === 0;\n    if (isZeroDimensionRect) {\n      var leafRect = leafEl.getBoundingClientRect();\n      var leafHasDimensions = leafRect.width > 0 || leafRect.height > 0;\n      if (leafHasDimensions) {\n        return;\n      }\n    }\n    // Default behavior: use domRange's getBoundingClientRect\n    leafEl.getBoundingClientRect = domRange.getBoundingClientRect.bind(domRange);\n    (0,scroll_into_view_if_needed__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(leafEl, {\n      scrollMode: 'if-needed'\n    });\n    // @ts-expect-error an unorthodox delete D:\n    delete leafEl.getBoundingClientRect;\n  }\n};\n/**\n * Check if an event is overrided by a handler.\n */\nvar isEventHandled = (event, handler) => {\n  if (!handler) {\n    return false;\n  }\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  var shouldTreatEventAsHandled = handler(event);\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled;\n  }\n  return event.isDefaultPrevented() || event.isPropagationStopped();\n};\n/**\n * Check if the event's target is an input element\n */\nvar isDOMEventTargetInput = event => {\n  return (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isDOMNode)(event.target) && (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement);\n};\n/**\n * Check if a DOM event is overrided by a handler.\n */\nvar isDOMEventHandled = (event, handler) => {\n  if (!handler) {\n    return false;\n  }\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  var shouldTreatEventAsHandled = handler(event);\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled;\n  }\n  return event.defaultPrevented;\n};\nvar handleNativeHistoryEvents = (editor, event) => {\n  var maybeHistoryEditor = editor;\n  if (event.inputType === 'historyUndo' && typeof maybeHistoryEditor.undo === 'function') {\n    maybeHistoryEditor.undo();\n    return;\n  }\n  if (event.inputType === 'historyRedo' && typeof maybeHistoryEditor.redo === 'function') {\n    maybeHistoryEditor.redo();\n    return;\n  }\n};\n\n/**\n * A React context for sharing the `focused` state of the editor.\n */\nvar FocusedContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(false);\n/**\n * Get the current `focused` state of the editor.\n */\nvar useFocused = () => {\n  return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(FocusedContext);\n};\n\nvar REACT_MAJOR_VERSION = parseInt(react__WEBPACK_IMPORTED_MODULE_3___default().version.split('.')[0], 10);\n\nvar _excluded = [\"editor\", \"children\", \"onChange\", \"onSelectionChange\", \"onValueChange\", \"initialValue\"];\n/**\n * A wrapper around the provider to handle `onChange` events, because the editor\n * is a mutable singleton so it won't ever register as \"changed\" otherwise.\n */\nvar Slate = props => {\n  var {\n      editor,\n      children,\n      onChange,\n      onSelectionChange,\n      onValueChange,\n      initialValue\n    } = props,\n    rest = _objectWithoutProperties(props, _excluded);\n  // Run once on first mount, but before `useEffect` or render\n  react__WEBPACK_IMPORTED_MODULE_3___default().useState(() => {\n    if (!slate__WEBPACK_IMPORTED_MODULE_7__.Node.isNodeList(initialValue)) {\n      throw new Error(\"[Slate] initialValue is invalid! Expected a list of elements but got: \".concat(slate__WEBPACK_IMPORTED_MODULE_7__.Scrubber.stringify(initialValue)));\n    }\n    if (!slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isEditor(editor)) {\n      throw new Error(\"[Slate] editor is invalid! You passed: \".concat(slate__WEBPACK_IMPORTED_MODULE_7__.Scrubber.stringify(editor)));\n    }\n    editor.children = initialValue;\n    Object.assign(editor, rest);\n  });\n  var {\n    selectorContext,\n    onChange: handleSelectorChange\n  } = useSelectorContext();\n  var onContextChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(options => {\n    var _options$operation;\n    if (onChange) {\n      onChange(editor.children);\n    }\n    switch (options === null || options === void 0 || (_options$operation = options.operation) === null || _options$operation === void 0 ? void 0 : _options$operation.type) {\n      case 'set_selection':\n        onSelectionChange === null || onSelectionChange === void 0 || onSelectionChange(editor.selection);\n        break;\n      default:\n        onValueChange === null || onValueChange === void 0 || onValueChange(editor.children);\n    }\n    handleSelectorChange();\n  }, [editor, handleSelectorChange, onChange, onSelectionChange, onValueChange]);\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_ON_CHANGE.set(editor, onContextChange);\n    return () => {\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_ON_CHANGE.set(editor, () => {});\n    };\n  }, [editor, onContextChange]);\n  var [isFocused, setIsFocused] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(ReactEditor.isFocused(editor));\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    setIsFocused(ReactEditor.isFocused(editor));\n  }, [editor]);\n  useIsomorphicLayoutEffect(() => {\n    var fn = () => setIsFocused(ReactEditor.isFocused(editor));\n    if (REACT_MAJOR_VERSION >= 17) {\n      // In React >= 17 onFocus and onBlur listen to the focusin and focusout events during the bubbling phase.\n      // Therefore in order for <Editable />'s handlers to run first, which is necessary for ReactEditor.isFocused(editor)\n      // to return the correct value, we have to listen to the focusin and focusout events without useCapture here.\n      document.addEventListener('focusin', fn);\n      document.addEventListener('focusout', fn);\n      return () => {\n        document.removeEventListener('focusin', fn);\n        document.removeEventListener('focusout', fn);\n      };\n    } else {\n      document.addEventListener('focus', fn, true);\n      document.addEventListener('blur', fn, true);\n      return () => {\n        document.removeEventListener('focus', fn, true);\n        document.removeEventListener('blur', fn, true);\n      };\n    }\n  }, []);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(SlateSelectorContext.Provider, {\n    value: selectorContext\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(EditorContext.Provider, {\n    value: editor\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(FocusedContext.Provider, {\n    value: isFocused\n  }, children)));\n};\n\n/**\n * Get the current editor object from the React context.\n * @deprecated Use useSlateStatic instead.\n */\nvar useEditor = () => {\n  var editor = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(EditorContext);\n  if (!editor) {\n    throw new Error(\"The `useEditor` hook must be used inside the <Slate> component's context.\");\n  }\n  return editor;\n};\n\n/**\n * Get the current `selected` state of an element.\n */\nvar useSelected = () => {\n  var element = useElementIf();\n  // Breaking the rules of hooks is fine here since `!element` will remain true\n  // or false for the entire lifetime of the component this hook is called from.\n  // TODO: Decide if we want to throw an error instead when calling\n  // `useSelected` outside of an element (potentially a breaking change).\n  if (!element) return false;\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  var selector = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(editor => {\n    if (!editor.selection) return false;\n    var path = ReactEditor.findPath(editor, element);\n    var range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, path);\n    return !!slate__WEBPACK_IMPORTED_MODULE_7__.Range.intersection(range, editor.selection);\n  }, [element]);\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return useSlateSelector(selector, undefined, {\n    // Defer the selector until after `Editable` has rendered so that the path\n    // will be accurate.\n    deferred: true\n  });\n};\n\n/**\n * Get the current slate selection.\n * Only triggers a rerender when the selection actually changes\n */\nvar useSlateSelection = () => {\n  return useSlateSelector(editor => editor.selection, isSelectionEqual);\n};\nvar isSelectionEqual = (a, b) => {\n  if (!a && !b) return true;\n  if (!a || !b) return false;\n  return slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(a, b);\n};\n\n/**\n * `withReact` adds React and DOM specific behaviors to the editor.\n *\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\n * this plugin.\n *\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\n */\nvar withReact = function withReact(editor) {\n  var clipboardFormatKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x-slate-fragment';\n  var e = editor;\n  e = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.withDOM)(e, clipboardFormatKey);\n  var {\n    onChange,\n    apply,\n    insertText\n  } = e;\n  e.getChunkSize = () => null;\n  if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID) {\n    e.insertText = (text, options) => {\n      // COMPAT: Android devices, specifically Samsung devices, experience cursor jumping.\n      // This issue occurs when the ⁠insertText function is called immediately after typing.\n      // The problem arises because typing schedules a selection change.\n      // However, this selection change is only executed after the ⁠insertText function.\n      // As a result, the already obsolete selection is applied, leading to incorrect\n      // final cursor position.\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.delete(e);\n      return insertText(text, options);\n    };\n  }\n  e.onChange = options => {\n    // COMPAT: React < 18 doesn't batch `setState` hook calls, which means\n    // that the children and selection can get out of sync for one render\n    // pass. So we have to use this unstable API to ensure it batches them.\n    // (2019/12/03)\n    // https://github.com/facebook/react/issues/14259#issuecomment-439702367\n    var maybeBatchUpdates = REACT_MAJOR_VERSION < 18 ? (react_dom__WEBPACK_IMPORTED_MODULE_6___default().unstable_batchedUpdates) : callback => callback();\n    maybeBatchUpdates(() => {\n      onChange(options);\n    });\n  };\n  // On move_node, if the chunking optimization is enabled for the parent of the\n  // node being moved, add the moved node to the movedNodeKeys set of the\n  // parent's chunk tree.\n  e.apply = operation => {\n    if (operation.type === 'move_node') {\n      var parent = slate__WEBPACK_IMPORTED_MODULE_7__.Node.parent(e, operation.path);\n      var chunking = !!e.getChunkSize(parent);\n      if (chunking) {\n        var node = slate__WEBPACK_IMPORTED_MODULE_7__.Node.get(e, operation.path);\n        var chunkTree = getChunkTreeForNode(e, parent);\n        var key = ReactEditor.findKey(e, node);\n        chunkTree.movedNodeKeys.add(key);\n      }\n    }\n    apply(operation);\n  };\n  return e;\n};\n\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@portabletext/editor/node_modules/slate-react/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@portabletext/keyboard-shortcuts/dist/index.js":
/*!**********************************************************************!*\
  !*** ../node_modules/@portabletext/keyboard-shortcuts/dist/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockquote: () => (/* binding */ blockquote),\n/* harmony export */   bold: () => (/* binding */ bold),\n/* harmony export */   code: () => (/* binding */ code),\n/* harmony export */   createKeyboardShortcut: () => (/* binding */ createKeyboardShortcut),\n/* harmony export */   h1: () => (/* binding */ h1),\n/* harmony export */   h2: () => (/* binding */ h2),\n/* harmony export */   h3: () => (/* binding */ h3),\n/* harmony export */   h4: () => (/* binding */ h4),\n/* harmony export */   h5: () => (/* binding */ h5),\n/* harmony export */   h6: () => (/* binding */ h6),\n/* harmony export */   italic: () => (/* binding */ italic),\n/* harmony export */   link: () => (/* binding */ link),\n/* harmony export */   normal: () => (/* binding */ normal),\n/* harmony export */   redo: () => (/* binding */ redo),\n/* harmony export */   strikeThrough: () => (/* binding */ strikeThrough),\n/* harmony export */   underline: () => (/* binding */ underline),\n/* harmony export */   undo: () => (/* binding */ undo)\n/* harmony export */ });\nconst IS_APPLE = typeof window < \"u\" && /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent);\nfunction isKeyboardShortcut(definition, event) {\n  return isCorrectModifiers(definition, event) ? definition.code !== void 0 && definition.code.toLowerCase() === event.code.toLowerCase() ? !0 : definition.key !== void 0 && definition.key.toLowerCase() === event.key.toLowerCase() : !1;\n}\nfunction isCorrectModifiers(definition, event) {\n  return (definition.ctrl === event.ctrlKey || definition.ctrl === void 0) && (definition.meta === event.metaKey || definition.meta === void 0) && (definition.shift === event.shiftKey || definition.shift === void 0) && (definition.alt === event.altKey || definition.alt === void 0);\n}\nfunction createKeyboardShortcut(definition) {\n  if (IS_APPLE) {\n    const appleDefinition = definition.apple ?? definition.default, firstDefinition2 = appleDefinition.at(0);\n    return {\n      guard: (event) => appleDefinition.some((definition2) => isKeyboardShortcut(definition2, event)),\n      keys: [...firstDefinition2?.meta ? [\"\\u2318\"] : [], ...firstDefinition2?.ctrl ? [\"Ctrl\"] : [], ...firstDefinition2?.alt ? [\"Option\"] : [], ...firstDefinition2?.shift ? [\"Shift\"] : [], ...firstDefinition2?.key !== void 0 ? [firstDefinition2.key] : firstDefinition2?.code !== void 0 ? [firstDefinition2.code] : []]\n    };\n  }\n  const firstDefinition = definition.default.at(0);\n  return {\n    guard: (event) => definition.default.some((definition2) => isKeyboardShortcut(definition2, event)),\n    keys: [...firstDefinition?.meta ? [\"Meta\"] : [], ...firstDefinition?.ctrl ? [\"Ctrl\"] : [], ...firstDefinition?.alt ? [\"Alt\"] : [], ...firstDefinition?.shift ? [\"Shift\"] : [], ...firstDefinition?.key !== void 0 ? [firstDefinition.key] : firstDefinition?.code !== void 0 ? [firstDefinition.code] : []]\n  };\n}\nconst bold = createKeyboardShortcut({\n  default: [{\n    key: \"B\",\n    alt: !1,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"B\",\n    alt: !1,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), italic = createKeyboardShortcut({\n  default: [{\n    key: \"I\",\n    alt: !1,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"I\",\n    alt: !1,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), code = createKeyboardShortcut({\n  default: [{\n    key: \"'\",\n    alt: !1,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"'\",\n    alt: !1,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), underline = createKeyboardShortcut({\n  default: [{\n    key: \"U\",\n    alt: !1,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"U\",\n    alt: !1,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), strikeThrough = createKeyboardShortcut({\n  default: [{\n    key: \"X\",\n    alt: !1,\n    ctrl: !0,\n    meta: !1,\n    shift: !0\n  }],\n  apple: [{\n    key: \"X\",\n    alt: !1,\n    ctrl: !1,\n    meta: !0,\n    shift: !0\n  }]\n}), link = createKeyboardShortcut({\n  default: [{\n    key: \"K\",\n    alt: !1,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"K\",\n    alt: !1,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), normal = createKeyboardShortcut({\n  default: [{\n    key: \"0\",\n    code: \"Digit0\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }, {\n    key: \"0\",\n    code: \"Numpad0\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"0\",\n    code: \"Digit0\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }, {\n    key: \"0\",\n    code: \"Numpad0\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), h1 = createKeyboardShortcut({\n  default: [{\n    key: \"1\",\n    code: \"Digit1\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }, {\n    key: \"1\",\n    code: \"Numpad1\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"1\",\n    code: \"Digit1\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }, {\n    key: \"1\",\n    code: \"Numpad1\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), h2 = createKeyboardShortcut({\n  default: [{\n    key: \"2\",\n    code: \"Digit2\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }, {\n    key: \"2\",\n    code: \"Numpad2\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"2\",\n    code: \"Digit2\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }, {\n    key: \"2\",\n    code: \"Numpad2\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), h3 = createKeyboardShortcut({\n  default: [{\n    key: \"3\",\n    code: \"Digit3\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }, {\n    key: \"3\",\n    code: \"Numpad3\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"3\",\n    code: \"Digit3\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }, {\n    key: \"3\",\n    code: \"Numpad3\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), h4 = createKeyboardShortcut({\n  default: [{\n    key: \"4\",\n    code: \"Digit4\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }, {\n    key: \"4\",\n    code: \"Numpad4\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"4\",\n    code: \"Digit4\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }, {\n    key: \"4\",\n    code: \"Numpad4\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), h5 = createKeyboardShortcut({\n  default: [{\n    key: \"5\",\n    code: \"Digit5\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }, {\n    key: \"5\",\n    code: \"Numpad5\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"5\",\n    code: \"Digit5\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }, {\n    key: \"5\",\n    code: \"Numpad5\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), h6 = createKeyboardShortcut({\n  default: [{\n    key: \"6\",\n    code: \"Digit6\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }, {\n    key: \"6\",\n    code: \"Numpad6\",\n    alt: !0,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"6\",\n    code: \"Digit6\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }, {\n    key: \"6\",\n    code: \"Numpad6\",\n    alt: !0,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), blockquote = createKeyboardShortcut({\n  default: [{\n    key: \"Q\",\n    alt: !1,\n    ctrl: !0,\n    meta: !1,\n    shift: !0\n  }]\n}), undo = createKeyboardShortcut({\n  default: [{\n    key: \"Z\",\n    alt: !1,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }],\n  apple: [{\n    key: \"Z\",\n    alt: !1,\n    ctrl: !1,\n    meta: !0,\n    shift: !1\n  }]\n}), redo = createKeyboardShortcut({\n  default: [{\n    key: \"Y\",\n    alt: !1,\n    ctrl: !0,\n    meta: !1,\n    shift: !1\n  }, {\n    key: \"Z\",\n    alt: !1,\n    ctrl: !0,\n    meta: !1,\n    shift: !0\n  }],\n  apple: [{\n    key: \"Z\",\n    alt: !1,\n    ctrl: !1,\n    meta: !0,\n    shift: !0\n  }]\n});\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@portabletext/keyboard-shortcuts/dist/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@portabletext/patches/dist/index.js":
/*!***********************************************************!*\
  !*** ../node_modules/@portabletext/patches/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyAll: () => (/* binding */ applyAll),\n/* harmony export */   diffMatchPatch: () => (/* binding */ diffMatchPatch),\n/* harmony export */   insert: () => (/* binding */ insert),\n/* harmony export */   prefixPath: () => (/* binding */ prefixPath),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   setIfMissing: () => (/* binding */ setIfMissing),\n/* harmony export */   unset: () => (/* binding */ unset)\n/* harmony export */ });\n/* harmony import */ var lodash_findIndex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/findIndex.js */ \"(ssr)/../node_modules/lodash/findIndex.js\");\n/* harmony import */ var lodash_clone_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/clone.js */ \"(ssr)/../node_modules/lodash/clone.js\");\n/* harmony import */ var lodash_omit_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/omit.js */ \"(ssr)/../node_modules/lodash/omit.js\");\n/* harmony import */ var _sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sanity/diff-match-patch */ \"(ssr)/../node_modules/@sanity/diff-match-patch/dist/index.js\");\n\n\n\n\nconst BEFORE = \"before\", AFTER = \"after\";\nfunction insert$1(array, position, index, ...args) {\n  if (position !== BEFORE && position !== AFTER)\n    throw new Error(\n      `Invalid position \"${position}\", must be either ${BEFORE} or ${AFTER}`\n    );\n  const items = flatten(...args);\n  if (array.length === 0)\n    return items;\n  const len = array.length, idx = Math.abs((len + index) % len) % len, normalizedIdx = position === \"after\" ? idx + 1 : idx, copy = array.slice();\n  return copy.splice(normalizedIdx, 0, ...flatten(items)), copy;\n}\nfunction flatten(...values) {\n  return values.reduce((prev, item) => prev.concat(item), []);\n}\nfunction findTargetIndex(array, pathSegment) {\n  if (typeof pathSegment == \"number\")\n    return pathSegment;\n  const index = lodash_findIndex_js__WEBPACK_IMPORTED_MODULE_0__(array, pathSegment);\n  return index === -1 ? !1 : index;\n}\nfunction applyPatchToArray(value, patch) {\n  const nextValue = value.slice();\n  if (patch.path.length === 0) {\n    if (patch.type === \"setIfMissing\") {\n      if (!Array.isArray(patch.value))\n        throw new Error(\"Cannot set value of an array to a non-array\");\n      return value === void 0 ? patch.value : value;\n    }\n    if (patch.type === \"set\") {\n      if (!Array.isArray(patch.value))\n        throw new Error(\"Cannot set value of an array to a non-array\");\n      return patch.value;\n    }\n    if (patch.type === \"unset\")\n      return;\n    throw new Error(`Invalid array operation: ${patch.type}`);\n  }\n  const [head, ...tail] = patch.path, index = findTargetIndex(value, head);\n  if (index === !1)\n    return nextValue;\n  if (tail.length === 0) {\n    if (patch.type === \"insert\") {\n      const { position, items } = patch;\n      return insert$1(value, position, index, items);\n    } else if (patch.type === \"unset\") {\n      if (typeof index != \"number\")\n        throw new Error(\n          `Expected array index to be a number, instead got \"${index}\"`\n        );\n      return nextValue.splice(index, 1), nextValue;\n    }\n  }\n  return nextValue[index] = applyPatch(nextValue[index], {\n    ...patch,\n    path: tail\n  }), nextValue;\n}\nfunction applyPatchToNumber(value, patch) {\n  if (patch.path.length > 0)\n    throw new Error(\n      `Cannot apply deep operations on primitive values. Received patch with type \"${patch.type}\" and path \"${patch.path.map((path) => JSON.stringify(path)).join(\".\")} that targeted the value \"${JSON.stringify(value)}\"`\n    );\n  if (patch.type === \"set\")\n    return patch.value;\n  if (patch.type === \"setIfMissing\")\n    return value === void 0 ? patch.value : value;\n  if (patch.type !== \"unset\") {\n    if (patch.type === \"inc\") {\n      if (typeof patch.value != \"number\")\n        throw new Error(\"Cannot increment with a non-number\");\n      return value + patch.value;\n    }\n    if (patch.type === \"dec\") {\n      if (typeof patch.value != \"number\")\n        throw new Error(\"Cannot decrement with a non-number\");\n      return value - patch.value;\n    }\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for number. This is most likely a bug.`\n    );\n  }\n}\nfunction applyPatchToObject(value, patch) {\n  const nextValue = lodash_clone_js__WEBPACK_IMPORTED_MODULE_1__(value);\n  if (patch.path.length === 0) {\n    if (patch.type === \"set\") {\n      if (typeof patch.value == \"object\" && patch.value !== null && !Array.isArray(patch.value))\n        return patch.value;\n      throw new Error(\"Cannot set value of an object to a non-object\");\n    }\n    if (patch.type === \"unset\")\n      return;\n    throw new Error(`Invalid object operation: ${patch.type}`);\n  }\n  const [head, ...tail] = patch.path;\n  if (typeof head != \"string\")\n    throw new Error(`Expected field name to be a string, instead got: ${head}`);\n  return tail.length === 0 && patch.type === \"unset\" ? lodash_omit_js__WEBPACK_IMPORTED_MODULE_2__(nextValue, head) : (!(head in nextValue) && tail.length > 0 || (nextValue[head] = applyPatch(nextValue[head], {\n    ...patch,\n    path: tail\n  })), nextValue);\n}\nfunction applyPatchToUnknown(value, patch) {\n  if (patch.path.length > 0)\n    throw new Error(\n      `Cannot apply deep operations on primitive values. Received patch with type \"${patch.type}\" and path \"${patch.path.map((path) => JSON.stringify(path)).join(\".\")} that targeted the value \"${JSON.stringify(value)}\"`\n    );\n  if (patch.type === \"set\")\n    return patch.value;\n  if (patch.type === \"setIfMissing\")\n    return value === void 0 ? patch.value : value;\n  if (patch.type !== \"unset\")\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for primitives. This is most likely a bug.`\n    );\n}\nfunction applyPatchToString(value, patch) {\n  if (patch.path.length > 0)\n    throw new Error(\n      `Cannot apply deep operations on string values. Received patch with type \"${patch.type}\" and path \"${patch.path.join(\".\")} that targeted the value \"${JSON.stringify(value)}\"`\n    );\n  if (patch.type === \"diffMatchPatch\") {\n    const [result] = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_3__.applyPatches)((0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_3__.parsePatch)(patch.value), value, {\n      allowExceedingIndices: !0\n    });\n    return result;\n  }\n  if (patch.type === \"setIfMissing\")\n    return value === void 0 ? patch.value : value;\n  if (patch.type === \"set\")\n    return patch.value;\n  if (patch.type !== \"unset\")\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for string. This is most likely a bug.`\n    );\n}\nfunction applyAll(value, patches) {\n  return patches.reduce(applyPatch, value);\n}\nfunction applyPatch(value, patch) {\n  return Array.isArray(value) ? applyPatchToArray(value, patch) : typeof value == \"string\" ? applyPatchToString(value, patch) : isObject(value) ? applyPatchToObject(value, patch) : typeof value == \"number\" ? applyPatchToNumber(value, patch) : applyPatchToUnknown(value, patch);\n}\nfunction isObject(value) {\n  return typeof value == \"object\" && value !== null && !Array.isArray(value);\n}\nfunction setIfMissing(value, path = []) {\n  return {\n    type: \"setIfMissing\",\n    path,\n    value\n  };\n}\nfunction diffMatchPatch(currentValue, nextValue, path = []) {\n  const patches = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_3__.makePatches)(currentValue, nextValue), patch = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_3__.stringifyPatches)(patches);\n  return { type: \"diffMatchPatch\", path, value: patch };\n}\nfunction insert(items, position, path = []) {\n  return {\n    type: \"insert\",\n    path,\n    position,\n    items\n  };\n}\nfunction set(value, path = []) {\n  return { type: \"set\", path, value };\n}\nfunction unset(path = []) {\n  return { type: \"unset\", path };\n}\nfunction prefixPath(patch, segment) {\n  return {\n    ...patch,\n    path: [segment, ...patch.path]\n  };\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@portabletext/patches/dist/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@portabletext/react/dist/index.js":
/*!*********************************************************!*\
  !*** ../node_modules/@portabletext/react/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PortableText: () => (/* binding */ PortableText),\n/* harmony export */   defaultComponents: () => (/* binding */ defaultComponents),\n/* harmony export */   mergeComponents: () => (/* binding */ mergeComponents),\n/* harmony export */   toPlainText: () => (/* reexport safe */ _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.toPlainText)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @portabletext/toolkit */ \"(ssr)/../node_modules/@portabletext/toolkit/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n\n\n\n\nconst defaultLists = {\n  number: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ol\", { children }),\n  bullet: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ul\", { children })\n}, DefaultListItem = ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"li\", { children }), link = ({ children, value }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"a\", { href: value == null ? void 0 : value.href, children }), underlineStyle = { textDecoration: \"underline\" }, defaultMarks = {\n  em: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"em\", { children }),\n  strong: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"strong\", { children }),\n  code: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"code\", { children }),\n  underline: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { style: underlineStyle, children }),\n  \"strike-through\": ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"del\", { children }),\n  link\n}, getTemplate = (type, prop) => `[@portabletext/react] Unknown ${type}, specify a component for it in the \\`components.${prop}\\` prop`, unknownTypeWarning = (typeName) => getTemplate(`block type \"${typeName}\"`, \"types\"), unknownMarkWarning = (markType) => getTemplate(`mark type \"${markType}\"`, \"marks\"), unknownBlockStyleWarning = (blockStyle) => getTemplate(`block style \"${blockStyle}\"`, \"block\"), unknownListStyleWarning = (listStyle) => getTemplate(`list style \"${listStyle}\"`, \"list\"), unknownListItemStyleWarning = (listStyle) => getTemplate(`list item style \"${listStyle}\"`, \"listItem\");\nfunction printWarning(message) {\n  console.warn(message);\n}\nconst hidden = { display: \"none\" }, DefaultUnknownType = ({\n  value,\n  isInline\n}) => {\n  const warning = unknownTypeWarning(value._type);\n  return isInline ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { style: hidden, children: warning }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { style: hidden, children: warning });\n}, DefaultUnknownMark = ({\n  markType,\n  children\n}) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { className: `unknown__pt__mark__${markType}`, children }), DefaultUnknownBlockStyle = ({\n  children\n}) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { children }), DefaultUnknownList = ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ul\", { children }), DefaultUnknownListItem = ({\n  children\n}) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"li\", { children }), DefaultHardBreak = () => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"br\", {}), defaultBlockStyles = {\n  normal: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", { children }),\n  blockquote: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"blockquote\", { children }),\n  h1: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h1\", { children }),\n  h2: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h2\", { children }),\n  h3: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h3\", { children }),\n  h4: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h4\", { children }),\n  h5: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h5\", { children }),\n  h6: ({ children }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h6\", { children })\n}, defaultComponents = {\n  types: {},\n  block: defaultBlockStyles,\n  marks: defaultMarks,\n  list: defaultLists,\n  listItem: DefaultListItem,\n  hardBreak: DefaultHardBreak,\n  unknownType: DefaultUnknownType,\n  unknownMark: DefaultUnknownMark,\n  unknownList: DefaultUnknownList,\n  unknownListItem: DefaultUnknownListItem,\n  unknownBlockStyle: DefaultUnknownBlockStyle\n};\nfunction mergeComponents(parent, overrides) {\n  const { block, list, listItem, marks, types, ...rest } = overrides;\n  return {\n    ...parent,\n    block: mergeDeeply(parent, overrides, \"block\"),\n    list: mergeDeeply(parent, overrides, \"list\"),\n    listItem: mergeDeeply(parent, overrides, \"listItem\"),\n    marks: mergeDeeply(parent, overrides, \"marks\"),\n    types: mergeDeeply(parent, overrides, \"types\"),\n    ...rest\n  };\n}\nfunction mergeDeeply(parent, overrides, key) {\n  const override = overrides[key], parentVal = parent[key];\n  return typeof override == \"function\" || override && typeof parentVal == \"function\" ? override : override ? { ...parentVal, ...override } : parentVal;\n}\nfunction PortableText({\n  value: input,\n  components: componentOverrides,\n  listNestingMode,\n  onMissingComponent: missingComponentHandler = printWarning\n}) {\n  const handleMissingComponent = missingComponentHandler || noop, blocks = Array.isArray(input) ? input : [input], nested = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.nestLists)(blocks, listNestingMode || _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.LIST_NEST_MODE_HTML), components = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => componentOverrides ? mergeComponents(defaultComponents, componentOverrides) : defaultComponents, [componentOverrides]), renderNode = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(\n    () => getNodeRenderer(components, handleMissingComponent),\n    [components, handleMissingComponent]\n  ), rendered = nested.map(\n    (node, index) => renderNode({ node, index, isInline: !1, renderNode })\n  );\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: rendered });\n}\nconst getNodeRenderer = (components, handleMissingComponent) => {\n  function renderNode(options) {\n    const { node, index, isInline } = options, key = node._key || `node-${index}`;\n    return (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitList)(node) ? renderList(node, index, key) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextListItemBlock)(node) ? renderListItem(node, index, key) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitSpan)(node) ? renderSpan(node, index, key) : hasCustomComponentForNode(node) ? renderCustomBlock(node, index, key, isInline) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextBlock)(node) ? renderBlock(node, index, key, isInline) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitTextNode)(node) ? renderText(node, key) : renderUnknownType(node, index, key, isInline);\n  }\n  function hasCustomComponentForNode(node) {\n    return node._type in components.types;\n  }\n  function renderListItem(node, index, key) {\n    const tree = serializeBlock({ node, index, isInline: !1, renderNode }), renderer = components.listItem, Li = (typeof renderer == \"function\" ? renderer : renderer[node.listItem]) || components.unknownListItem;\n    if (Li === components.unknownListItem) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListItemStyleWarning(style), {\n        type: style,\n        nodeType: \"listItemStyle\"\n      });\n    }\n    let children = tree.children;\n    if (node.style && node.style !== \"normal\") {\n      const { listItem, ...blockNode } = node;\n      children = renderNode({ node: blockNode, index, isInline: !1 });\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Li, { value: node, index, isInline: !1, renderNode, children }, key);\n  }\n  function renderList(node, index, key) {\n    const children = node.children.map(\n      (child, childIndex) => renderNode({\n        node: child._key ? child : { ...child, _key: `li-${index}-${childIndex}` },\n        index: childIndex,\n        isInline: !1\n      })\n    ), component = components.list, List = (typeof component == \"function\" ? component : component[node.listItem]) || components.unknownList;\n    if (List === components.unknownList) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListStyleWarning(style), { nodeType: \"listStyle\", type: style });\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(List, { value: node, index, isInline: !1, renderNode, children }, key);\n  }\n  function renderSpan(node, _index, key) {\n    const { markDef, markType, markKey } = node, Span = components.marks[markType] || components.unknownMark, children = node.children.map(\n      (child, childIndex) => renderNode({ node: child, index: childIndex, isInline: !0 })\n    );\n    return Span === components.unknownMark && handleMissingComponent(unknownMarkWarning(markType), { nodeType: \"mark\", type: markType }), /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\n      Span,\n      {\n        text: (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.spanToPlainText)(node),\n        value: markDef,\n        markType,\n        markKey,\n        renderNode,\n        children\n      },\n      key\n    );\n  }\n  function renderBlock(node, index, key, isInline) {\n    const { _key, ...props } = serializeBlock({ node, index, isInline, renderNode }), style = props.node.style || \"normal\", Block = (typeof components.block == \"function\" ? components.block : components.block[style]) || components.unknownBlockStyle;\n    return Block === components.unknownBlockStyle && handleMissingComponent(unknownBlockStyleWarning(style), {\n      nodeType: \"blockStyle\",\n      type: style\n    }), /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Block, { ...props, value: props.node, renderNode }, key);\n  }\n  function renderText(node, key) {\n    if (node.text === `\n`) {\n      const HardBreak = components.hardBreak;\n      return HardBreak ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(HardBreak, {}, key) : `\n`;\n    }\n    return node.text;\n  }\n  function renderUnknownType(node, index, key, isInline) {\n    const nodeOptions = {\n      value: node,\n      isInline,\n      index,\n      renderNode\n    };\n    handleMissingComponent(unknownTypeWarning(node._type), { nodeType: \"block\", type: node._type });\n    const UnknownType = components.unknownType;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UnknownType, { ...nodeOptions }, key);\n  }\n  function renderCustomBlock(node, index, key, isInline) {\n    const nodeOptions = {\n      value: node,\n      isInline,\n      index,\n      renderNode\n    }, Node = components.types[node._type];\n    return Node ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Node, { ...nodeOptions }, key) : null;\n  }\n  return renderNode;\n};\nfunction serializeBlock(options) {\n  const { node, index, isInline, renderNode } = options, children = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.buildMarksTree)(node).map(\n    (child, i) => renderNode({ node: child, isInline: !0, index: i, renderNode })\n  );\n  return {\n    _key: node._key || `block-${index}`,\n    children,\n    index,\n    isInline,\n    node\n  };\n}\nfunction noop() {\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0Bwb3J0YWJsZXRleHQvcmVhY3QvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQWtEO0FBQzZMO0FBQzNMO0FBQ3BCO0FBQ2hDO0FBQ0EsYUFBYSxVQUFVLHFCQUFxQixzREFBRyxTQUFTLFVBQVU7QUFDbEUsYUFBYSxVQUFVLHFCQUFxQixzREFBRyxTQUFTLFVBQVU7QUFDbEUsQ0FBQyx1QkFBdUIsVUFBVSxxQkFBcUIsc0RBQUcsU0FBUyxVQUFVLGFBQWEsaUJBQWlCLHFCQUFxQixzREFBRyxRQUFRLHFEQUFxRCxzQkFBc0IsNkJBQTZCO0FBQ25QLFNBQVMsVUFBVSxxQkFBcUIsc0RBQUcsU0FBUyxVQUFVO0FBQzlELGFBQWEsVUFBVSxxQkFBcUIsc0RBQUcsYUFBYSxVQUFVO0FBQ3RFLFdBQVcsVUFBVSxxQkFBcUIsc0RBQUcsV0FBVyxVQUFVO0FBQ2xFLGdCQUFnQixVQUFVLHFCQUFxQixzREFBRyxXQUFXLGlDQUFpQztBQUM5Rix1QkFBdUIsVUFBVSxxQkFBcUIsc0RBQUcsVUFBVSxVQUFVO0FBQzdFO0FBQ0EsQ0FBQyxpRUFBaUUsS0FBSyxtREFBbUQsS0FBSyx3RUFBd0UsU0FBUywyRUFBMkUsU0FBUyxxRkFBcUYsV0FBVyxrRkFBa0YsVUFBVSwwRkFBMEYsVUFBVTtBQUNwa0I7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGlCQUFpQjtBQUNsQztBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esb0NBQW9DLHNEQUFHLFdBQVcsa0NBQWtDLG9CQUFvQixzREFBRyxVQUFVLGtDQUFrQztBQUN2SixDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUMscUJBQXFCLHNEQUFHLFdBQVcsaUNBQWlDLFNBQVMsYUFBYTtBQUMzRjtBQUNBLENBQUMscUJBQXFCLHNEQUFHLFFBQVEsVUFBVSwyQkFBMkIsVUFBVSxxQkFBcUIsc0RBQUcsU0FBUyxVQUFVO0FBQzNIO0FBQ0EsQ0FBQyxxQkFBcUIsc0RBQUcsU0FBUyxVQUFVLDRDQUE0QyxzREFBRyxTQUFTO0FBQ3BHLGFBQWEsVUFBVSxxQkFBcUIsc0RBQUcsUUFBUSxVQUFVO0FBQ2pFLGlCQUFpQixVQUFVLHFCQUFxQixzREFBRyxpQkFBaUIsVUFBVTtBQUM5RSxTQUFTLFVBQVUscUJBQXFCLHNEQUFHLFNBQVMsVUFBVTtBQUM5RCxTQUFTLFVBQVUscUJBQXFCLHNEQUFHLFNBQVMsVUFBVTtBQUM5RCxTQUFTLFVBQVUscUJBQXFCLHNEQUFHLFNBQVMsVUFBVTtBQUM5RCxTQUFTLFVBQVUscUJBQXFCLHNEQUFHLFNBQVMsVUFBVTtBQUM5RCxTQUFTLFVBQVUscUJBQXFCLHNEQUFHLFNBQVMsVUFBVTtBQUM5RCxTQUFTLFVBQVUscUJBQXFCLHNEQUFHLFNBQVMsVUFBVTtBQUM5RCxDQUFDO0FBQ0QsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsK0NBQStDO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtHQUErRyw0QkFBNEI7QUFDM0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELDRIQUE0SCxnRUFBUyw0QkFBNEIsc0VBQW1CLGdCQUFnQiw4Q0FBTyw0SUFBNEksOENBQU87QUFDOVY7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLHVDQUF1QztBQUN6RTtBQUNBLHlCQUF5QixzREFBRyxDQUFDLHVEQUFRLElBQUksb0JBQW9CO0FBQzdEO0FBQ0E7QUFDQTtBQUNBLFlBQVksd0JBQXdCLHNDQUFzQyxNQUFNO0FBQ2hGLFdBQVcsZ0ZBQXlCLHdDQUF3QyxrRkFBMkIsNENBQTRDLGdGQUF5QiwwSEFBMEgsMEVBQW1CLG1EQUFtRCxvRkFBNkI7QUFDelk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyx1Q0FBdUM7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxjQUFjLHlCQUF5QjtBQUN2Qyw4QkFBOEIsc0NBQXNDO0FBQ3BFO0FBQ0EsMkJBQTJCLHNEQUFHLE9BQU8sd0RBQXdEO0FBQzdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLHNCQUFzQixNQUFNLEdBQUcsV0FBVyxHQUFHO0FBQ2xGO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsK0RBQStELG9DQUFvQztBQUNuRztBQUNBLDJCQUEyQixzREFBRyxTQUFTLHdEQUF3RDtBQUMvRjtBQUNBO0FBQ0EsWUFBWSw2QkFBNkI7QUFDekMsMENBQTBDLDhDQUE4QztBQUN4RjtBQUNBLHFHQUFxRyxrQ0FBa0MsbUJBQW1CLHNEQUFHO0FBQzdKO0FBQ0E7QUFDQSxjQUFjLHNFQUFlO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGlCQUFpQixtQkFBbUIsbUNBQW1DO0FBQ25GO0FBQ0E7QUFDQTtBQUNBLEtBQUssbUJBQW1CLHNEQUFHLFVBQVUseUNBQXlDO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsc0RBQUcsY0FBYztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELHFDQUFxQztBQUNsRztBQUNBLDJCQUEyQixzREFBRyxnQkFBZ0IsZ0JBQWdCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLGtDQUFrQyxzREFBRyxTQUFTLGdCQUFnQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsb0NBQW9DLHNCQUFzQixxRUFBYztBQUNsRiwrQkFBK0IsaURBQWlEO0FBQ2hGO0FBQ0E7QUFDQSxnQ0FBZ0MsTUFBTTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUU7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL0dhbG9jay9DUy9iZWhvbWUtc2l0ZS9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9yZWFjdC9kaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGpzeCwgRnJhZ21lbnQgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IG5lc3RMaXN0cywgTElTVF9ORVNUX01PREVfSFRNTCwgaXNQb3J0YWJsZVRleHRUb29sa2l0TGlzdCwgaXNQb3J0YWJsZVRleHRMaXN0SXRlbUJsb2NrLCBpc1BvcnRhYmxlVGV4dFRvb2xraXRTcGFuLCBpc1BvcnRhYmxlVGV4dEJsb2NrLCBpc1BvcnRhYmxlVGV4dFRvb2xraXRUZXh0Tm9kZSwgc3BhblRvUGxhaW5UZXh0LCBidWlsZE1hcmtzVHJlZSB9IGZyb20gXCJAcG9ydGFibGV0ZXh0L3Rvb2xraXRcIjtcbmltcG9ydCB7IHRvUGxhaW5UZXh0IH0gZnJvbSBcIkBwb3J0YWJsZXRleHQvdG9vbGtpdFwiO1xuaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gXCJyZWFjdFwiO1xuY29uc3QgZGVmYXVsdExpc3RzID0ge1xuICBudW1iZXI6ICh7IGNoaWxkcmVuIH0pID0+IC8qIEBfX1BVUkVfXyAqLyBqc3goXCJvbFwiLCB7IGNoaWxkcmVuIH0pLFxuICBidWxsZXQ6ICh7IGNoaWxkcmVuIH0pID0+IC8qIEBfX1BVUkVfXyAqLyBqc3goXCJ1bFwiLCB7IGNoaWxkcmVuIH0pXG59LCBEZWZhdWx0TGlzdEl0ZW0gPSAoeyBjaGlsZHJlbiB9KSA9PiAvKiBAX19QVVJFX18gKi8ganN4KFwibGlcIiwgeyBjaGlsZHJlbiB9KSwgbGluayA9ICh7IGNoaWxkcmVuLCB2YWx1ZSB9KSA9PiAvKiBAX19QVVJFX18gKi8ganN4KFwiYVwiLCB7IGhyZWY6IHZhbHVlID09IG51bGwgPyB2b2lkIDAgOiB2YWx1ZS5ocmVmLCBjaGlsZHJlbiB9KSwgdW5kZXJsaW5lU3R5bGUgPSB7IHRleHREZWNvcmF0aW9uOiBcInVuZGVybGluZVwiIH0sIGRlZmF1bHRNYXJrcyA9IHtcbiAgZW06ICh7IGNoaWxkcmVuIH0pID0+IC8qIEBfX1BVUkVfXyAqLyBqc3goXCJlbVwiLCB7IGNoaWxkcmVuIH0pLFxuICBzdHJvbmc6ICh7IGNoaWxkcmVuIH0pID0+IC8qIEBfX1BVUkVfXyAqLyBqc3goXCJzdHJvbmdcIiwgeyBjaGlsZHJlbiB9KSxcbiAgY29kZTogKHsgY2hpbGRyZW4gfSkgPT4gLyogQF9fUFVSRV9fICovIGpzeChcImNvZGVcIiwgeyBjaGlsZHJlbiB9KSxcbiAgdW5kZXJsaW5lOiAoeyBjaGlsZHJlbiB9KSA9PiAvKiBAX19QVVJFX18gKi8ganN4KFwic3BhblwiLCB7IHN0eWxlOiB1bmRlcmxpbmVTdHlsZSwgY2hpbGRyZW4gfSksXG4gIFwic3RyaWtlLXRocm91Z2hcIjogKHsgY2hpbGRyZW4gfSkgPT4gLyogQF9fUFVSRV9fICovIGpzeChcImRlbFwiLCB7IGNoaWxkcmVuIH0pLFxuICBsaW5rXG59LCBnZXRUZW1wbGF0ZSA9ICh0eXBlLCBwcm9wKSA9PiBgW0Bwb3J0YWJsZXRleHQvcmVhY3RdIFVua25vd24gJHt0eXBlfSwgc3BlY2lmeSBhIGNvbXBvbmVudCBmb3IgaXQgaW4gdGhlIFxcYGNvbXBvbmVudHMuJHtwcm9wfVxcYCBwcm9wYCwgdW5rbm93blR5cGVXYXJuaW5nID0gKHR5cGVOYW1lKSA9PiBnZXRUZW1wbGF0ZShgYmxvY2sgdHlwZSBcIiR7dHlwZU5hbWV9XCJgLCBcInR5cGVzXCIpLCB1bmtub3duTWFya1dhcm5pbmcgPSAobWFya1R5cGUpID0+IGdldFRlbXBsYXRlKGBtYXJrIHR5cGUgXCIke21hcmtUeXBlfVwiYCwgXCJtYXJrc1wiKSwgdW5rbm93bkJsb2NrU3R5bGVXYXJuaW5nID0gKGJsb2NrU3R5bGUpID0+IGdldFRlbXBsYXRlKGBibG9jayBzdHlsZSBcIiR7YmxvY2tTdHlsZX1cImAsIFwiYmxvY2tcIiksIHVua25vd25MaXN0U3R5bGVXYXJuaW5nID0gKGxpc3RTdHlsZSkgPT4gZ2V0VGVtcGxhdGUoYGxpc3Qgc3R5bGUgXCIke2xpc3RTdHlsZX1cImAsIFwibGlzdFwiKSwgdW5rbm93bkxpc3RJdGVtU3R5bGVXYXJuaW5nID0gKGxpc3RTdHlsZSkgPT4gZ2V0VGVtcGxhdGUoYGxpc3QgaXRlbSBzdHlsZSBcIiR7bGlzdFN0eWxlfVwiYCwgXCJsaXN0SXRlbVwiKTtcbmZ1bmN0aW9uIHByaW50V2FybmluZyhtZXNzYWdlKSB7XG4gIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbn1cbmNvbnN0IGhpZGRlbiA9IHsgZGlzcGxheTogXCJub25lXCIgfSwgRGVmYXVsdFVua25vd25UeXBlID0gKHtcbiAgdmFsdWUsXG4gIGlzSW5saW5lXG59KSA9PiB7XG4gIGNvbnN0IHdhcm5pbmcgPSB1bmtub3duVHlwZVdhcm5pbmcodmFsdWUuX3R5cGUpO1xuICByZXR1cm4gaXNJbmxpbmUgPyAvKiBAX19QVVJFX18gKi8ganN4KFwic3BhblwiLCB7IHN0eWxlOiBoaWRkZW4sIGNoaWxkcmVuOiB3YXJuaW5nIH0pIDogLyogQF9fUFVSRV9fICovIGpzeChcImRpdlwiLCB7IHN0eWxlOiBoaWRkZW4sIGNoaWxkcmVuOiB3YXJuaW5nIH0pO1xufSwgRGVmYXVsdFVua25vd25NYXJrID0gKHtcbiAgbWFya1R5cGUsXG4gIGNoaWxkcmVuXG59KSA9PiAvKiBAX19QVVJFX18gKi8ganN4KFwic3BhblwiLCB7IGNsYXNzTmFtZTogYHVua25vd25fX3B0X19tYXJrX18ke21hcmtUeXBlfWAsIGNoaWxkcmVuIH0pLCBEZWZhdWx0VW5rbm93bkJsb2NrU3R5bGUgPSAoe1xuICBjaGlsZHJlblxufSkgPT4gLyogQF9fUFVSRV9fICovIGpzeChcInBcIiwgeyBjaGlsZHJlbiB9KSwgRGVmYXVsdFVua25vd25MaXN0ID0gKHsgY2hpbGRyZW4gfSkgPT4gLyogQF9fUFVSRV9fICovIGpzeChcInVsXCIsIHsgY2hpbGRyZW4gfSksIERlZmF1bHRVbmtub3duTGlzdEl0ZW0gPSAoe1xuICBjaGlsZHJlblxufSkgPT4gLyogQF9fUFVSRV9fICovIGpzeChcImxpXCIsIHsgY2hpbGRyZW4gfSksIERlZmF1bHRIYXJkQnJlYWsgPSAoKSA9PiAvKiBAX19QVVJFX18gKi8ganN4KFwiYnJcIiwge30pLCBkZWZhdWx0QmxvY2tTdHlsZXMgPSB7XG4gIG5vcm1hbDogKHsgY2hpbGRyZW4gfSkgPT4gLyogQF9fUFVSRV9fICovIGpzeChcInBcIiwgeyBjaGlsZHJlbiB9KSxcbiAgYmxvY2txdW90ZTogKHsgY2hpbGRyZW4gfSkgPT4gLyogQF9fUFVSRV9fICovIGpzeChcImJsb2NrcXVvdGVcIiwgeyBjaGlsZHJlbiB9KSxcbiAgaDE6ICh7IGNoaWxkcmVuIH0pID0+IC8qIEBfX1BVUkVfXyAqLyBqc3goXCJoMVwiLCB7IGNoaWxkcmVuIH0pLFxuICBoMjogKHsgY2hpbGRyZW4gfSkgPT4gLyogQF9fUFVSRV9fICovIGpzeChcImgyXCIsIHsgY2hpbGRyZW4gfSksXG4gIGgzOiAoeyBjaGlsZHJlbiB9KSA9PiAvKiBAX19QVVJFX18gKi8ganN4KFwiaDNcIiwgeyBjaGlsZHJlbiB9KSxcbiAgaDQ6ICh7IGNoaWxkcmVuIH0pID0+IC8qIEBfX1BVUkVfXyAqLyBqc3goXCJoNFwiLCB7IGNoaWxkcmVuIH0pLFxuICBoNTogKHsgY2hpbGRyZW4gfSkgPT4gLyogQF9fUFVSRV9fICovIGpzeChcImg1XCIsIHsgY2hpbGRyZW4gfSksXG4gIGg2OiAoeyBjaGlsZHJlbiB9KSA9PiAvKiBAX19QVVJFX18gKi8ganN4KFwiaDZcIiwgeyBjaGlsZHJlbiB9KVxufSwgZGVmYXVsdENvbXBvbmVudHMgPSB7XG4gIHR5cGVzOiB7fSxcbiAgYmxvY2s6IGRlZmF1bHRCbG9ja1N0eWxlcyxcbiAgbWFya3M6IGRlZmF1bHRNYXJrcyxcbiAgbGlzdDogZGVmYXVsdExpc3RzLFxuICBsaXN0SXRlbTogRGVmYXVsdExpc3RJdGVtLFxuICBoYXJkQnJlYWs6IERlZmF1bHRIYXJkQnJlYWssXG4gIHVua25vd25UeXBlOiBEZWZhdWx0VW5rbm93blR5cGUsXG4gIHVua25vd25NYXJrOiBEZWZhdWx0VW5rbm93bk1hcmssXG4gIHVua25vd25MaXN0OiBEZWZhdWx0VW5rbm93bkxpc3QsXG4gIHVua25vd25MaXN0SXRlbTogRGVmYXVsdFVua25vd25MaXN0SXRlbSxcbiAgdW5rbm93bkJsb2NrU3R5bGU6IERlZmF1bHRVbmtub3duQmxvY2tTdHlsZVxufTtcbmZ1bmN0aW9uIG1lcmdlQ29tcG9uZW50cyhwYXJlbnQsIG92ZXJyaWRlcykge1xuICBjb25zdCB7IGJsb2NrLCBsaXN0LCBsaXN0SXRlbSwgbWFya3MsIHR5cGVzLCAuLi5yZXN0IH0gPSBvdmVycmlkZXM7XG4gIHJldHVybiB7XG4gICAgLi4ucGFyZW50LFxuICAgIGJsb2NrOiBtZXJnZURlZXBseShwYXJlbnQsIG92ZXJyaWRlcywgXCJibG9ja1wiKSxcbiAgICBsaXN0OiBtZXJnZURlZXBseShwYXJlbnQsIG92ZXJyaWRlcywgXCJsaXN0XCIpLFxuICAgIGxpc3RJdGVtOiBtZXJnZURlZXBseShwYXJlbnQsIG92ZXJyaWRlcywgXCJsaXN0SXRlbVwiKSxcbiAgICBtYXJrczogbWVyZ2VEZWVwbHkocGFyZW50LCBvdmVycmlkZXMsIFwibWFya3NcIiksXG4gICAgdHlwZXM6IG1lcmdlRGVlcGx5KHBhcmVudCwgb3ZlcnJpZGVzLCBcInR5cGVzXCIpLFxuICAgIC4uLnJlc3RcbiAgfTtcbn1cbmZ1bmN0aW9uIG1lcmdlRGVlcGx5KHBhcmVudCwgb3ZlcnJpZGVzLCBrZXkpIHtcbiAgY29uc3Qgb3ZlcnJpZGUgPSBvdmVycmlkZXNba2V5XSwgcGFyZW50VmFsID0gcGFyZW50W2tleV07XG4gIHJldHVybiB0eXBlb2Ygb3ZlcnJpZGUgPT0gXCJmdW5jdGlvblwiIHx8IG92ZXJyaWRlICYmIHR5cGVvZiBwYXJlbnRWYWwgPT0gXCJmdW5jdGlvblwiID8gb3ZlcnJpZGUgOiBvdmVycmlkZSA/IHsgLi4ucGFyZW50VmFsLCAuLi5vdmVycmlkZSB9IDogcGFyZW50VmFsO1xufVxuZnVuY3Rpb24gUG9ydGFibGVUZXh0KHtcbiAgdmFsdWU6IGlucHV0LFxuICBjb21wb25lbnRzOiBjb21wb25lbnRPdmVycmlkZXMsXG4gIGxpc3ROZXN0aW5nTW9kZSxcbiAgb25NaXNzaW5nQ29tcG9uZW50OiBtaXNzaW5nQ29tcG9uZW50SGFuZGxlciA9IHByaW50V2FybmluZ1xufSkge1xuICBjb25zdCBoYW5kbGVNaXNzaW5nQ29tcG9uZW50ID0gbWlzc2luZ0NvbXBvbmVudEhhbmRsZXIgfHwgbm9vcCwgYmxvY2tzID0gQXJyYXkuaXNBcnJheShpbnB1dCkgPyBpbnB1dCA6IFtpbnB1dF0sIG5lc3RlZCA9IG5lc3RMaXN0cyhibG9ja3MsIGxpc3ROZXN0aW5nTW9kZSB8fCBMSVNUX05FU1RfTU9ERV9IVE1MKSwgY29tcG9uZW50cyA9IHVzZU1lbW8oKCkgPT4gY29tcG9uZW50T3ZlcnJpZGVzID8gbWVyZ2VDb21wb25lbnRzKGRlZmF1bHRDb21wb25lbnRzLCBjb21wb25lbnRPdmVycmlkZXMpIDogZGVmYXVsdENvbXBvbmVudHMsIFtjb21wb25lbnRPdmVycmlkZXNdKSwgcmVuZGVyTm9kZSA9IHVzZU1lbW8oXG4gICAgKCkgPT4gZ2V0Tm9kZVJlbmRlcmVyKGNvbXBvbmVudHMsIGhhbmRsZU1pc3NpbmdDb21wb25lbnQpLFxuICAgIFtjb21wb25lbnRzLCBoYW5kbGVNaXNzaW5nQ29tcG9uZW50XVxuICApLCByZW5kZXJlZCA9IG5lc3RlZC5tYXAoXG4gICAgKG5vZGUsIGluZGV4KSA9PiByZW5kZXJOb2RlKHsgbm9kZSwgaW5kZXgsIGlzSW5saW5lOiAhMSwgcmVuZGVyTm9kZSB9KVxuICApO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeChGcmFnbWVudCwgeyBjaGlsZHJlbjogcmVuZGVyZWQgfSk7XG59XG5jb25zdCBnZXROb2RlUmVuZGVyZXIgPSAoY29tcG9uZW50cywgaGFuZGxlTWlzc2luZ0NvbXBvbmVudCkgPT4ge1xuICBmdW5jdGlvbiByZW5kZXJOb2RlKG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IG5vZGUsIGluZGV4LCBpc0lubGluZSB9ID0gb3B0aW9ucywga2V5ID0gbm9kZS5fa2V5IHx8IGBub2RlLSR7aW5kZXh9YDtcbiAgICByZXR1cm4gaXNQb3J0YWJsZVRleHRUb29sa2l0TGlzdChub2RlKSA/IHJlbmRlckxpc3Qobm9kZSwgaW5kZXgsIGtleSkgOiBpc1BvcnRhYmxlVGV4dExpc3RJdGVtQmxvY2sobm9kZSkgPyByZW5kZXJMaXN0SXRlbShub2RlLCBpbmRleCwga2V5KSA6IGlzUG9ydGFibGVUZXh0VG9vbGtpdFNwYW4obm9kZSkgPyByZW5kZXJTcGFuKG5vZGUsIGluZGV4LCBrZXkpIDogaGFzQ3VzdG9tQ29tcG9uZW50Rm9yTm9kZShub2RlKSA/IHJlbmRlckN1c3RvbUJsb2NrKG5vZGUsIGluZGV4LCBrZXksIGlzSW5saW5lKSA6IGlzUG9ydGFibGVUZXh0QmxvY2sobm9kZSkgPyByZW5kZXJCbG9jayhub2RlLCBpbmRleCwga2V5LCBpc0lubGluZSkgOiBpc1BvcnRhYmxlVGV4dFRvb2xraXRUZXh0Tm9kZShub2RlKSA/IHJlbmRlclRleHQobm9kZSwga2V5KSA6IHJlbmRlclVua25vd25UeXBlKG5vZGUsIGluZGV4LCBrZXksIGlzSW5saW5lKTtcbiAgfVxuICBmdW5jdGlvbiBoYXNDdXN0b21Db21wb25lbnRGb3JOb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5fdHlwZSBpbiBjb21wb25lbnRzLnR5cGVzO1xuICB9XG4gIGZ1bmN0aW9uIHJlbmRlckxpc3RJdGVtKG5vZGUsIGluZGV4LCBrZXkpIHtcbiAgICBjb25zdCB0cmVlID0gc2VyaWFsaXplQmxvY2soeyBub2RlLCBpbmRleCwgaXNJbmxpbmU6ICExLCByZW5kZXJOb2RlIH0pLCByZW5kZXJlciA9IGNvbXBvbmVudHMubGlzdEl0ZW0sIExpID0gKHR5cGVvZiByZW5kZXJlciA9PSBcImZ1bmN0aW9uXCIgPyByZW5kZXJlciA6IHJlbmRlcmVyW25vZGUubGlzdEl0ZW1dKSB8fCBjb21wb25lbnRzLnVua25vd25MaXN0SXRlbTtcbiAgICBpZiAoTGkgPT09IGNvbXBvbmVudHMudW5rbm93bkxpc3RJdGVtKSB7XG4gICAgICBjb25zdCBzdHlsZSA9IG5vZGUubGlzdEl0ZW0gfHwgXCJidWxsZXRcIjtcbiAgICAgIGhhbmRsZU1pc3NpbmdDb21wb25lbnQodW5rbm93bkxpc3RJdGVtU3R5bGVXYXJuaW5nKHN0eWxlKSwge1xuICAgICAgICB0eXBlOiBzdHlsZSxcbiAgICAgICAgbm9kZVR5cGU6IFwibGlzdEl0ZW1TdHlsZVwiXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IGNoaWxkcmVuID0gdHJlZS5jaGlsZHJlbjtcbiAgICBpZiAobm9kZS5zdHlsZSAmJiBub2RlLnN0eWxlICE9PSBcIm5vcm1hbFwiKSB7XG4gICAgICBjb25zdCB7IGxpc3RJdGVtLCAuLi5ibG9ja05vZGUgfSA9IG5vZGU7XG4gICAgICBjaGlsZHJlbiA9IHJlbmRlck5vZGUoeyBub2RlOiBibG9ja05vZGUsIGluZGV4LCBpc0lubGluZTogITEgfSk7XG4gICAgfVxuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4KExpLCB7IHZhbHVlOiBub2RlLCBpbmRleCwgaXNJbmxpbmU6ICExLCByZW5kZXJOb2RlLCBjaGlsZHJlbiB9LCBrZXkpO1xuICB9XG4gIGZ1bmN0aW9uIHJlbmRlckxpc3Qobm9kZSwgaW5kZXgsIGtleSkge1xuICAgIGNvbnN0IGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbi5tYXAoXG4gICAgICAoY2hpbGQsIGNoaWxkSW5kZXgpID0+IHJlbmRlck5vZGUoe1xuICAgICAgICBub2RlOiBjaGlsZC5fa2V5ID8gY2hpbGQgOiB7IC4uLmNoaWxkLCBfa2V5OiBgbGktJHtpbmRleH0tJHtjaGlsZEluZGV4fWAgfSxcbiAgICAgICAgaW5kZXg6IGNoaWxkSW5kZXgsXG4gICAgICAgIGlzSW5saW5lOiAhMVxuICAgICAgfSlcbiAgICApLCBjb21wb25lbnQgPSBjb21wb25lbnRzLmxpc3QsIExpc3QgPSAodHlwZW9mIGNvbXBvbmVudCA9PSBcImZ1bmN0aW9uXCIgPyBjb21wb25lbnQgOiBjb21wb25lbnRbbm9kZS5saXN0SXRlbV0pIHx8IGNvbXBvbmVudHMudW5rbm93bkxpc3Q7XG4gICAgaWYgKExpc3QgPT09IGNvbXBvbmVudHMudW5rbm93bkxpc3QpIHtcbiAgICAgIGNvbnN0IHN0eWxlID0gbm9kZS5saXN0SXRlbSB8fCBcImJ1bGxldFwiO1xuICAgICAgaGFuZGxlTWlzc2luZ0NvbXBvbmVudCh1bmtub3duTGlzdFN0eWxlV2FybmluZyhzdHlsZSksIHsgbm9kZVR5cGU6IFwibGlzdFN0eWxlXCIsIHR5cGU6IHN0eWxlIH0pO1xuICAgIH1cbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeChMaXN0LCB7IHZhbHVlOiBub2RlLCBpbmRleCwgaXNJbmxpbmU6ICExLCByZW5kZXJOb2RlLCBjaGlsZHJlbiB9LCBrZXkpO1xuICB9XG4gIGZ1bmN0aW9uIHJlbmRlclNwYW4obm9kZSwgX2luZGV4LCBrZXkpIHtcbiAgICBjb25zdCB7IG1hcmtEZWYsIG1hcmtUeXBlLCBtYXJrS2V5IH0gPSBub2RlLCBTcGFuID0gY29tcG9uZW50cy5tYXJrc1ttYXJrVHlwZV0gfHwgY29tcG9uZW50cy51bmtub3duTWFyaywgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLm1hcChcbiAgICAgIChjaGlsZCwgY2hpbGRJbmRleCkgPT4gcmVuZGVyTm9kZSh7IG5vZGU6IGNoaWxkLCBpbmRleDogY2hpbGRJbmRleCwgaXNJbmxpbmU6ICEwIH0pXG4gICAgKTtcbiAgICByZXR1cm4gU3BhbiA9PT0gY29tcG9uZW50cy51bmtub3duTWFyayAmJiBoYW5kbGVNaXNzaW5nQ29tcG9uZW50KHVua25vd25NYXJrV2FybmluZyhtYXJrVHlwZSksIHsgbm9kZVR5cGU6IFwibWFya1wiLCB0eXBlOiBtYXJrVHlwZSB9KSwgLyogQF9fUFVSRV9fICovIGpzeChcbiAgICAgIFNwYW4sXG4gICAgICB7XG4gICAgICAgIHRleHQ6IHNwYW5Ub1BsYWluVGV4dChub2RlKSxcbiAgICAgICAgdmFsdWU6IG1hcmtEZWYsXG4gICAgICAgIG1hcmtUeXBlLFxuICAgICAgICBtYXJrS2V5LFxuICAgICAgICByZW5kZXJOb2RlLFxuICAgICAgICBjaGlsZHJlblxuICAgICAgfSxcbiAgICAgIGtleVxuICAgICk7XG4gIH1cbiAgZnVuY3Rpb24gcmVuZGVyQmxvY2sobm9kZSwgaW5kZXgsIGtleSwgaXNJbmxpbmUpIHtcbiAgICBjb25zdCB7IF9rZXksIC4uLnByb3BzIH0gPSBzZXJpYWxpemVCbG9jayh7IG5vZGUsIGluZGV4LCBpc0lubGluZSwgcmVuZGVyTm9kZSB9KSwgc3R5bGUgPSBwcm9wcy5ub2RlLnN0eWxlIHx8IFwibm9ybWFsXCIsIEJsb2NrID0gKHR5cGVvZiBjb21wb25lbnRzLmJsb2NrID09IFwiZnVuY3Rpb25cIiA/IGNvbXBvbmVudHMuYmxvY2sgOiBjb21wb25lbnRzLmJsb2NrW3N0eWxlXSkgfHwgY29tcG9uZW50cy51bmtub3duQmxvY2tTdHlsZTtcbiAgICByZXR1cm4gQmxvY2sgPT09IGNvbXBvbmVudHMudW5rbm93bkJsb2NrU3R5bGUgJiYgaGFuZGxlTWlzc2luZ0NvbXBvbmVudCh1bmtub3duQmxvY2tTdHlsZVdhcm5pbmcoc3R5bGUpLCB7XG4gICAgICBub2RlVHlwZTogXCJibG9ja1N0eWxlXCIsXG4gICAgICB0eXBlOiBzdHlsZVxuICAgIH0pLCAvKiBAX19QVVJFX18gKi8ganN4KEJsb2NrLCB7IC4uLnByb3BzLCB2YWx1ZTogcHJvcHMubm9kZSwgcmVuZGVyTm9kZSB9LCBrZXkpO1xuICB9XG4gIGZ1bmN0aW9uIHJlbmRlclRleHQobm9kZSwga2V5KSB7XG4gICAgaWYgKG5vZGUudGV4dCA9PT0gYFxuYCkge1xuICAgICAgY29uc3QgSGFyZEJyZWFrID0gY29tcG9uZW50cy5oYXJkQnJlYWs7XG4gICAgICByZXR1cm4gSGFyZEJyZWFrID8gLyogQF9fUFVSRV9fICovIGpzeChIYXJkQnJlYWssIHt9LCBrZXkpIDogYFxuYDtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGUudGV4dDtcbiAgfVxuICBmdW5jdGlvbiByZW5kZXJVbmtub3duVHlwZShub2RlLCBpbmRleCwga2V5LCBpc0lubGluZSkge1xuICAgIGNvbnN0IG5vZGVPcHRpb25zID0ge1xuICAgICAgdmFsdWU6IG5vZGUsXG4gICAgICBpc0lubGluZSxcbiAgICAgIGluZGV4LFxuICAgICAgcmVuZGVyTm9kZVxuICAgIH07XG4gICAgaGFuZGxlTWlzc2luZ0NvbXBvbmVudCh1bmtub3duVHlwZVdhcm5pbmcobm9kZS5fdHlwZSksIHsgbm9kZVR5cGU6IFwiYmxvY2tcIiwgdHlwZTogbm9kZS5fdHlwZSB9KTtcbiAgICBjb25zdCBVbmtub3duVHlwZSA9IGNvbXBvbmVudHMudW5rbm93blR5cGU7XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3goVW5rbm93blR5cGUsIHsgLi4ubm9kZU9wdGlvbnMgfSwga2V5KTtcbiAgfVxuICBmdW5jdGlvbiByZW5kZXJDdXN0b21CbG9jayhub2RlLCBpbmRleCwga2V5LCBpc0lubGluZSkge1xuICAgIGNvbnN0IG5vZGVPcHRpb25zID0ge1xuICAgICAgdmFsdWU6IG5vZGUsXG4gICAgICBpc0lubGluZSxcbiAgICAgIGluZGV4LFxuICAgICAgcmVuZGVyTm9kZVxuICAgIH0sIE5vZGUgPSBjb21wb25lbnRzLnR5cGVzW25vZGUuX3R5cGVdO1xuICAgIHJldHVybiBOb2RlID8gLyogQF9fUFVSRV9fICovIGpzeChOb2RlLCB7IC4uLm5vZGVPcHRpb25zIH0sIGtleSkgOiBudWxsO1xuICB9XG4gIHJldHVybiByZW5kZXJOb2RlO1xufTtcbmZ1bmN0aW9uIHNlcmlhbGl6ZUJsb2NrKG9wdGlvbnMpIHtcbiAgY29uc3QgeyBub2RlLCBpbmRleCwgaXNJbmxpbmUsIHJlbmRlck5vZGUgfSA9IG9wdGlvbnMsIGNoaWxkcmVuID0gYnVpbGRNYXJrc1RyZWUobm9kZSkubWFwKFxuICAgIChjaGlsZCwgaSkgPT4gcmVuZGVyTm9kZSh7IG5vZGU6IGNoaWxkLCBpc0lubGluZTogITAsIGluZGV4OiBpLCByZW5kZXJOb2RlIH0pXG4gICk7XG4gIHJldHVybiB7XG4gICAgX2tleTogbm9kZS5fa2V5IHx8IGBibG9jay0ke2luZGV4fWAsXG4gICAgY2hpbGRyZW4sXG4gICAgaW5kZXgsXG4gICAgaXNJbmxpbmUsXG4gICAgbm9kZVxuICB9O1xufVxuZnVuY3Rpb24gbm9vcCgpIHtcbn1cbmV4cG9ydCB7XG4gIFBvcnRhYmxlVGV4dCxcbiAgZGVmYXVsdENvbXBvbmVudHMsXG4gIG1lcmdlQ29tcG9uZW50cyxcbiAgdG9QbGFpblRleHRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@portabletext/react/dist/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@portabletext/sanity-bridge/dist/index.js":
/*!*****************************************************************!*\
  !*** ../node_modules/@portabletext/sanity-bridge/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compileSchemaDefinitionToPortableTextMemberSchemaTypes: () => (/* binding */ compileSchemaDefinitionToPortableTextMemberSchemaTypes),\n/* harmony export */   createPortableTextMemberSchemaTypes: () => (/* binding */ createPortableTextMemberSchemaTypes),\n/* harmony export */   portableTextMemberSchemaTypesToSchema: () => (/* binding */ portableTextMemberSchemaTypesToSchema),\n/* harmony export */   sanitySchemaToPortableTextSchema: () => (/* binding */ sanitySchemaToPortableTextSchema)\n/* harmony export */ });\n/* harmony import */ var _sanity_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sanity/schema */ \"(ssr)/../node_modules/@sanity/schema/lib/index.mjs\");\n/* harmony import */ var _sanity_schema_internal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sanity/schema/_internal */ \"(ssr)/../node_modules/@sanity/schema/lib/_internal.mjs\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/../node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var lodash_startcase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash.startcase */ \"(ssr)/../node_modules/lodash.startcase/index.js\");\n/* harmony import */ var get_random_values_esm__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! get-random-values-esm */ \"(ssr)/../node_modules/get-random-values-esm/index.mjs\");\n\n\n\n\n\nfunction createPortableTextMemberSchemaTypes(portableTextType) {\n  if (!portableTextType)\n    throw new Error(\"Parameter 'portabletextType' missing (required)\");\n  const blockType = portableTextType.of?.find(findBlockType);\n  if (!blockType)\n    throw new Error(\"Block type is not defined in this schema (required)\");\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === \"children\"\n  );\n  if (!childrenField)\n    throw new Error(\"Children field for block type found in schema (required)\");\n  const ofType = childrenField.type.of;\n  if (!ofType)\n    throw new Error(\n      \"Valid types for block children not found in schema (required)\"\n    );\n  const spanType = ofType.find((memberType) => memberType.name === \"span\");\n  if (!spanType)\n    throw new Error(\"Span type not found in schema (required)\");\n  const inlineObjectTypes = ofType.filter(\n    (memberType) => memberType.name !== \"span\"\n  ) || [], blockObjectTypes = portableTextType.of?.filter(\n    (field) => field.name !== blockType.name\n  ) || [];\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: spanType.annotations\n  };\n}\nfunction resolveEnabledStyles(blockType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === \"style\"\n  );\n  if (!styleField)\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\"\n    );\n  const textStyles = styleField.type.options?.list && styleField.type.options.list?.filter(\n    (style) => style.value\n  );\n  if (!textStyles || textStyles.length === 0)\n    throw new Error(\n      \"The style fields need at least one style defined. I.e: {title: 'Normal', value: 'normal'}.\"\n    );\n  return textStyles;\n}\nfunction resolveEnabledDecorators(spanType) {\n  return spanType.decorators;\n}\nfunction resolveEnabledListItems(blockType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === \"listItem\"\n  );\n  if (!listField)\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\"\n    );\n  const listItems = listField.type.options?.list && listField.type.options.list.filter((list) => list.value);\n  if (!listItems)\n    throw new Error(\"The list field need at least to be an empty array\");\n  return listItems;\n}\nfunction findBlockType(type) {\n  return type.type ? findBlockType(type.type) : type.name === \"block\" ? type : null;\n}\nfunction portableTextMemberSchemaTypesToSchema(schema) {\n  return {\n    annotations: schema.annotations.map((annotation) => ({\n      name: annotation.name,\n      fields: annotation.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n        title: field.type.title\n      })),\n      title: annotation.title\n    })),\n    block: {\n      name: schema.block.name\n    },\n    blockObjects: schema.blockObjects.map((blockObject) => ({\n      name: blockObject.name,\n      fields: blockObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n        title: field.type.title\n      })),\n      title: blockObject.title\n    })),\n    decorators: schema.decorators.map((decorator) => ({\n      name: decorator.value,\n      title: decorator.title,\n      value: decorator.value\n    })),\n    inlineObjects: schema.inlineObjects.map((inlineObject) => ({\n      name: inlineObject.name,\n      fields: inlineObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n        title: field.type.title\n      })),\n      title: inlineObject.title\n    })),\n    span: {\n      name: schema.span.name\n    },\n    styles: schema.styles.map((style) => ({\n      name: style.value,\n      title: style.title,\n      value: style.value\n    })),\n    lists: schema.lists.map((list) => ({\n      name: list.value,\n      title: list.title,\n      value: list.value\n    }))\n  };\n}\nfunction sanitySchemaToPortableTextSchema(sanitySchema) {\n  const portableTextMemberSchemaTypes = createPortableTextMemberSchemaTypes(\n    sanitySchema.hasOwnProperty(\"jsonType\") ? sanitySchema : compileType(sanitySchema)\n  );\n  return portableTextMemberSchemaTypesToSchema(portableTextMemberSchemaTypes);\n}\nfunction compileType(rawType) {\n  return _sanity_schema__WEBPACK_IMPORTED_MODULE_1__.Schema.compile({\n    name: \"blockTypeSchema\",\n    types: [rawType, ..._sanity_schema_internal__WEBPACK_IMPORTED_MODULE_2__.builtinTypes]\n  }).get(rawType.name);\n}\nconst keyGenerator = () => randomKey(12), getByteHexTable = /* @__PURE__ */ (() => {\n  let table;\n  return () => {\n    if (table)\n      return table;\n    table = [];\n    for (let i = 0; i < 256; ++i)\n      table[i] = (i + 256).toString(16).slice(1);\n    return table;\n  };\n})();\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length);\n  return (0,get_random_values_esm__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(rnds8), rnds8;\n}\nfunction randomKey(length) {\n  const table = getByteHexTable();\n  return whatwgRNG(length).reduce((str, n) => str + table[n], \"\").slice(0, length);\n}\nconst temporaryImageBlockObjectName = `tmp-${keyGenerator()}-image`, temporaryUrlBlockObjectName = `tmp-${keyGenerator()}-url`, temporaryImageInlineObjectName = `tmp-${keyGenerator()}-image`, temporaryUrlInlineObjectName = `tmp-${keyGenerator()}-url`, temporaryBlockObjectNames = {\n  image: temporaryImageBlockObjectName,\n  url: temporaryUrlBlockObjectName\n}, temporaryInlineObjectNames = {\n  image: temporaryImageInlineObjectName,\n  url: temporaryUrlInlineObjectName\n}, blockObjectNames = {\n  [temporaryImageBlockObjectName]: \"image\",\n  [temporaryUrlBlockObjectName]: \"url\"\n}, inlineObjectNames = {\n  [temporaryImageInlineObjectName]: \"image\",\n  [temporaryUrlInlineObjectName]: \"url\"\n}, defaultObjectTitles = {\n  image: \"Image\",\n  url: \"URL\"\n};\nfunction compileSchemaDefinitionToPortableTextMemberSchemaTypes(definition) {\n  const blockObjects = definition?.blockObjects?.map(\n    (blockObject) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_4__.defineType)({\n      type: \"object\",\n      // Very naive way to work around `SanitySchema.compile` adding default\n      // fields to objects with certain names.\n      name: temporaryBlockObjectNames[blockObject.name] ?? blockObject.name,\n      title: blockObject.title === void 0 ? (\n        // This avoids the default title which is a title case of the object name\n        defaultObjectTitles[blockObject.name]\n      ) : blockObject.title,\n      fields: blockObject.fields?.map((field) => ({\n        name: field.name,\n        type: field.type,\n        title: field.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(field.name)\n      })) ?? []\n    })\n  ) ?? [], inlineObjects = definition?.inlineObjects?.map(\n    (inlineObject) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_4__.defineType)({\n      type: \"object\",\n      // Very naive way to work around `SanitySchema.compile` adding default\n      // fields to objects with certain names.\n      name: temporaryInlineObjectNames[inlineObject.name] ?? inlineObject.name,\n      title: inlineObject.title === void 0 ? (\n        // This avoids the default title which is a title case of the object name\n        defaultObjectTitles[inlineObject.name]\n      ) : inlineObject.title,\n      fields: inlineObject.fields?.map((field) => ({\n        name: field.name,\n        type: field.type,\n        title: field.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(field.name)\n      })) ?? []\n    })\n  ) ?? [], portableTextSchema = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_4__.defineField)({\n    type: \"array\",\n    name: \"portable-text\",\n    of: [\n      ...blockObjects.map((blockObject) => ({ type: blockObject.name })),\n      {\n        type: \"block\",\n        name: \"block\",\n        of: inlineObjects.map((inlineObject) => ({ type: inlineObject.name })),\n        marks: {\n          decorators: definition?.decorators?.map((decorator) => ({\n            title: decorator.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(decorator.name),\n            value: decorator.name\n          })) ?? [],\n          annotations: definition?.annotations?.map((annotation) => ({\n            name: annotation.name,\n            type: \"object\",\n            title: annotation.title,\n            fields: annotation.fields?.map((field) => ({\n              name: field.name,\n              title: field.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(field.name),\n              type: field.type\n            })) ?? []\n          })) ?? []\n        },\n        lists: definition?.lists?.map((list) => ({\n          value: list.name,\n          title: list.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(list.name)\n        })) ?? [],\n        styles: definition?.styles?.map((style) => ({\n          value: style.name,\n          title: style.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(style.name)\n        })) ?? []\n      }\n    ]\n  }), schema = _sanity_schema__WEBPACK_IMPORTED_MODULE_1__.Schema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects]\n  }).get(\"portable-text\"), pteSchema = createPortableTextMemberSchemaTypes(schema);\n  return {\n    ...pteSchema,\n    portableText: {\n      ...pteSchema.portableText,\n      of: pteSchema.portableText.of.map((schemaType) => {\n        if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_4__.isObjectSchemaType)(schemaType))\n          return schemaType;\n        const nameMapping = blockObjectNames[schemaType.name];\n        schemaType.name = nameMapping ?? schemaType.name;\n        for (const field of schemaType.fields)\n          if (!(field.name !== \"children\" || !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_4__.isArraySchemaType)(field.type)))\n            for (const ofSchemaType of field.type.of) {\n              const nameMapping2 = inlineObjectNames[ofSchemaType.name];\n              nameMapping2 && (ofSchemaType.name = nameMapping2);\n            }\n        return schemaType;\n      })\n    },\n    blockObjects: pteSchema.blockObjects.map(\n      (blockObject) => blockObjectNames[blockObject.name] !== void 0 ? {\n        ...blockObject,\n        name: blockObjectNames[blockObject.name],\n        type: {\n          ...blockObject.type,\n          name: blockObjectNames[blockObject.name]\n        }\n      } : blockObject\n    ),\n    inlineObjects: pteSchema.inlineObjects.map(\n      (inlineObject) => inlineObjectNames[inlineObject.name] !== void 0 ? {\n        ...inlineObject,\n        name: inlineObjectNames[inlineObject.name]\n      } : inlineObject\n    )\n  };\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@portabletext/sanity-bridge/dist/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@portabletext/schema/dist/index.js":
/*!**********************************************************!*\
  !*** ../node_modules/@portabletext/schema/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compileSchema: () => (/* binding */ compileSchema),\n/* harmony export */   defineSchema: () => (/* binding */ defineSchema),\n/* harmony export */   isSpan: () => (/* binding */ isSpan),\n/* harmony export */   isTextBlock: () => (/* binding */ isTextBlock),\n/* harmony export */   isTypedObject: () => (/* binding */ isTypedObject)\n/* harmony export */ });\nfunction compileSchema(definition) {\n  const styles = (definition.styles ?? []).map((style) => ({\n    ...style,\n    value: style.name\n  })), blockFields = [];\n  if (definition.block?.fields)\n    for (const field of definition.block.fields) {\n      if (field.name === \"_type\" || field.name === \"_key\" || field.name === \"children\" || field.name === \"markDefs\" || field.name === \"style\" || field.name === \"listItem\" || field.name === \"level\") {\n        console.warn(\n          `\"${field.name}\" is a reserved field name on Portable Text blocks`\n        );\n        continue;\n      }\n      blockFields.push(field);\n    }\n  return {\n    block: {\n      name: definition.block?.name ?? \"block\",\n      ...blockFields.length > 0 ? { fields: blockFields } : {}\n    },\n    span: {\n      name: \"span\"\n    },\n    styles: styles.some((style) => style.value === \"normal\") ? styles : [{ value: \"normal\", name: \"normal\", title: \"Normal\" }, ...styles],\n    lists: (definition.lists ?? []).map((list) => ({\n      ...list,\n      value: list.name\n    })),\n    decorators: (definition.decorators ?? []).map((decorator) => ({\n      ...decorator,\n      value: decorator.name\n    })),\n    annotations: (definition.annotations ?? []).map((annotation) => ({\n      ...annotation,\n      fields: annotation.fields ?? []\n    })),\n    blockObjects: (definition.blockObjects ?? []).map((blockObject) => ({\n      ...blockObject,\n      fields: blockObject.fields ?? []\n    })),\n    inlineObjects: (definition.inlineObjects ?? []).map((inlineObject) => ({\n      ...inlineObject,\n      fields: inlineObject.fields ?? []\n    }))\n  };\n}\nfunction defineSchema(definition) {\n  return definition;\n}\nfunction isTypedObject(object) {\n  return isRecord(object) && typeof object._type == \"string\";\n}\nfunction isRecord(value) {\n  return !!value && (typeof value == \"object\" || typeof value == \"function\");\n}\nfunction isTextBlock(context, block) {\n  return !(!isTypedObject(block) || block._type !== context.schema.block.name || !Array.isArray(block.children));\n}\nfunction isSpan(context, child) {\n  return !(!isTypedObject(child) || child._type !== context.schema.span.name || typeof child.text != \"string\");\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0Bwb3J0YWJsZXRleHQvc2NoZW1hL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsV0FBVztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLHNCQUFzQjtBQUMxRCxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTCwyRUFBMkUsa0RBQWtEO0FBQzdIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9FO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9HYWxvY2svQ1MvYmVob21lLXNpdGUvbm9kZV9tb2R1bGVzL0Bwb3J0YWJsZXRleHQvc2NoZW1hL2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gY29tcGlsZVNjaGVtYShkZWZpbml0aW9uKSB7XG4gIGNvbnN0IHN0eWxlcyA9IChkZWZpbml0aW9uLnN0eWxlcyA/PyBbXSkubWFwKChzdHlsZSkgPT4gKHtcbiAgICAuLi5zdHlsZSxcbiAgICB2YWx1ZTogc3R5bGUubmFtZVxuICB9KSksIGJsb2NrRmllbGRzID0gW107XG4gIGlmIChkZWZpbml0aW9uLmJsb2NrPy5maWVsZHMpXG4gICAgZm9yIChjb25zdCBmaWVsZCBvZiBkZWZpbml0aW9uLmJsb2NrLmZpZWxkcykge1xuICAgICAgaWYgKGZpZWxkLm5hbWUgPT09IFwiX3R5cGVcIiB8fCBmaWVsZC5uYW1lID09PSBcIl9rZXlcIiB8fCBmaWVsZC5uYW1lID09PSBcImNoaWxkcmVuXCIgfHwgZmllbGQubmFtZSA9PT0gXCJtYXJrRGVmc1wiIHx8IGZpZWxkLm5hbWUgPT09IFwic3R5bGVcIiB8fCBmaWVsZC5uYW1lID09PSBcImxpc3RJdGVtXCIgfHwgZmllbGQubmFtZSA9PT0gXCJsZXZlbFwiKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgXCIke2ZpZWxkLm5hbWV9XCIgaXMgYSByZXNlcnZlZCBmaWVsZCBuYW1lIG9uIFBvcnRhYmxlIFRleHQgYmxvY2tzYFxuICAgICAgICApO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGJsb2NrRmllbGRzLnB1c2goZmllbGQpO1xuICAgIH1cbiAgcmV0dXJuIHtcbiAgICBibG9jazoge1xuICAgICAgbmFtZTogZGVmaW5pdGlvbi5ibG9jaz8ubmFtZSA/PyBcImJsb2NrXCIsXG4gICAgICAuLi5ibG9ja0ZpZWxkcy5sZW5ndGggPiAwID8geyBmaWVsZHM6IGJsb2NrRmllbGRzIH0gOiB7fVxuICAgIH0sXG4gICAgc3Bhbjoge1xuICAgICAgbmFtZTogXCJzcGFuXCJcbiAgICB9LFxuICAgIHN0eWxlczogc3R5bGVzLnNvbWUoKHN0eWxlKSA9PiBzdHlsZS52YWx1ZSA9PT0gXCJub3JtYWxcIikgPyBzdHlsZXMgOiBbeyB2YWx1ZTogXCJub3JtYWxcIiwgbmFtZTogXCJub3JtYWxcIiwgdGl0bGU6IFwiTm9ybWFsXCIgfSwgLi4uc3R5bGVzXSxcbiAgICBsaXN0czogKGRlZmluaXRpb24ubGlzdHMgPz8gW10pLm1hcCgobGlzdCkgPT4gKHtcbiAgICAgIC4uLmxpc3QsXG4gICAgICB2YWx1ZTogbGlzdC5uYW1lXG4gICAgfSkpLFxuICAgIGRlY29yYXRvcnM6IChkZWZpbml0aW9uLmRlY29yYXRvcnMgPz8gW10pLm1hcCgoZGVjb3JhdG9yKSA9PiAoe1xuICAgICAgLi4uZGVjb3JhdG9yLFxuICAgICAgdmFsdWU6IGRlY29yYXRvci5uYW1lXG4gICAgfSkpLFxuICAgIGFubm90YXRpb25zOiAoZGVmaW5pdGlvbi5hbm5vdGF0aW9ucyA/PyBbXSkubWFwKChhbm5vdGF0aW9uKSA9PiAoe1xuICAgICAgLi4uYW5ub3RhdGlvbixcbiAgICAgIGZpZWxkczogYW5ub3RhdGlvbi5maWVsZHMgPz8gW11cbiAgICB9KSksXG4gICAgYmxvY2tPYmplY3RzOiAoZGVmaW5pdGlvbi5ibG9ja09iamVjdHMgPz8gW10pLm1hcCgoYmxvY2tPYmplY3QpID0+ICh7XG4gICAgICAuLi5ibG9ja09iamVjdCxcbiAgICAgIGZpZWxkczogYmxvY2tPYmplY3QuZmllbGRzID8/IFtdXG4gICAgfSkpLFxuICAgIGlubGluZU9iamVjdHM6IChkZWZpbml0aW9uLmlubGluZU9iamVjdHMgPz8gW10pLm1hcCgoaW5saW5lT2JqZWN0KSA9PiAoe1xuICAgICAgLi4uaW5saW5lT2JqZWN0LFxuICAgICAgZmllbGRzOiBpbmxpbmVPYmplY3QuZmllbGRzID8/IFtdXG4gICAgfSkpXG4gIH07XG59XG5mdW5jdGlvbiBkZWZpbmVTY2hlbWEoZGVmaW5pdGlvbikge1xuICByZXR1cm4gZGVmaW5pdGlvbjtcbn1cbmZ1bmN0aW9uIGlzVHlwZWRPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiBpc1JlY29yZChvYmplY3QpICYmIHR5cGVvZiBvYmplY3QuX3R5cGUgPT0gXCJzdHJpbmdcIjtcbn1cbmZ1bmN0aW9uIGlzUmVjb3JkKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmICh0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgdmFsdWUgPT0gXCJmdW5jdGlvblwiKTtcbn1cbmZ1bmN0aW9uIGlzVGV4dEJsb2NrKGNvbnRleHQsIGJsb2NrKSB7XG4gIHJldHVybiAhKCFpc1R5cGVkT2JqZWN0KGJsb2NrKSB8fCBibG9jay5fdHlwZSAhPT0gY29udGV4dC5zY2hlbWEuYmxvY2submFtZSB8fCAhQXJyYXkuaXNBcnJheShibG9jay5jaGlsZHJlbikpO1xufVxuZnVuY3Rpb24gaXNTcGFuKGNvbnRleHQsIGNoaWxkKSB7XG4gIHJldHVybiAhKCFpc1R5cGVkT2JqZWN0KGNoaWxkKSB8fCBjaGlsZC5fdHlwZSAhPT0gY29udGV4dC5zY2hlbWEuc3Bhbi5uYW1lIHx8IHR5cGVvZiBjaGlsZC50ZXh0ICE9IFwic3RyaW5nXCIpO1xufVxuZXhwb3J0IHtcbiAgY29tcGlsZVNjaGVtYSxcbiAgZGVmaW5lU2NoZW1hLFxuICBpc1NwYW4sXG4gIGlzVGV4dEJsb2NrLFxuICBpc1R5cGVkT2JqZWN0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@portabletext/schema/dist/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@portabletext/to-html/dist/pt-to-html.mjs":
/*!*****************************************************************!*\
  !*** ../node_modules/@portabletext/to-html/dist/pt-to-html.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultComponents: () => (/* binding */ defaultComponents),\n/* harmony export */   escapeHTML: () => (/* binding */ escapeHTML),\n/* harmony export */   mergeComponents: () => (/* binding */ mergeComponents),\n/* harmony export */   toHTML: () => (/* binding */ toHTML),\n/* harmony export */   uriLooksSafe: () => (/* binding */ uriLooksSafe)\n/* harmony export */ });\n/* harmony import */ var _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @portabletext/toolkit */ \"(ssr)/../node_modules/@portabletext/toolkit/dist/index.js\");\n\nconst allowedProtocols = [\"http\", \"https\", \"mailto\", \"tel\"], charMap = {\n  \"&\": \"amp\",\n  \"<\": \"lt\",\n  \">\": \"gt\",\n  '\"': \"quot\",\n  \"'\": \"#x27\"\n};\nfunction escapeHTML(str) {\n  return replaceMultipleSpaces(str.replace(/[&<>\"']/g, (s) => `&${charMap[s]};`));\n}\nfunction replaceMultipleSpaces(str) {\n  return str.replace(/ {2,}/g, (match) => `${\"&nbsp;\".repeat(match.length - 1)} `);\n}\nfunction uriLooksSafe(uri) {\n  const url = (uri || \"\").trim(), first = url.charAt(0);\n  if (first === \"#\" || first === \"/\")\n    return !0;\n  const colonIndex = url.indexOf(\":\");\n  if (colonIndex === -1)\n    return !0;\n  const proto = url.slice(0, colonIndex).toLowerCase();\n  if (allowedProtocols.indexOf(proto) !== -1)\n    return !0;\n  const queryIndex = url.indexOf(\"?\");\n  if (queryIndex !== -1 && colonIndex > queryIndex)\n    return !0;\n  const hashIndex = url.indexOf(\"#\");\n  return hashIndex !== -1 && colonIndex > hashIndex;\n}\nconst defaultLists = {\n  number: ({ children }) => `<ol>${children}</ol>`,\n  bullet: ({ children }) => `<ul>${children}</ul>`\n}, DefaultListItem = ({ children }) => `<li>${children}</li>`, link = ({ children, value }) => {\n  const href = (value == null ? void 0 : value.href) || \"\";\n  return uriLooksSafe(href) ? `<a href=\"${escapeHTML(href)}\">${children}</a>` : children;\n}, defaultMarks = {\n  em: ({ children }) => `<em>${children}</em>`,\n  strong: ({ children }) => `<strong>${children}</strong>`,\n  code: ({ children }) => `<code>${children}</code>`,\n  underline: ({ children }) => `<span style=\"text-decoration:underline\">${children}</span>`,\n  \"strike-through\": ({ children }) => `<del>${children}</del>`,\n  link\n}, getTemplate = (type, prop) => `Unknown ${type}, specify a component for it in the \\`components.${prop}\\` option`, unknownTypeWarning = (typeName) => getTemplate(`block type \"${typeName}\"`, \"types\"), unknownMarkWarning = (markType) => getTemplate(`mark type \"${markType}\"`, \"marks\"), unknownBlockStyleWarning = (blockStyle) => getTemplate(`block style \"${blockStyle}\"`, \"block\"), unknownListStyleWarning = (listStyle) => getTemplate(`list style \"${listStyle}\"`, \"list\"), unknownListItemStyleWarning = (listStyle) => getTemplate(`list item style \"${listStyle}\"`, \"listItem\");\nfunction printWarning(message) {\n  console.warn(message);\n}\nconst DefaultUnknownType = ({\n  value,\n  isInline\n}) => {\n  const warning = unknownTypeWarning(value._type);\n  return isInline ? `<span style=\"display:none\">${warning}</span>` : `<div style=\"display:none\">${warning}</div>`;\n}, DefaultUnknownMark = ({\n  markType,\n  children\n}) => `<span class=\"unknown__pt__mark__${markType}\">${children}</span>`, DefaultUnknownBlockStyle = ({\n  children\n}) => `<p>${children}</p>`, DefaultUnknownList = ({ children }) => `<ul>${children}</ul>`, DefaultUnknownListItem = ({\n  children\n}) => `<li>${children}</li>`, DefaultHardBreak = () => \"<br/>\", defaultPortableTextBlockStyles = {\n  normal: ({ children }) => `<p>${children}</p>`,\n  blockquote: ({ children }) => `<blockquote>${children}</blockquote>`,\n  h1: ({ children }) => `<h1>${children}</h1>`,\n  h2: ({ children }) => `<h2>${children}</h2>`,\n  h3: ({ children }) => `<h3>${children}</h3>`,\n  h4: ({ children }) => `<h4>${children}</h4>`,\n  h5: ({ children }) => `<h5>${children}</h5>`,\n  h6: ({ children }) => `<h6>${children}</h6>`\n}, defaultComponents = {\n  types: {},\n  block: defaultPortableTextBlockStyles,\n  marks: defaultMarks,\n  list: defaultLists,\n  listItem: DefaultListItem,\n  hardBreak: DefaultHardBreak,\n  escapeHTML,\n  unknownType: DefaultUnknownType,\n  unknownMark: DefaultUnknownMark,\n  unknownList: DefaultUnknownList,\n  unknownListItem: DefaultUnknownListItem,\n  unknownBlockStyle: DefaultUnknownBlockStyle\n};\nfunction mergeComponents(parent, overrides) {\n  const { block, list, listItem, marks, types, ...rest } = overrides;\n  return {\n    ...parent,\n    block: mergeDeeply(parent, overrides, \"block\"),\n    list: mergeDeeply(parent, overrides, \"list\"),\n    listItem: mergeDeeply(parent, overrides, \"listItem\"),\n    marks: mergeDeeply(parent, overrides, \"marks\"),\n    types: mergeDeeply(parent, overrides, \"types\"),\n    ...rest\n  };\n}\nfunction mergeDeeply(parent, overrides, key) {\n  const override = overrides[key], parentVal = parent[key];\n  return typeof override == \"function\" || override && typeof parentVal == \"function\" ? override : override ? { ...parentVal, ...override } : parentVal;\n}\nfunction toHTML(value, options = {}) {\n  const {\n    components: componentOverrides,\n    onMissingComponent: missingComponentHandler = printWarning\n  } = options, handleMissingComponent = missingComponentHandler || noop, blocks = Array.isArray(value) ? value : [value], nested = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.nestLists)(blocks, \"html\"), components = componentOverrides ? mergeComponents(defaultComponents, componentOverrides) : defaultComponents, renderNode = getNodeRenderer(components, handleMissingComponent);\n  return nested.map(\n    (node, index) => renderNode({ node, index, isInline: !1, renderNode })\n  ).join(\"\");\n}\nconst getNodeRenderer = (components, handleMissingComponent) => {\n  function renderNode(options) {\n    const { node, index, isInline } = options;\n    return (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextToolkitList)(node) ? renderList(node, index) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextListItemBlock)(node) ? renderListItem(node, index) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextToolkitSpan)(node) ? renderSpan(node) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextBlock)(node) ? renderBlock(node, index, isInline) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextToolkitTextNode)(node) ? renderText(node) : renderCustomBlock(node, index, isInline);\n  }\n  function renderListItem(node, index) {\n    const tree = serializeBlock({ node, index, isInline: !1, renderNode }), renderer = components.listItem, itemHandler = (typeof renderer == \"function\" ? renderer : renderer[node.listItem]) || components.unknownListItem;\n    if (itemHandler === components.unknownListItem) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListItemStyleWarning(style), {\n        type: style,\n        nodeType: \"listItemStyle\"\n      });\n    }\n    let children = tree.children;\n    if (node.style && node.style !== \"normal\") {\n      const { listItem, ...blockNode } = node;\n      children = renderNode({ node: blockNode, index, isInline: !1 });\n    }\n    return itemHandler({ value: node, index, isInline: !1, renderNode, children });\n  }\n  function renderList(node, index) {\n    const children = node.children.map(\n      (child, childIndex) => renderNode({\n        node: child._key ? child : { ...child, _key: `li-${index}-${childIndex}` },\n        index: childIndex,\n        isInline: !1\n      })\n    ), component = components.list, list = (typeof component == \"function\" ? component : component[node.listItem]) || components.unknownList;\n    if (list === components.unknownList) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListStyleWarning(style), { nodeType: \"listStyle\", type: style });\n    }\n    return list({ value: node, index, isInline: !1, renderNode, children: children.join(\"\") });\n  }\n  function renderSpan(node) {\n    const { markDef, markType, markKey } = node, span = components.marks[markType] || components.unknownMark, children = node.children.map(\n      (child, childIndex) => renderNode({ node: child, index: childIndex, isInline: !0 })\n    );\n    return span === components.unknownMark && handleMissingComponent(unknownMarkWarning(markType), { nodeType: \"mark\", type: markType }), span({\n      text: (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.spanToPlainText)(node),\n      value: markDef,\n      markType,\n      markKey,\n      renderNode,\n      children: children.join(\"\")\n    });\n  }\n  function renderBlock(node, index, isInline) {\n    const { _key, ...props } = serializeBlock({ node, index, isInline, renderNode }), style = props.node.style || \"normal\", block = (typeof components.block == \"function\" ? components.block : components.block[style]) || components.unknownBlockStyle;\n    return block === components.unknownBlockStyle && handleMissingComponent(unknownBlockStyleWarning(style), {\n      nodeType: \"blockStyle\",\n      type: style\n    }), block({ ...props, value: props.node, renderNode });\n  }\n  function renderText(node) {\n    if (node.text === `\n`) {\n      const hardBreak = components.hardBreak;\n      return hardBreak ? hardBreak() : `\n`;\n    }\n    return components.escapeHTML(node.text);\n  }\n  function renderCustomBlock(value, index, isInline) {\n    const node = components.types[value._type];\n    return node || handleMissingComponent(unknownTypeWarning(value._type), {\n      nodeType: \"block\",\n      type: value._type\n    }), (node || components.unknownType)({\n      value,\n      isInline,\n      index,\n      renderNode\n    });\n  }\n  return renderNode;\n};\nfunction serializeBlock(options) {\n  const { node, index, isInline, renderNode } = options, children = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.buildMarksTree)(node).map(\n    (child, i) => renderNode({ node: child, isInline: !0, index: i, renderNode })\n  );\n  return {\n    _key: node._key || `block-${index}`,\n    children: children.join(\"\"),\n    index,\n    isInline,\n    node\n  };\n}\nfunction noop() {\n}\n\n//# sourceMappingURL=pt-to-html.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@portabletext/to-html/dist/pt-to-html.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@portabletext/toolkit/dist/index.js":
/*!***********************************************************!*\
  !*** ../node_modules/@portabletext/toolkit/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LIST_NEST_MODE_DIRECT: () => (/* binding */ LIST_NEST_MODE_DIRECT),\n/* harmony export */   LIST_NEST_MODE_HTML: () => (/* binding */ LIST_NEST_MODE_HTML),\n/* harmony export */   buildMarksTree: () => (/* binding */ buildMarksTree),\n/* harmony export */   isPortableTextBlock: () => (/* binding */ isPortableTextBlock),\n/* harmony export */   isPortableTextListItemBlock: () => (/* binding */ isPortableTextListItemBlock),\n/* harmony export */   isPortableTextSpan: () => (/* binding */ isPortableTextSpan),\n/* harmony export */   isPortableTextToolkitList: () => (/* binding */ isPortableTextToolkitList),\n/* harmony export */   isPortableTextToolkitSpan: () => (/* binding */ isPortableTextToolkitSpan),\n/* harmony export */   isPortableTextToolkitTextNode: () => (/* binding */ isPortableTextToolkitTextNode),\n/* harmony export */   nestLists: () => (/* binding */ nestLists),\n/* harmony export */   sortMarksByOccurences: () => (/* binding */ sortMarksByOccurences),\n/* harmony export */   spanToPlainText: () => (/* binding */ spanToPlainText),\n/* harmony export */   toPlainText: () => (/* binding */ toPlainText)\n/* harmony export */ });\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every((mark) => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" && // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    (!(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) && // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every((def) => typeof def._key == \"string\")) && // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) && // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every((child) => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks)\n    return [];\n  if (!span.marks.length)\n    return [];\n  const marks = span.marks.slice(), occurences = {};\n  return marks.forEach((mark) => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1)\n        occurences[mark]++;\n      else\n        break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA], bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences)\n    return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA), bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a;\n  const { children } = block, markDefs = block.markDefs ?? [];\n  if (!children || !children.length)\n    return [];\n  const sortedMarks = children.map(sortMarksByOccurences), rootNode = {\n    _type: \"@span\",\n    children: [],\n    markType: \"<unknown>\"\n  };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span)\n      continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1)\n      for (pos; pos < nodeStack.length; pos++) {\n        const mark = ((_a = nodeStack[pos]) == null ? void 0 : _a.markKey) || \"\", index = marksNeeded.indexOf(mark);\n        if (index === -1)\n          break;\n        marksNeeded.splice(index, 1);\n      }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs == null ? void 0 : markDefs.find((def) => def._key === markKey), markType = markDef ? markDef._type : markKey, node = {\n          _type: \"@span\",\n          _key: span._key,\n          children: [],\n          markDef,\n          markType,\n          markKey\n        };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1; )\n          lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(\n          lines.map((text) => ({ _type: \"@text\", text }))\n        );\n      } else\n        currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1], newLastChild = {\n            ...lastListItem,\n            children: [...lastListItem.children, newList]\n          };\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else\n          currentList.children.push(\n            newList\n          );\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1], match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1], match = matchingBranch && findListMatching(matchingBranch, { level: block.level || 1 });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1, style = matching.listItem || \"normal\", filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style)\n    return rootNode;\n  if (!(\"children\" in rootNode))\n    return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach((current) => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/, trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current))\n      return;\n    let pad = !1;\n    current.children.forEach((span) => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\", LIST_NEST_MODE_DIRECT = \"direct\";\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@portabletext/toolkit/dist/index.js\n");

/***/ })

};
;